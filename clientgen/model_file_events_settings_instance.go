/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileEventsSettingsInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileEventsSettingsInstance{}

// FileEventsSettingsInstance A category, along with a boolean setting for each kind of file protocol event that determines whether to notify the file event service in that category (timeframe). Was added in version 3.0.0.0.
type FileEventsSettingsInstance struct {
	EventsCategory *FileEventsCategoryEnum `json:"events_category,omitempty"`
	// Sends a notification when a file is opened for a change other than read or write access. Protocols: SMB, NFS(v4). 
	OpenFileNoAccess *bool `json:"open_file_no_access,omitempty"`
	// Sends a notification when a file is opened for read access. Protocols: SMB, NFS(v4). 
	OpenFileRead *bool `json:"open_file_read,omitempty"`
	// Sends a notification when a file is opened for write access. Protocols: SMB, NFS(v4). 
	OpenFileWrite *bool `json:"open_file_write,omitempty"`
	// Sends a notification when a file is created. Protocols: SMB, NFS(v3/v4). 
	CreateFile *bool `json:"create_file,omitempty"`
	// Sends a notification when a directory is created. Protocols: SMB, NFS(v3/v4). 
	CreateDir *bool `json:"create_dir,omitempty"`
	// Sends a notification when a file is deleted. Protocols: SMB, NFS(v3/v4). 
	DeleteFile *bool `json:"delete_file,omitempty"`
	// Sends a notification when a directory is deleted. Protocols: SMB, NFS(v3/v4). 
	DeleteDir *bool `json:"delete_dir,omitempty"`
	// Sends a notification when a file was modified before closing. Protocols: SMB, NFS(v4). 
	CloseModified *bool `json:"close_modified,omitempty"`
	// Sends a notification when a file was not modified before closing. Protocols: SMB, NFS(v4). 
	CloseUnmodified *bool `json:"close_unmodified,omitempty"`
	// Sends a notification when a file is renamed. Protocols: SMB, NFS(v3/v4). 
	RenameFile *bool `json:"rename_file,omitempty"`
	// Sends a notification when a directory is renamed. Protocols: SMB, NFS(v3/v4). 
	RenameDir *bool `json:"rename_dir,omitempty"`
	// Sends a notification when the security descriptor (ACL) on a files is modified. Protocols: SMB. 
	SetAclFile *bool `json:"set_acl_file,omitempty"`
	// Sends a notification when the secuirty descriptor (ACL) on a directory is modified. Protocols: SMB. 
	SetAclDir *bool `json:"set_acl_dir,omitempty"`
	// Sends a notification when a directory is opened. Protocols: SMB. 
	OpenDir *bool `json:"open_dir,omitempty"`
	// Sends a notification when a directory is closed. Protocols: SMB. 
	CloseDir *bool `json:"close_dir,omitempty"`
	// Sends a notification when a file read is received over NFS. Protocols: NFS(v3/v4). 
	FileRead *bool `json:"file_read,omitempty"`
	// Sends a notification when a file write is received over NFS. Protocols: NFS(v3/v4). 
	FileWrite *bool `json:"file_write,omitempty"`
	// Sends a notification when a file security modification is received over NFS. Protocols: NFS(v3/v4). 
	SetSecFile *bool `json:"set_sec_file,omitempty"`
	// Sends a notification when a directory security modification is received over NFS. Protocols: NFS(v3/v4). 
	SetSecDir *bool `json:"set_sec_dir,omitempty"`
	// Sends a notification when a offline file is opened for read access. Protocols: SMB, NFS(v4). 
	OpenFileReadOffline *bool `json:"open_file_read_offline,omitempty"`
	// Sends a notification when a offline file in opened for write access. Protocols: SMB, NFS(v4). 
	OpenFileWriteOffline *bool `json:"open_file_write_offline,omitempty"`
}

// NewFileEventsSettingsInstance instantiates a new FileEventsSettingsInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileEventsSettingsInstance() *FileEventsSettingsInstance {
	this := FileEventsSettingsInstance{}
	var openFileNoAccess bool = false
	this.OpenFileNoAccess = &openFileNoAccess
	var openFileRead bool = false
	this.OpenFileRead = &openFileRead
	var openFileWrite bool = false
	this.OpenFileWrite = &openFileWrite
	var createFile bool = false
	this.CreateFile = &createFile
	var createDir bool = false
	this.CreateDir = &createDir
	var deleteFile bool = false
	this.DeleteFile = &deleteFile
	var deleteDir bool = false
	this.DeleteDir = &deleteDir
	var closeModified bool = false
	this.CloseModified = &closeModified
	var closeUnmodified bool = false
	this.CloseUnmodified = &closeUnmodified
	var renameFile bool = false
	this.RenameFile = &renameFile
	var renameDir bool = false
	this.RenameDir = &renameDir
	var setAclFile bool = false
	this.SetAclFile = &setAclFile
	var setAclDir bool = false
	this.SetAclDir = &setAclDir
	var openDir bool = false
	this.OpenDir = &openDir
	var closeDir bool = false
	this.CloseDir = &closeDir
	var fileRead bool = false
	this.FileRead = &fileRead
	var fileWrite bool = false
	this.FileWrite = &fileWrite
	var setSecFile bool = false
	this.SetSecFile = &setSecFile
	var setSecDir bool = false
	this.SetSecDir = &setSecDir
	var openFileReadOffline bool = false
	this.OpenFileReadOffline = &openFileReadOffline
	var openFileWriteOffline bool = false
	this.OpenFileWriteOffline = &openFileWriteOffline
	return &this
}

// NewFileEventsSettingsInstanceWithDefaults instantiates a new FileEventsSettingsInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileEventsSettingsInstanceWithDefaults() *FileEventsSettingsInstance {
	this := FileEventsSettingsInstance{}
	var openFileNoAccess bool = false
	this.OpenFileNoAccess = &openFileNoAccess
	var openFileRead bool = false
	this.OpenFileRead = &openFileRead
	var openFileWrite bool = false
	this.OpenFileWrite = &openFileWrite
	var createFile bool = false
	this.CreateFile = &createFile
	var createDir bool = false
	this.CreateDir = &createDir
	var deleteFile bool = false
	this.DeleteFile = &deleteFile
	var deleteDir bool = false
	this.DeleteDir = &deleteDir
	var closeModified bool = false
	this.CloseModified = &closeModified
	var closeUnmodified bool = false
	this.CloseUnmodified = &closeUnmodified
	var renameFile bool = false
	this.RenameFile = &renameFile
	var renameDir bool = false
	this.RenameDir = &renameDir
	var setAclFile bool = false
	this.SetAclFile = &setAclFile
	var setAclDir bool = false
	this.SetAclDir = &setAclDir
	var openDir bool = false
	this.OpenDir = &openDir
	var closeDir bool = false
	this.CloseDir = &closeDir
	var fileRead bool = false
	this.FileRead = &fileRead
	var fileWrite bool = false
	this.FileWrite = &fileWrite
	var setSecFile bool = false
	this.SetSecFile = &setSecFile
	var setSecDir bool = false
	this.SetSecDir = &setSecDir
	var openFileReadOffline bool = false
	this.OpenFileReadOffline = &openFileReadOffline
	var openFileWriteOffline bool = false
	this.OpenFileWriteOffline = &openFileWriteOffline
	return &this
}

// GetEventsCategory returns the EventsCategory field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetEventsCategory() FileEventsCategoryEnum {
	if o == nil || IsNil(o.EventsCategory) {
		var ret FileEventsCategoryEnum
		return ret
	}
	return *o.EventsCategory
}

// GetEventsCategoryOk returns a tuple with the EventsCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetEventsCategoryOk() (*FileEventsCategoryEnum, bool) {
	if o == nil || IsNil(o.EventsCategory) {
		return nil, false
	}
	return o.EventsCategory, true
}

// HasEventsCategory returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasEventsCategory() bool {
	if o != nil && !IsNil(o.EventsCategory) {
		return true
	}

	return false
}

// SetEventsCategory gets a reference to the given FileEventsCategoryEnum and assigns it to the EventsCategory field.
func (o *FileEventsSettingsInstance) SetEventsCategory(v FileEventsCategoryEnum) {
	o.EventsCategory = &v
}

// GetOpenFileNoAccess returns the OpenFileNoAccess field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetOpenFileNoAccess() bool {
	if o == nil || IsNil(o.OpenFileNoAccess) {
		var ret bool
		return ret
	}
	return *o.OpenFileNoAccess
}

// GetOpenFileNoAccessOk returns a tuple with the OpenFileNoAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetOpenFileNoAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenFileNoAccess) {
		return nil, false
	}
	return o.OpenFileNoAccess, true
}

// HasOpenFileNoAccess returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasOpenFileNoAccess() bool {
	if o != nil && !IsNil(o.OpenFileNoAccess) {
		return true
	}

	return false
}

// SetOpenFileNoAccess gets a reference to the given bool and assigns it to the OpenFileNoAccess field.
func (o *FileEventsSettingsInstance) SetOpenFileNoAccess(v bool) {
	o.OpenFileNoAccess = &v
}

// GetOpenFileRead returns the OpenFileRead field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetOpenFileRead() bool {
	if o == nil || IsNil(o.OpenFileRead) {
		var ret bool
		return ret
	}
	return *o.OpenFileRead
}

// GetOpenFileReadOk returns a tuple with the OpenFileRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetOpenFileReadOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenFileRead) {
		return nil, false
	}
	return o.OpenFileRead, true
}

// HasOpenFileRead returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasOpenFileRead() bool {
	if o != nil && !IsNil(o.OpenFileRead) {
		return true
	}

	return false
}

// SetOpenFileRead gets a reference to the given bool and assigns it to the OpenFileRead field.
func (o *FileEventsSettingsInstance) SetOpenFileRead(v bool) {
	o.OpenFileRead = &v
}

// GetOpenFileWrite returns the OpenFileWrite field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetOpenFileWrite() bool {
	if o == nil || IsNil(o.OpenFileWrite) {
		var ret bool
		return ret
	}
	return *o.OpenFileWrite
}

// GetOpenFileWriteOk returns a tuple with the OpenFileWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetOpenFileWriteOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenFileWrite) {
		return nil, false
	}
	return o.OpenFileWrite, true
}

// HasOpenFileWrite returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasOpenFileWrite() bool {
	if o != nil && !IsNil(o.OpenFileWrite) {
		return true
	}

	return false
}

// SetOpenFileWrite gets a reference to the given bool and assigns it to the OpenFileWrite field.
func (o *FileEventsSettingsInstance) SetOpenFileWrite(v bool) {
	o.OpenFileWrite = &v
}

// GetCreateFile returns the CreateFile field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetCreateFile() bool {
	if o == nil || IsNil(o.CreateFile) {
		var ret bool
		return ret
	}
	return *o.CreateFile
}

// GetCreateFileOk returns a tuple with the CreateFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetCreateFileOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateFile) {
		return nil, false
	}
	return o.CreateFile, true
}

// HasCreateFile returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasCreateFile() bool {
	if o != nil && !IsNil(o.CreateFile) {
		return true
	}

	return false
}

// SetCreateFile gets a reference to the given bool and assigns it to the CreateFile field.
func (o *FileEventsSettingsInstance) SetCreateFile(v bool) {
	o.CreateFile = &v
}

// GetCreateDir returns the CreateDir field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetCreateDir() bool {
	if o == nil || IsNil(o.CreateDir) {
		var ret bool
		return ret
	}
	return *o.CreateDir
}

// GetCreateDirOk returns a tuple with the CreateDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetCreateDirOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateDir) {
		return nil, false
	}
	return o.CreateDir, true
}

// HasCreateDir returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasCreateDir() bool {
	if o != nil && !IsNil(o.CreateDir) {
		return true
	}

	return false
}

// SetCreateDir gets a reference to the given bool and assigns it to the CreateDir field.
func (o *FileEventsSettingsInstance) SetCreateDir(v bool) {
	o.CreateDir = &v
}

// GetDeleteFile returns the DeleteFile field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetDeleteFile() bool {
	if o == nil || IsNil(o.DeleteFile) {
		var ret bool
		return ret
	}
	return *o.DeleteFile
}

// GetDeleteFileOk returns a tuple with the DeleteFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetDeleteFileOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteFile) {
		return nil, false
	}
	return o.DeleteFile, true
}

// HasDeleteFile returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasDeleteFile() bool {
	if o != nil && !IsNil(o.DeleteFile) {
		return true
	}

	return false
}

// SetDeleteFile gets a reference to the given bool and assigns it to the DeleteFile field.
func (o *FileEventsSettingsInstance) SetDeleteFile(v bool) {
	o.DeleteFile = &v
}

// GetDeleteDir returns the DeleteDir field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetDeleteDir() bool {
	if o == nil || IsNil(o.DeleteDir) {
		var ret bool
		return ret
	}
	return *o.DeleteDir
}

// GetDeleteDirOk returns a tuple with the DeleteDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetDeleteDirOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteDir) {
		return nil, false
	}
	return o.DeleteDir, true
}

// HasDeleteDir returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasDeleteDir() bool {
	if o != nil && !IsNil(o.DeleteDir) {
		return true
	}

	return false
}

// SetDeleteDir gets a reference to the given bool and assigns it to the DeleteDir field.
func (o *FileEventsSettingsInstance) SetDeleteDir(v bool) {
	o.DeleteDir = &v
}

// GetCloseModified returns the CloseModified field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetCloseModified() bool {
	if o == nil || IsNil(o.CloseModified) {
		var ret bool
		return ret
	}
	return *o.CloseModified
}

// GetCloseModifiedOk returns a tuple with the CloseModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetCloseModifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.CloseModified) {
		return nil, false
	}
	return o.CloseModified, true
}

// HasCloseModified returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasCloseModified() bool {
	if o != nil && !IsNil(o.CloseModified) {
		return true
	}

	return false
}

// SetCloseModified gets a reference to the given bool and assigns it to the CloseModified field.
func (o *FileEventsSettingsInstance) SetCloseModified(v bool) {
	o.CloseModified = &v
}

// GetCloseUnmodified returns the CloseUnmodified field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetCloseUnmodified() bool {
	if o == nil || IsNil(o.CloseUnmodified) {
		var ret bool
		return ret
	}
	return *o.CloseUnmodified
}

// GetCloseUnmodifiedOk returns a tuple with the CloseUnmodified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetCloseUnmodifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.CloseUnmodified) {
		return nil, false
	}
	return o.CloseUnmodified, true
}

// HasCloseUnmodified returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasCloseUnmodified() bool {
	if o != nil && !IsNil(o.CloseUnmodified) {
		return true
	}

	return false
}

// SetCloseUnmodified gets a reference to the given bool and assigns it to the CloseUnmodified field.
func (o *FileEventsSettingsInstance) SetCloseUnmodified(v bool) {
	o.CloseUnmodified = &v
}

// GetRenameFile returns the RenameFile field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetRenameFile() bool {
	if o == nil || IsNil(o.RenameFile) {
		var ret bool
		return ret
	}
	return *o.RenameFile
}

// GetRenameFileOk returns a tuple with the RenameFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetRenameFileOk() (*bool, bool) {
	if o == nil || IsNil(o.RenameFile) {
		return nil, false
	}
	return o.RenameFile, true
}

// HasRenameFile returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasRenameFile() bool {
	if o != nil && !IsNil(o.RenameFile) {
		return true
	}

	return false
}

// SetRenameFile gets a reference to the given bool and assigns it to the RenameFile field.
func (o *FileEventsSettingsInstance) SetRenameFile(v bool) {
	o.RenameFile = &v
}

// GetRenameDir returns the RenameDir field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetRenameDir() bool {
	if o == nil || IsNil(o.RenameDir) {
		var ret bool
		return ret
	}
	return *o.RenameDir
}

// GetRenameDirOk returns a tuple with the RenameDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetRenameDirOk() (*bool, bool) {
	if o == nil || IsNil(o.RenameDir) {
		return nil, false
	}
	return o.RenameDir, true
}

// HasRenameDir returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasRenameDir() bool {
	if o != nil && !IsNil(o.RenameDir) {
		return true
	}

	return false
}

// SetRenameDir gets a reference to the given bool and assigns it to the RenameDir field.
func (o *FileEventsSettingsInstance) SetRenameDir(v bool) {
	o.RenameDir = &v
}

// GetSetAclFile returns the SetAclFile field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetSetAclFile() bool {
	if o == nil || IsNil(o.SetAclFile) {
		var ret bool
		return ret
	}
	return *o.SetAclFile
}

// GetSetAclFileOk returns a tuple with the SetAclFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetSetAclFileOk() (*bool, bool) {
	if o == nil || IsNil(o.SetAclFile) {
		return nil, false
	}
	return o.SetAclFile, true
}

// HasSetAclFile returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasSetAclFile() bool {
	if o != nil && !IsNil(o.SetAclFile) {
		return true
	}

	return false
}

// SetSetAclFile gets a reference to the given bool and assigns it to the SetAclFile field.
func (o *FileEventsSettingsInstance) SetSetAclFile(v bool) {
	o.SetAclFile = &v
}

// GetSetAclDir returns the SetAclDir field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetSetAclDir() bool {
	if o == nil || IsNil(o.SetAclDir) {
		var ret bool
		return ret
	}
	return *o.SetAclDir
}

// GetSetAclDirOk returns a tuple with the SetAclDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetSetAclDirOk() (*bool, bool) {
	if o == nil || IsNil(o.SetAclDir) {
		return nil, false
	}
	return o.SetAclDir, true
}

// HasSetAclDir returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasSetAclDir() bool {
	if o != nil && !IsNil(o.SetAclDir) {
		return true
	}

	return false
}

// SetSetAclDir gets a reference to the given bool and assigns it to the SetAclDir field.
func (o *FileEventsSettingsInstance) SetSetAclDir(v bool) {
	o.SetAclDir = &v
}

// GetOpenDir returns the OpenDir field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetOpenDir() bool {
	if o == nil || IsNil(o.OpenDir) {
		var ret bool
		return ret
	}
	return *o.OpenDir
}

// GetOpenDirOk returns a tuple with the OpenDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetOpenDirOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenDir) {
		return nil, false
	}
	return o.OpenDir, true
}

// HasOpenDir returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasOpenDir() bool {
	if o != nil && !IsNil(o.OpenDir) {
		return true
	}

	return false
}

// SetOpenDir gets a reference to the given bool and assigns it to the OpenDir field.
func (o *FileEventsSettingsInstance) SetOpenDir(v bool) {
	o.OpenDir = &v
}

// GetCloseDir returns the CloseDir field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetCloseDir() bool {
	if o == nil || IsNil(o.CloseDir) {
		var ret bool
		return ret
	}
	return *o.CloseDir
}

// GetCloseDirOk returns a tuple with the CloseDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetCloseDirOk() (*bool, bool) {
	if o == nil || IsNil(o.CloseDir) {
		return nil, false
	}
	return o.CloseDir, true
}

// HasCloseDir returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasCloseDir() bool {
	if o != nil && !IsNil(o.CloseDir) {
		return true
	}

	return false
}

// SetCloseDir gets a reference to the given bool and assigns it to the CloseDir field.
func (o *FileEventsSettingsInstance) SetCloseDir(v bool) {
	o.CloseDir = &v
}

// GetFileRead returns the FileRead field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetFileRead() bool {
	if o == nil || IsNil(o.FileRead) {
		var ret bool
		return ret
	}
	return *o.FileRead
}

// GetFileReadOk returns a tuple with the FileRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetFileReadOk() (*bool, bool) {
	if o == nil || IsNil(o.FileRead) {
		return nil, false
	}
	return o.FileRead, true
}

// HasFileRead returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasFileRead() bool {
	if o != nil && !IsNil(o.FileRead) {
		return true
	}

	return false
}

// SetFileRead gets a reference to the given bool and assigns it to the FileRead field.
func (o *FileEventsSettingsInstance) SetFileRead(v bool) {
	o.FileRead = &v
}

// GetFileWrite returns the FileWrite field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetFileWrite() bool {
	if o == nil || IsNil(o.FileWrite) {
		var ret bool
		return ret
	}
	return *o.FileWrite
}

// GetFileWriteOk returns a tuple with the FileWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetFileWriteOk() (*bool, bool) {
	if o == nil || IsNil(o.FileWrite) {
		return nil, false
	}
	return o.FileWrite, true
}

// HasFileWrite returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasFileWrite() bool {
	if o != nil && !IsNil(o.FileWrite) {
		return true
	}

	return false
}

// SetFileWrite gets a reference to the given bool and assigns it to the FileWrite field.
func (o *FileEventsSettingsInstance) SetFileWrite(v bool) {
	o.FileWrite = &v
}

// GetSetSecFile returns the SetSecFile field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetSetSecFile() bool {
	if o == nil || IsNil(o.SetSecFile) {
		var ret bool
		return ret
	}
	return *o.SetSecFile
}

// GetSetSecFileOk returns a tuple with the SetSecFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetSetSecFileOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSecFile) {
		return nil, false
	}
	return o.SetSecFile, true
}

// HasSetSecFile returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasSetSecFile() bool {
	if o != nil && !IsNil(o.SetSecFile) {
		return true
	}

	return false
}

// SetSetSecFile gets a reference to the given bool and assigns it to the SetSecFile field.
func (o *FileEventsSettingsInstance) SetSetSecFile(v bool) {
	o.SetSecFile = &v
}

// GetSetSecDir returns the SetSecDir field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetSetSecDir() bool {
	if o == nil || IsNil(o.SetSecDir) {
		var ret bool
		return ret
	}
	return *o.SetSecDir
}

// GetSetSecDirOk returns a tuple with the SetSecDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetSetSecDirOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSecDir) {
		return nil, false
	}
	return o.SetSecDir, true
}

// HasSetSecDir returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasSetSecDir() bool {
	if o != nil && !IsNil(o.SetSecDir) {
		return true
	}

	return false
}

// SetSetSecDir gets a reference to the given bool and assigns it to the SetSecDir field.
func (o *FileEventsSettingsInstance) SetSetSecDir(v bool) {
	o.SetSecDir = &v
}

// GetOpenFileReadOffline returns the OpenFileReadOffline field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetOpenFileReadOffline() bool {
	if o == nil || IsNil(o.OpenFileReadOffline) {
		var ret bool
		return ret
	}
	return *o.OpenFileReadOffline
}

// GetOpenFileReadOfflineOk returns a tuple with the OpenFileReadOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetOpenFileReadOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenFileReadOffline) {
		return nil, false
	}
	return o.OpenFileReadOffline, true
}

// HasOpenFileReadOffline returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasOpenFileReadOffline() bool {
	if o != nil && !IsNil(o.OpenFileReadOffline) {
		return true
	}

	return false
}

// SetOpenFileReadOffline gets a reference to the given bool and assigns it to the OpenFileReadOffline field.
func (o *FileEventsSettingsInstance) SetOpenFileReadOffline(v bool) {
	o.OpenFileReadOffline = &v
}

// GetOpenFileWriteOffline returns the OpenFileWriteOffline field value if set, zero value otherwise.
func (o *FileEventsSettingsInstance) GetOpenFileWriteOffline() bool {
	if o == nil || IsNil(o.OpenFileWriteOffline) {
		var ret bool
		return ret
	}
	return *o.OpenFileWriteOffline
}

// GetOpenFileWriteOfflineOk returns a tuple with the OpenFileWriteOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsSettingsInstance) GetOpenFileWriteOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenFileWriteOffline) {
		return nil, false
	}
	return o.OpenFileWriteOffline, true
}

// HasOpenFileWriteOffline returns a boolean if a field has been set.
func (o *FileEventsSettingsInstance) HasOpenFileWriteOffline() bool {
	if o != nil && !IsNil(o.OpenFileWriteOffline) {
		return true
	}

	return false
}

// SetOpenFileWriteOffline gets a reference to the given bool and assigns it to the OpenFileWriteOffline field.
func (o *FileEventsSettingsInstance) SetOpenFileWriteOffline(v bool) {
	o.OpenFileWriteOffline = &v
}

func (o FileEventsSettingsInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileEventsSettingsInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventsCategory) {
		toSerialize["events_category"] = o.EventsCategory
	}
	if !IsNil(o.OpenFileNoAccess) {
		toSerialize["open_file_no_access"] = o.OpenFileNoAccess
	}
	if !IsNil(o.OpenFileRead) {
		toSerialize["open_file_read"] = o.OpenFileRead
	}
	if !IsNil(o.OpenFileWrite) {
		toSerialize["open_file_write"] = o.OpenFileWrite
	}
	if !IsNil(o.CreateFile) {
		toSerialize["create_file"] = o.CreateFile
	}
	if !IsNil(o.CreateDir) {
		toSerialize["create_dir"] = o.CreateDir
	}
	if !IsNil(o.DeleteFile) {
		toSerialize["delete_file"] = o.DeleteFile
	}
	if !IsNil(o.DeleteDir) {
		toSerialize["delete_dir"] = o.DeleteDir
	}
	if !IsNil(o.CloseModified) {
		toSerialize["close_modified"] = o.CloseModified
	}
	if !IsNil(o.CloseUnmodified) {
		toSerialize["close_unmodified"] = o.CloseUnmodified
	}
	if !IsNil(o.RenameFile) {
		toSerialize["rename_file"] = o.RenameFile
	}
	if !IsNil(o.RenameDir) {
		toSerialize["rename_dir"] = o.RenameDir
	}
	if !IsNil(o.SetAclFile) {
		toSerialize["set_acl_file"] = o.SetAclFile
	}
	if !IsNil(o.SetAclDir) {
		toSerialize["set_acl_dir"] = o.SetAclDir
	}
	if !IsNil(o.OpenDir) {
		toSerialize["open_dir"] = o.OpenDir
	}
	if !IsNil(o.CloseDir) {
		toSerialize["close_dir"] = o.CloseDir
	}
	if !IsNil(o.FileRead) {
		toSerialize["file_read"] = o.FileRead
	}
	if !IsNil(o.FileWrite) {
		toSerialize["file_write"] = o.FileWrite
	}
	if !IsNil(o.SetSecFile) {
		toSerialize["set_sec_file"] = o.SetSecFile
	}
	if !IsNil(o.SetSecDir) {
		toSerialize["set_sec_dir"] = o.SetSecDir
	}
	if !IsNil(o.OpenFileReadOffline) {
		toSerialize["open_file_read_offline"] = o.OpenFileReadOffline
	}
	if !IsNil(o.OpenFileWriteOffline) {
		toSerialize["open_file_write_offline"] = o.OpenFileWriteOffline
	}
	return toSerialize, nil
}

type NullableFileEventsSettingsInstance struct {
	value *FileEventsSettingsInstance
	isSet bool
}

func (v NullableFileEventsSettingsInstance) Get() *FileEventsSettingsInstance {
	return v.value
}

func (v *NullableFileEventsSettingsInstance) Set(val *FileEventsSettingsInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileEventsSettingsInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileEventsSettingsInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileEventsSettingsInstance(val *FileEventsSettingsInstance) *NullableFileEventsSettingsInstance {
	return &NullableFileEventsSettingsInstance{value: val, isSet: true}
}

func (v NullableFileEventsSettingsInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileEventsSettingsInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


