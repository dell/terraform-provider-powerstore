/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileTreeQuotaInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileTreeQuotaInstance{}

// FileTreeQuotaInstance Properties of a file tree quota. Values was added in 2.0.0.0: grace_period. This resource type has queriable associations from file_system, file_user_quota
type FileTreeQuotaInstance struct {
	// Unique identifier of the tree quota.
	Id *string `json:"id,omitempty"`
	// Unique identifier of the associated file system.
	FileSystemId *string `json:"file_system_id,omitempty"`
	// Path relative to the root of the associated filesystem.
	Path *string `json:"path,omitempty"`
	// Description of the tree quota.
	Description *string `json:"description,omitempty"`
	// Whether user quota are enabled on this tree quota. The tree quota itself is enforced regardless of this parameter. 
	IsUserQuotasEnforced *bool `json:"is_user_quotas_enforced,omitempty"`
	State *FileQuotaStateEnum `json:"state,omitempty"`
	// Hard limit of the tree quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space.
	HardLimit *int64 `json:"hard_limit,omitempty"`
	// Soft limit of the tree quota, in bytes. No soft limit when set to 0.
	SoftLimit *int64 `json:"soft_limit,omitempty"`
	// Remaining grace period, in seconds, after the soft limit is exceeded: * 0 - Grace period has already expired * -1 - No grace period in-progress, or infinite grace period set The grace period of user quotas is set in the file system quota config. 
	RemainingGracePeriod *int64 `json:"remaining_grace_period,omitempty"`
	// Size already used on the tree quota, in bytes.
	SizeUsed *int64 `json:"size_used,omitempty"`
	// Grace period of soft limit (seconds). This will override the default grace period set at filesystem level.  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).  Was added in version 2.0.0.0.
	GracePeriod *int32 `json:"grace_period,omitempty"`
	// Localized message string corresponding to state
	StateL10n *string `json:"state_l10n,omitempty"`
	FileSystem *FileSystemInstance `json:"file_system,omitempty"`
	// This is the inverse of the resource type file_user_quota association.
	FileUserTreeQuotas []FileUserQuotaInstance `json:"file_user_tree_quotas,omitempty"`
}

// NewFileTreeQuotaInstance instantiates a new FileTreeQuotaInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileTreeQuotaInstance() *FileTreeQuotaInstance {
	this := FileTreeQuotaInstance{}
	var gracePeriod int32 = 0
	this.GracePeriod = &gracePeriod
	return &this
}

// NewFileTreeQuotaInstanceWithDefaults instantiates a new FileTreeQuotaInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileTreeQuotaInstanceWithDefaults() *FileTreeQuotaInstance {
	this := FileTreeQuotaInstance{}
	var gracePeriod int32 = 0
	this.GracePeriod = &gracePeriod
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileTreeQuotaInstance) SetId(v string) {
	o.Id = &v
}

// GetFileSystemId returns the FileSystemId field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetFileSystemId() string {
	if o == nil || IsNil(o.FileSystemId) {
		var ret string
		return ret
	}
	return *o.FileSystemId
}

// GetFileSystemIdOk returns a tuple with the FileSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetFileSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.FileSystemId) {
		return nil, false
	}
	return o.FileSystemId, true
}

// HasFileSystemId returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasFileSystemId() bool {
	if o != nil && !IsNil(o.FileSystemId) {
		return true
	}

	return false
}

// SetFileSystemId gets a reference to the given string and assigns it to the FileSystemId field.
func (o *FileTreeQuotaInstance) SetFileSystemId(v string) {
	o.FileSystemId = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FileTreeQuotaInstance) SetPath(v string) {
	o.Path = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FileTreeQuotaInstance) SetDescription(v string) {
	o.Description = &v
}

// GetIsUserQuotasEnforced returns the IsUserQuotasEnforced field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetIsUserQuotasEnforced() bool {
	if o == nil || IsNil(o.IsUserQuotasEnforced) {
		var ret bool
		return ret
	}
	return *o.IsUserQuotasEnforced
}

// GetIsUserQuotasEnforcedOk returns a tuple with the IsUserQuotasEnforced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetIsUserQuotasEnforcedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUserQuotasEnforced) {
		return nil, false
	}
	return o.IsUserQuotasEnforced, true
}

// HasIsUserQuotasEnforced returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasIsUserQuotasEnforced() bool {
	if o != nil && !IsNil(o.IsUserQuotasEnforced) {
		return true
	}

	return false
}

// SetIsUserQuotasEnforced gets a reference to the given bool and assigns it to the IsUserQuotasEnforced field.
func (o *FileTreeQuotaInstance) SetIsUserQuotasEnforced(v bool) {
	o.IsUserQuotasEnforced = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetState() FileQuotaStateEnum {
	if o == nil || IsNil(o.State) {
		var ret FileQuotaStateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetStateOk() (*FileQuotaStateEnum, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given FileQuotaStateEnum and assigns it to the State field.
func (o *FileTreeQuotaInstance) SetState(v FileQuotaStateEnum) {
	o.State = &v
}

// GetHardLimit returns the HardLimit field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetHardLimit() int64 {
	if o == nil || IsNil(o.HardLimit) {
		var ret int64
		return ret
	}
	return *o.HardLimit
}

// GetHardLimitOk returns a tuple with the HardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetHardLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.HardLimit) {
		return nil, false
	}
	return o.HardLimit, true
}

// HasHardLimit returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasHardLimit() bool {
	if o != nil && !IsNil(o.HardLimit) {
		return true
	}

	return false
}

// SetHardLimit gets a reference to the given int64 and assigns it to the HardLimit field.
func (o *FileTreeQuotaInstance) SetHardLimit(v int64) {
	o.HardLimit = &v
}

// GetSoftLimit returns the SoftLimit field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetSoftLimit() int64 {
	if o == nil || IsNil(o.SoftLimit) {
		var ret int64
		return ret
	}
	return *o.SoftLimit
}

// GetSoftLimitOk returns a tuple with the SoftLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetSoftLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SoftLimit) {
		return nil, false
	}
	return o.SoftLimit, true
}

// HasSoftLimit returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasSoftLimit() bool {
	if o != nil && !IsNil(o.SoftLimit) {
		return true
	}

	return false
}

// SetSoftLimit gets a reference to the given int64 and assigns it to the SoftLimit field.
func (o *FileTreeQuotaInstance) SetSoftLimit(v int64) {
	o.SoftLimit = &v
}

// GetRemainingGracePeriod returns the RemainingGracePeriod field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetRemainingGracePeriod() int64 {
	if o == nil || IsNil(o.RemainingGracePeriod) {
		var ret int64
		return ret
	}
	return *o.RemainingGracePeriod
}

// GetRemainingGracePeriodOk returns a tuple with the RemainingGracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetRemainingGracePeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.RemainingGracePeriod) {
		return nil, false
	}
	return o.RemainingGracePeriod, true
}

// HasRemainingGracePeriod returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasRemainingGracePeriod() bool {
	if o != nil && !IsNil(o.RemainingGracePeriod) {
		return true
	}

	return false
}

// SetRemainingGracePeriod gets a reference to the given int64 and assigns it to the RemainingGracePeriod field.
func (o *FileTreeQuotaInstance) SetRemainingGracePeriod(v int64) {
	o.RemainingGracePeriod = &v
}

// GetSizeUsed returns the SizeUsed field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetSizeUsed() int64 {
	if o == nil || IsNil(o.SizeUsed) {
		var ret int64
		return ret
	}
	return *o.SizeUsed
}

// GetSizeUsedOk returns a tuple with the SizeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetSizeUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeUsed) {
		return nil, false
	}
	return o.SizeUsed, true
}

// HasSizeUsed returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasSizeUsed() bool {
	if o != nil && !IsNil(o.SizeUsed) {
		return true
	}

	return false
}

// SetSizeUsed gets a reference to the given int64 and assigns it to the SizeUsed field.
func (o *FileTreeQuotaInstance) SetSizeUsed(v int64) {
	o.SizeUsed = &v
}

// GetGracePeriod returns the GracePeriod field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetGracePeriod() int32 {
	if o == nil || IsNil(o.GracePeriod) {
		var ret int32
		return ret
	}
	return *o.GracePeriod
}

// GetGracePeriodOk returns a tuple with the GracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetGracePeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.GracePeriod) {
		return nil, false
	}
	return o.GracePeriod, true
}

// HasGracePeriod returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasGracePeriod() bool {
	if o != nil && !IsNil(o.GracePeriod) {
		return true
	}

	return false
}

// SetGracePeriod gets a reference to the given int32 and assigns it to the GracePeriod field.
func (o *FileTreeQuotaInstance) SetGracePeriod(v int32) {
	o.GracePeriod = &v
}

// GetStateL10n returns the StateL10n field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetStateL10n() string {
	if o == nil || IsNil(o.StateL10n) {
		var ret string
		return ret
	}
	return *o.StateL10n
}

// GetStateL10nOk returns a tuple with the StateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StateL10n) {
		return nil, false
	}
	return o.StateL10n, true
}

// HasStateL10n returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasStateL10n() bool {
	if o != nil && !IsNil(o.StateL10n) {
		return true
	}

	return false
}

// SetStateL10n gets a reference to the given string and assigns it to the StateL10n field.
func (o *FileTreeQuotaInstance) SetStateL10n(v string) {
	o.StateL10n = &v
}

// GetFileSystem returns the FileSystem field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetFileSystem() FileSystemInstance {
	if o == nil || IsNil(o.FileSystem) {
		var ret FileSystemInstance
		return ret
	}
	return *o.FileSystem
}

// GetFileSystemOk returns a tuple with the FileSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetFileSystemOk() (*FileSystemInstance, bool) {
	if o == nil || IsNil(o.FileSystem) {
		return nil, false
	}
	return o.FileSystem, true
}

// HasFileSystem returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasFileSystem() bool {
	if o != nil && !IsNil(o.FileSystem) {
		return true
	}

	return false
}

// SetFileSystem gets a reference to the given FileSystemInstance and assigns it to the FileSystem field.
func (o *FileTreeQuotaInstance) SetFileSystem(v FileSystemInstance) {
	o.FileSystem = &v
}

// GetFileUserTreeQuotas returns the FileUserTreeQuotas field value if set, zero value otherwise.
func (o *FileTreeQuotaInstance) GetFileUserTreeQuotas() []FileUserQuotaInstance {
	if o == nil || IsNil(o.FileUserTreeQuotas) {
		var ret []FileUserQuotaInstance
		return ret
	}
	return o.FileUserTreeQuotas
}

// GetFileUserTreeQuotasOk returns a tuple with the FileUserTreeQuotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTreeQuotaInstance) GetFileUserTreeQuotasOk() ([]FileUserQuotaInstance, bool) {
	if o == nil || IsNil(o.FileUserTreeQuotas) {
		return nil, false
	}
	return o.FileUserTreeQuotas, true
}

// HasFileUserTreeQuotas returns a boolean if a field has been set.
func (o *FileTreeQuotaInstance) HasFileUserTreeQuotas() bool {
	if o != nil && !IsNil(o.FileUserTreeQuotas) {
		return true
	}

	return false
}

// SetFileUserTreeQuotas gets a reference to the given []FileUserQuotaInstance and assigns it to the FileUserTreeQuotas field.
func (o *FileTreeQuotaInstance) SetFileUserTreeQuotas(v []FileUserQuotaInstance) {
	o.FileUserTreeQuotas = v
}

func (o FileTreeQuotaInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileTreeQuotaInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !IsNil(o.FileSystemId) {
		toSerialize["file_system_id"] = o.FileSystemId
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsUserQuotasEnforced) {
		toSerialize["is_user_quotas_enforced"] = o.IsUserQuotasEnforced
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.HardLimit) {
		toSerialize["hard_limit"] = o.HardLimit
	}
	if !IsNil(o.SoftLimit) {
		toSerialize["soft_limit"] = o.SoftLimit
	}
	if !IsNil(o.RemainingGracePeriod) {
		toSerialize["remaining_grace_period"] = o.RemainingGracePeriod
	}
	if !IsNil(o.SizeUsed) {
		toSerialize["size_used"] = o.SizeUsed
	}
	if !IsNil(o.GracePeriod) {
		toSerialize["grace_period"] = o.GracePeriod
	}
	if !IsNil(o.StateL10n) {
		toSerialize["state_l10n"] = o.StateL10n
	}
	if !IsNil(o.FileSystem) {
		toSerialize["file_system"] = o.FileSystem
	}
	if !IsNil(o.FileUserTreeQuotas) {
		toSerialize["file_user_tree_quotas"] = o.FileUserTreeQuotas
	}
	return toSerialize, nil
}

type NullableFileTreeQuotaInstance struct {
	value *FileTreeQuotaInstance
	isSet bool
}

func (v NullableFileTreeQuotaInstance) Get() *FileTreeQuotaInstance {
	return v.value
}

func (v *NullableFileTreeQuotaInstance) Set(val *FileTreeQuotaInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileTreeQuotaInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileTreeQuotaInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileTreeQuotaInstance(val *FileTreeQuotaInstance) *NullableFileTreeQuotaInstance {
	return &NullableFileTreeQuotaInstance{value: val, isSet: true}
}

func (v NullableFileTreeQuotaInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileTreeQuotaInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


