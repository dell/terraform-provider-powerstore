/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the HardwareExtraDetailsInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HardwareExtraDetailsInstance{}

// HardwareExtraDetailsInstance Additional hardware details that are specific to each hardware type.  Filtering on the fields of this embedded resource is not supported.
type HardwareExtraDetailsInstance struct {
	// CPU model name. Available on Node hardware type.
	CpuModel *string `json:"cpu_model,omitempty"`
	// Total amount of physical memory in gigabytes. Available on the Node hardware type.
	PhysicalMemorySizeGb *int32 `json:"physical_memory_size_gb,omitempty"`
	// Total number of physical cores. Available on the Node hardware type.
	CpuCores *int32 `json:"cpu_cores,omitempty"`
	// Total number of physical sockets. Available on the Node hardware type.
	CpuSockets *int32 `json:"cpu_sockets,omitempty"`
	// Bus number of the Expansion_Shelf. Available on the Expansion_Shelf hardware type.
	BusNumber *int32 `json:"bus_number,omitempty"`
	// Enclosure number of the Expansion_Shelf. Available on the Expansion_Shelf hardware type.
	EnclosureNumber *int32 `json:"enclosure_number,omitempty"`
	// Model name of the hardware.  Available on the IO_Module and M2_Drive hardware types.
	ModelName *string `json:"model_name,omitempty"`
	// rpm_reading. Was added in version 2.0.0.0.
	RpmReading *string `json:"rpm_reading,omitempty"`
	// Firmware version of the hardware. Available on the Drive hardware type.
	FirmwareVersion *string `json:"firmware_version,omitempty"`
	Mode *HardwareSFPModeEnum `json:"mode,omitempty"`
	SupportedSpeeds []HardwareSFPSpeedEnum `json:"supported_speeds,omitempty"`
	SupportedProtocol *HardwareSFPSupportedProtocolEnum `json:"supported_protocol,omitempty"`
	ConnectorType *HardwareSFPConnectorTypeEnum `json:"connector_type,omitempty"`
	DriveType *HardwareDriveTypeEnum `json:"drive_type,omitempty"`
	// Size of the drive in bytes. Available on the Drive hardware type.
	Size *int64 `json:"size,omitempty"`
	EncryptionStatus *HardwareDriveEncryptionStatusEnum `json:"encryption_status,omitempty"`
	FipsStatus *HardwareDriveFIPSStatusEnum `json:"fips_status,omitempty"`
	// Dell service tag of the hardware. Available on the Base_Enclosure and Expansion_Enclosure hardware types.
	DellServiceTag *string `json:"dell_service_tag,omitempty"`
	// Express service code of the hardware. Available on the Base_Enclosure and Expansion_Enclosure hardware types.
	ExpressServiceCode *string `json:"express_service_code,omitempty"`
	EnclosureModelDescription *HardwareEnclosureModelDescriptionEnum `json:"enclosure_model_description,omitempty"`
	StorageClass *ApplianceStorageClassEnum `json:"storage_class,omitempty"`
	// Localized message string corresponding to mode
	ModeL10n *string `json:"mode_l10n,omitempty"`
	// Localized message array corresponding to supported_speeds
	SupportedSpeedsL10n []string `json:"supported_speeds_l10n,omitempty"`
	// Localized message string corresponding to supported_protocol
	SupportedProtocolL10n *string `json:"supported_protocol_l10n,omitempty"`
	// Localized message string corresponding to connector_type
	ConnectorTypeL10n *string `json:"connector_type_l10n,omitempty"`
	// Localized message string corresponding to drive_type
	DriveTypeL10n *string `json:"drive_type_l10n,omitempty"`
	// Localized message string corresponding to encryption_status
	EncryptionStatusL10n *string `json:"encryption_status_l10n,omitempty"`
	// Localized message string corresponding to fips_status
	FipsStatusL10n *string `json:"fips_status_l10n,omitempty"`
	// Localized message string corresponding to enclosure_model_description Was added in version 3.0.0.0.
	EnclosureModelDescriptionL10n *string `json:"enclosure_model_description_l10n,omitempty"`
	// Localized message string corresponding to storage_class Was added in version 4.0.0.0.
	StorageClassL10n *string `json:"storage_class_l10n,omitempty"`
}

// NewHardwareExtraDetailsInstance instantiates a new HardwareExtraDetailsInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHardwareExtraDetailsInstance() *HardwareExtraDetailsInstance {
	this := HardwareExtraDetailsInstance{}
	return &this
}

// NewHardwareExtraDetailsInstanceWithDefaults instantiates a new HardwareExtraDetailsInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHardwareExtraDetailsInstanceWithDefaults() *HardwareExtraDetailsInstance {
	this := HardwareExtraDetailsInstance{}
	return &this
}

// GetCpuModel returns the CpuModel field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetCpuModel() string {
	if o == nil || IsNil(o.CpuModel) {
		var ret string
		return ret
	}
	return *o.CpuModel
}

// GetCpuModelOk returns a tuple with the CpuModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetCpuModelOk() (*string, bool) {
	if o == nil || IsNil(o.CpuModel) {
		return nil, false
	}
	return o.CpuModel, true
}

// HasCpuModel returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasCpuModel() bool {
	if o != nil && !IsNil(o.CpuModel) {
		return true
	}

	return false
}

// SetCpuModel gets a reference to the given string and assigns it to the CpuModel field.
func (o *HardwareExtraDetailsInstance) SetCpuModel(v string) {
	o.CpuModel = &v
}

// GetPhysicalMemorySizeGb returns the PhysicalMemorySizeGb field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetPhysicalMemorySizeGb() int32 {
	if o == nil || IsNil(o.PhysicalMemorySizeGb) {
		var ret int32
		return ret
	}
	return *o.PhysicalMemorySizeGb
}

// GetPhysicalMemorySizeGbOk returns a tuple with the PhysicalMemorySizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetPhysicalMemorySizeGbOk() (*int32, bool) {
	if o == nil || IsNil(o.PhysicalMemorySizeGb) {
		return nil, false
	}
	return o.PhysicalMemorySizeGb, true
}

// HasPhysicalMemorySizeGb returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasPhysicalMemorySizeGb() bool {
	if o != nil && !IsNil(o.PhysicalMemorySizeGb) {
		return true
	}

	return false
}

// SetPhysicalMemorySizeGb gets a reference to the given int32 and assigns it to the PhysicalMemorySizeGb field.
func (o *HardwareExtraDetailsInstance) SetPhysicalMemorySizeGb(v int32) {
	o.PhysicalMemorySizeGb = &v
}

// GetCpuCores returns the CpuCores field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetCpuCores() int32 {
	if o == nil || IsNil(o.CpuCores) {
		var ret int32
		return ret
	}
	return *o.CpuCores
}

// GetCpuCoresOk returns a tuple with the CpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetCpuCoresOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuCores) {
		return nil, false
	}
	return o.CpuCores, true
}

// HasCpuCores returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasCpuCores() bool {
	if o != nil && !IsNil(o.CpuCores) {
		return true
	}

	return false
}

// SetCpuCores gets a reference to the given int32 and assigns it to the CpuCores field.
func (o *HardwareExtraDetailsInstance) SetCpuCores(v int32) {
	o.CpuCores = &v
}

// GetCpuSockets returns the CpuSockets field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetCpuSockets() int32 {
	if o == nil || IsNil(o.CpuSockets) {
		var ret int32
		return ret
	}
	return *o.CpuSockets
}

// GetCpuSocketsOk returns a tuple with the CpuSockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetCpuSocketsOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuSockets) {
		return nil, false
	}
	return o.CpuSockets, true
}

// HasCpuSockets returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasCpuSockets() bool {
	if o != nil && !IsNil(o.CpuSockets) {
		return true
	}

	return false
}

// SetCpuSockets gets a reference to the given int32 and assigns it to the CpuSockets field.
func (o *HardwareExtraDetailsInstance) SetCpuSockets(v int32) {
	o.CpuSockets = &v
}

// GetBusNumber returns the BusNumber field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetBusNumber() int32 {
	if o == nil || IsNil(o.BusNumber) {
		var ret int32
		return ret
	}
	return *o.BusNumber
}

// GetBusNumberOk returns a tuple with the BusNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetBusNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.BusNumber) {
		return nil, false
	}
	return o.BusNumber, true
}

// HasBusNumber returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasBusNumber() bool {
	if o != nil && !IsNil(o.BusNumber) {
		return true
	}

	return false
}

// SetBusNumber gets a reference to the given int32 and assigns it to the BusNumber field.
func (o *HardwareExtraDetailsInstance) SetBusNumber(v int32) {
	o.BusNumber = &v
}

// GetEnclosureNumber returns the EnclosureNumber field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetEnclosureNumber() int32 {
	if o == nil || IsNil(o.EnclosureNumber) {
		var ret int32
		return ret
	}
	return *o.EnclosureNumber
}

// GetEnclosureNumberOk returns a tuple with the EnclosureNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetEnclosureNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.EnclosureNumber) {
		return nil, false
	}
	return o.EnclosureNumber, true
}

// HasEnclosureNumber returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasEnclosureNumber() bool {
	if o != nil && !IsNil(o.EnclosureNumber) {
		return true
	}

	return false
}

// SetEnclosureNumber gets a reference to the given int32 and assigns it to the EnclosureNumber field.
func (o *HardwareExtraDetailsInstance) SetEnclosureNumber(v int32) {
	o.EnclosureNumber = &v
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetModelName() string {
	if o == nil || IsNil(o.ModelName) {
		var ret string
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetModelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given string and assigns it to the ModelName field.
func (o *HardwareExtraDetailsInstance) SetModelName(v string) {
	o.ModelName = &v
}

// GetRpmReading returns the RpmReading field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetRpmReading() string {
	if o == nil || IsNil(o.RpmReading) {
		var ret string
		return ret
	}
	return *o.RpmReading
}

// GetRpmReadingOk returns a tuple with the RpmReading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetRpmReadingOk() (*string, bool) {
	if o == nil || IsNil(o.RpmReading) {
		return nil, false
	}
	return o.RpmReading, true
}

// HasRpmReading returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasRpmReading() bool {
	if o != nil && !IsNil(o.RpmReading) {
		return true
	}

	return false
}

// SetRpmReading gets a reference to the given string and assigns it to the RpmReading field.
func (o *HardwareExtraDetailsInstance) SetRpmReading(v string) {
	o.RpmReading = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *HardwareExtraDetailsInstance) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetMode() HardwareSFPModeEnum {
	if o == nil || IsNil(o.Mode) {
		var ret HardwareSFPModeEnum
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetModeOk() (*HardwareSFPModeEnum, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given HardwareSFPModeEnum and assigns it to the Mode field.
func (o *HardwareExtraDetailsInstance) SetMode(v HardwareSFPModeEnum) {
	o.Mode = &v
}

// GetSupportedSpeeds returns the SupportedSpeeds field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetSupportedSpeeds() []HardwareSFPSpeedEnum {
	if o == nil || IsNil(o.SupportedSpeeds) {
		var ret []HardwareSFPSpeedEnum
		return ret
	}
	return o.SupportedSpeeds
}

// GetSupportedSpeedsOk returns a tuple with the SupportedSpeeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetSupportedSpeedsOk() ([]HardwareSFPSpeedEnum, bool) {
	if o == nil || IsNil(o.SupportedSpeeds) {
		return nil, false
	}
	return o.SupportedSpeeds, true
}

// HasSupportedSpeeds returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasSupportedSpeeds() bool {
	if o != nil && !IsNil(o.SupportedSpeeds) {
		return true
	}

	return false
}

// SetSupportedSpeeds gets a reference to the given []HardwareSFPSpeedEnum and assigns it to the SupportedSpeeds field.
func (o *HardwareExtraDetailsInstance) SetSupportedSpeeds(v []HardwareSFPSpeedEnum) {
	o.SupportedSpeeds = v
}

// GetSupportedProtocol returns the SupportedProtocol field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetSupportedProtocol() HardwareSFPSupportedProtocolEnum {
	if o == nil || IsNil(o.SupportedProtocol) {
		var ret HardwareSFPSupportedProtocolEnum
		return ret
	}
	return *o.SupportedProtocol
}

// GetSupportedProtocolOk returns a tuple with the SupportedProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetSupportedProtocolOk() (*HardwareSFPSupportedProtocolEnum, bool) {
	if o == nil || IsNil(o.SupportedProtocol) {
		return nil, false
	}
	return o.SupportedProtocol, true
}

// HasSupportedProtocol returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasSupportedProtocol() bool {
	if o != nil && !IsNil(o.SupportedProtocol) {
		return true
	}

	return false
}

// SetSupportedProtocol gets a reference to the given HardwareSFPSupportedProtocolEnum and assigns it to the SupportedProtocol field.
func (o *HardwareExtraDetailsInstance) SetSupportedProtocol(v HardwareSFPSupportedProtocolEnum) {
	o.SupportedProtocol = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetConnectorType() HardwareSFPConnectorTypeEnum {
	if o == nil || IsNil(o.ConnectorType) {
		var ret HardwareSFPConnectorTypeEnum
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetConnectorTypeOk() (*HardwareSFPConnectorTypeEnum, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given HardwareSFPConnectorTypeEnum and assigns it to the ConnectorType field.
func (o *HardwareExtraDetailsInstance) SetConnectorType(v HardwareSFPConnectorTypeEnum) {
	o.ConnectorType = &v
}

// GetDriveType returns the DriveType field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetDriveType() HardwareDriveTypeEnum {
	if o == nil || IsNil(o.DriveType) {
		var ret HardwareDriveTypeEnum
		return ret
	}
	return *o.DriveType
}

// GetDriveTypeOk returns a tuple with the DriveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetDriveTypeOk() (*HardwareDriveTypeEnum, bool) {
	if o == nil || IsNil(o.DriveType) {
		return nil, false
	}
	return o.DriveType, true
}

// HasDriveType returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasDriveType() bool {
	if o != nil && !IsNil(o.DriveType) {
		return true
	}

	return false
}

// SetDriveType gets a reference to the given HardwareDriveTypeEnum and assigns it to the DriveType field.
func (o *HardwareExtraDetailsInstance) SetDriveType(v HardwareDriveTypeEnum) {
	o.DriveType = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *HardwareExtraDetailsInstance) SetSize(v int64) {
	o.Size = &v
}

// GetEncryptionStatus returns the EncryptionStatus field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetEncryptionStatus() HardwareDriveEncryptionStatusEnum {
	if o == nil || IsNil(o.EncryptionStatus) {
		var ret HardwareDriveEncryptionStatusEnum
		return ret
	}
	return *o.EncryptionStatus
}

// GetEncryptionStatusOk returns a tuple with the EncryptionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetEncryptionStatusOk() (*HardwareDriveEncryptionStatusEnum, bool) {
	if o == nil || IsNil(o.EncryptionStatus) {
		return nil, false
	}
	return o.EncryptionStatus, true
}

// HasEncryptionStatus returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasEncryptionStatus() bool {
	if o != nil && !IsNil(o.EncryptionStatus) {
		return true
	}

	return false
}

// SetEncryptionStatus gets a reference to the given HardwareDriveEncryptionStatusEnum and assigns it to the EncryptionStatus field.
func (o *HardwareExtraDetailsInstance) SetEncryptionStatus(v HardwareDriveEncryptionStatusEnum) {
	o.EncryptionStatus = &v
}

// GetFipsStatus returns the FipsStatus field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetFipsStatus() HardwareDriveFIPSStatusEnum {
	if o == nil || IsNil(o.FipsStatus) {
		var ret HardwareDriveFIPSStatusEnum
		return ret
	}
	return *o.FipsStatus
}

// GetFipsStatusOk returns a tuple with the FipsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetFipsStatusOk() (*HardwareDriveFIPSStatusEnum, bool) {
	if o == nil || IsNil(o.FipsStatus) {
		return nil, false
	}
	return o.FipsStatus, true
}

// HasFipsStatus returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasFipsStatus() bool {
	if o != nil && !IsNil(o.FipsStatus) {
		return true
	}

	return false
}

// SetFipsStatus gets a reference to the given HardwareDriveFIPSStatusEnum and assigns it to the FipsStatus field.
func (o *HardwareExtraDetailsInstance) SetFipsStatus(v HardwareDriveFIPSStatusEnum) {
	o.FipsStatus = &v
}

// GetDellServiceTag returns the DellServiceTag field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetDellServiceTag() string {
	if o == nil || IsNil(o.DellServiceTag) {
		var ret string
		return ret
	}
	return *o.DellServiceTag
}

// GetDellServiceTagOk returns a tuple with the DellServiceTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetDellServiceTagOk() (*string, bool) {
	if o == nil || IsNil(o.DellServiceTag) {
		return nil, false
	}
	return o.DellServiceTag, true
}

// HasDellServiceTag returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasDellServiceTag() bool {
	if o != nil && !IsNil(o.DellServiceTag) {
		return true
	}

	return false
}

// SetDellServiceTag gets a reference to the given string and assigns it to the DellServiceTag field.
func (o *HardwareExtraDetailsInstance) SetDellServiceTag(v string) {
	o.DellServiceTag = &v
}

// GetExpressServiceCode returns the ExpressServiceCode field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetExpressServiceCode() string {
	if o == nil || IsNil(o.ExpressServiceCode) {
		var ret string
		return ret
	}
	return *o.ExpressServiceCode
}

// GetExpressServiceCodeOk returns a tuple with the ExpressServiceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetExpressServiceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpressServiceCode) {
		return nil, false
	}
	return o.ExpressServiceCode, true
}

// HasExpressServiceCode returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasExpressServiceCode() bool {
	if o != nil && !IsNil(o.ExpressServiceCode) {
		return true
	}

	return false
}

// SetExpressServiceCode gets a reference to the given string and assigns it to the ExpressServiceCode field.
func (o *HardwareExtraDetailsInstance) SetExpressServiceCode(v string) {
	o.ExpressServiceCode = &v
}

// GetEnclosureModelDescription returns the EnclosureModelDescription field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetEnclosureModelDescription() HardwareEnclosureModelDescriptionEnum {
	if o == nil || IsNil(o.EnclosureModelDescription) {
		var ret HardwareEnclosureModelDescriptionEnum
		return ret
	}
	return *o.EnclosureModelDescription
}

// GetEnclosureModelDescriptionOk returns a tuple with the EnclosureModelDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetEnclosureModelDescriptionOk() (*HardwareEnclosureModelDescriptionEnum, bool) {
	if o == nil || IsNil(o.EnclosureModelDescription) {
		return nil, false
	}
	return o.EnclosureModelDescription, true
}

// HasEnclosureModelDescription returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasEnclosureModelDescription() bool {
	if o != nil && !IsNil(o.EnclosureModelDescription) {
		return true
	}

	return false
}

// SetEnclosureModelDescription gets a reference to the given HardwareEnclosureModelDescriptionEnum and assigns it to the EnclosureModelDescription field.
func (o *HardwareExtraDetailsInstance) SetEnclosureModelDescription(v HardwareEnclosureModelDescriptionEnum) {
	o.EnclosureModelDescription = &v
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetStorageClass() ApplianceStorageClassEnum {
	if o == nil || IsNil(o.StorageClass) {
		var ret ApplianceStorageClassEnum
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetStorageClassOk() (*ApplianceStorageClassEnum, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given ApplianceStorageClassEnum and assigns it to the StorageClass field.
func (o *HardwareExtraDetailsInstance) SetStorageClass(v ApplianceStorageClassEnum) {
	o.StorageClass = &v
}

// GetModeL10n returns the ModeL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetModeL10n() string {
	if o == nil || IsNil(o.ModeL10n) {
		var ret string
		return ret
	}
	return *o.ModeL10n
}

// GetModeL10nOk returns a tuple with the ModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ModeL10n) {
		return nil, false
	}
	return o.ModeL10n, true
}

// HasModeL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasModeL10n() bool {
	if o != nil && !IsNil(o.ModeL10n) {
		return true
	}

	return false
}

// SetModeL10n gets a reference to the given string and assigns it to the ModeL10n field.
func (o *HardwareExtraDetailsInstance) SetModeL10n(v string) {
	o.ModeL10n = &v
}

// GetSupportedSpeedsL10n returns the SupportedSpeedsL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetSupportedSpeedsL10n() []string {
	if o == nil || IsNil(o.SupportedSpeedsL10n) {
		var ret []string
		return ret
	}
	return o.SupportedSpeedsL10n
}

// GetSupportedSpeedsL10nOk returns a tuple with the SupportedSpeedsL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetSupportedSpeedsL10nOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedSpeedsL10n) {
		return nil, false
	}
	return o.SupportedSpeedsL10n, true
}

// HasSupportedSpeedsL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasSupportedSpeedsL10n() bool {
	if o != nil && !IsNil(o.SupportedSpeedsL10n) {
		return true
	}

	return false
}

// SetSupportedSpeedsL10n gets a reference to the given []string and assigns it to the SupportedSpeedsL10n field.
func (o *HardwareExtraDetailsInstance) SetSupportedSpeedsL10n(v []string) {
	o.SupportedSpeedsL10n = v
}

// GetSupportedProtocolL10n returns the SupportedProtocolL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetSupportedProtocolL10n() string {
	if o == nil || IsNil(o.SupportedProtocolL10n) {
		var ret string
		return ret
	}
	return *o.SupportedProtocolL10n
}

// GetSupportedProtocolL10nOk returns a tuple with the SupportedProtocolL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetSupportedProtocolL10nOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedProtocolL10n) {
		return nil, false
	}
	return o.SupportedProtocolL10n, true
}

// HasSupportedProtocolL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasSupportedProtocolL10n() bool {
	if o != nil && !IsNil(o.SupportedProtocolL10n) {
		return true
	}

	return false
}

// SetSupportedProtocolL10n gets a reference to the given string and assigns it to the SupportedProtocolL10n field.
func (o *HardwareExtraDetailsInstance) SetSupportedProtocolL10n(v string) {
	o.SupportedProtocolL10n = &v
}

// GetConnectorTypeL10n returns the ConnectorTypeL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetConnectorTypeL10n() string {
	if o == nil || IsNil(o.ConnectorTypeL10n) {
		var ret string
		return ret
	}
	return *o.ConnectorTypeL10n
}

// GetConnectorTypeL10nOk returns a tuple with the ConnectorTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetConnectorTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorTypeL10n) {
		return nil, false
	}
	return o.ConnectorTypeL10n, true
}

// HasConnectorTypeL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasConnectorTypeL10n() bool {
	if o != nil && !IsNil(o.ConnectorTypeL10n) {
		return true
	}

	return false
}

// SetConnectorTypeL10n gets a reference to the given string and assigns it to the ConnectorTypeL10n field.
func (o *HardwareExtraDetailsInstance) SetConnectorTypeL10n(v string) {
	o.ConnectorTypeL10n = &v
}

// GetDriveTypeL10n returns the DriveTypeL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetDriveTypeL10n() string {
	if o == nil || IsNil(o.DriveTypeL10n) {
		var ret string
		return ret
	}
	return *o.DriveTypeL10n
}

// GetDriveTypeL10nOk returns a tuple with the DriveTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetDriveTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.DriveTypeL10n) {
		return nil, false
	}
	return o.DriveTypeL10n, true
}

// HasDriveTypeL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasDriveTypeL10n() bool {
	if o != nil && !IsNil(o.DriveTypeL10n) {
		return true
	}

	return false
}

// SetDriveTypeL10n gets a reference to the given string and assigns it to the DriveTypeL10n field.
func (o *HardwareExtraDetailsInstance) SetDriveTypeL10n(v string) {
	o.DriveTypeL10n = &v
}

// GetEncryptionStatusL10n returns the EncryptionStatusL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetEncryptionStatusL10n() string {
	if o == nil || IsNil(o.EncryptionStatusL10n) {
		var ret string
		return ret
	}
	return *o.EncryptionStatusL10n
}

// GetEncryptionStatusL10nOk returns a tuple with the EncryptionStatusL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetEncryptionStatusL10nOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionStatusL10n) {
		return nil, false
	}
	return o.EncryptionStatusL10n, true
}

// HasEncryptionStatusL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasEncryptionStatusL10n() bool {
	if o != nil && !IsNil(o.EncryptionStatusL10n) {
		return true
	}

	return false
}

// SetEncryptionStatusL10n gets a reference to the given string and assigns it to the EncryptionStatusL10n field.
func (o *HardwareExtraDetailsInstance) SetEncryptionStatusL10n(v string) {
	o.EncryptionStatusL10n = &v
}

// GetFipsStatusL10n returns the FipsStatusL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetFipsStatusL10n() string {
	if o == nil || IsNil(o.FipsStatusL10n) {
		var ret string
		return ret
	}
	return *o.FipsStatusL10n
}

// GetFipsStatusL10nOk returns a tuple with the FipsStatusL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetFipsStatusL10nOk() (*string, bool) {
	if o == nil || IsNil(o.FipsStatusL10n) {
		return nil, false
	}
	return o.FipsStatusL10n, true
}

// HasFipsStatusL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasFipsStatusL10n() bool {
	if o != nil && !IsNil(o.FipsStatusL10n) {
		return true
	}

	return false
}

// SetFipsStatusL10n gets a reference to the given string and assigns it to the FipsStatusL10n field.
func (o *HardwareExtraDetailsInstance) SetFipsStatusL10n(v string) {
	o.FipsStatusL10n = &v
}

// GetEnclosureModelDescriptionL10n returns the EnclosureModelDescriptionL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetEnclosureModelDescriptionL10n() string {
	if o == nil || IsNil(o.EnclosureModelDescriptionL10n) {
		var ret string
		return ret
	}
	return *o.EnclosureModelDescriptionL10n
}

// GetEnclosureModelDescriptionL10nOk returns a tuple with the EnclosureModelDescriptionL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetEnclosureModelDescriptionL10nOk() (*string, bool) {
	if o == nil || IsNil(o.EnclosureModelDescriptionL10n) {
		return nil, false
	}
	return o.EnclosureModelDescriptionL10n, true
}

// HasEnclosureModelDescriptionL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasEnclosureModelDescriptionL10n() bool {
	if o != nil && !IsNil(o.EnclosureModelDescriptionL10n) {
		return true
	}

	return false
}

// SetEnclosureModelDescriptionL10n gets a reference to the given string and assigns it to the EnclosureModelDescriptionL10n field.
func (o *HardwareExtraDetailsInstance) SetEnclosureModelDescriptionL10n(v string) {
	o.EnclosureModelDescriptionL10n = &v
}

// GetStorageClassL10n returns the StorageClassL10n field value if set, zero value otherwise.
func (o *HardwareExtraDetailsInstance) GetStorageClassL10n() string {
	if o == nil || IsNil(o.StorageClassL10n) {
		var ret string
		return ret
	}
	return *o.StorageClassL10n
}

// GetStorageClassL10nOk returns a tuple with the StorageClassL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareExtraDetailsInstance) GetStorageClassL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StorageClassL10n) {
		return nil, false
	}
	return o.StorageClassL10n, true
}

// HasStorageClassL10n returns a boolean if a field has been set.
func (o *HardwareExtraDetailsInstance) HasStorageClassL10n() bool {
	if o != nil && !IsNil(o.StorageClassL10n) {
		return true
	}

	return false
}

// SetStorageClassL10n gets a reference to the given string and assigns it to the StorageClassL10n field.
func (o *HardwareExtraDetailsInstance) SetStorageClassL10n(v string) {
	o.StorageClassL10n = &v
}

func (o HardwareExtraDetailsInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HardwareExtraDetailsInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CpuModel) {
		toSerialize["cpu_model"] = o.CpuModel
	}
	if !IsNil(o.PhysicalMemorySizeGb) {
		toSerialize["physical_memory_size_gb"] = o.PhysicalMemorySizeGb
	}
	if !IsNil(o.CpuCores) {
		toSerialize["cpu_cores"] = o.CpuCores
	}
	if !IsNil(o.CpuSockets) {
		toSerialize["cpu_sockets"] = o.CpuSockets
	}
	if !IsNil(o.BusNumber) {
		toSerialize["bus_number"] = o.BusNumber
	}
	if !IsNil(o.EnclosureNumber) {
		toSerialize["enclosure_number"] = o.EnclosureNumber
	}
	if !IsNil(o.ModelName) {
		toSerialize["model_name"] = o.ModelName
	}
	if !IsNil(o.RpmReading) {
		toSerialize["rpm_reading"] = o.RpmReading
	}
	if !IsNil(o.FirmwareVersion) {
		toSerialize["firmware_version"] = o.FirmwareVersion
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.SupportedSpeeds) {
		toSerialize["supported_speeds"] = o.SupportedSpeeds
	}
	if !IsNil(o.SupportedProtocol) {
		toSerialize["supported_protocol"] = o.SupportedProtocol
	}
	if !IsNil(o.ConnectorType) {
		toSerialize["connector_type"] = o.ConnectorType
	}
	if !IsNil(o.DriveType) {
		toSerialize["drive_type"] = o.DriveType
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.EncryptionStatus) {
		toSerialize["encryption_status"] = o.EncryptionStatus
	}
	if !IsNil(o.FipsStatus) {
		toSerialize["fips_status"] = o.FipsStatus
	}
	if !IsNil(o.DellServiceTag) {
		toSerialize["dell_service_tag"] = o.DellServiceTag
	}
	if !IsNil(o.ExpressServiceCode) {
		toSerialize["express_service_code"] = o.ExpressServiceCode
	}
	if !IsNil(o.EnclosureModelDescription) {
		toSerialize["enclosure_model_description"] = o.EnclosureModelDescription
	}
	if !IsNil(o.StorageClass) {
		toSerialize["storage_class"] = o.StorageClass
	}
	if !IsNil(o.ModeL10n) {
		toSerialize["mode_l10n"] = o.ModeL10n
	}
	if !IsNil(o.SupportedSpeedsL10n) {
		toSerialize["supported_speeds_l10n"] = o.SupportedSpeedsL10n
	}
	if !IsNil(o.SupportedProtocolL10n) {
		toSerialize["supported_protocol_l10n"] = o.SupportedProtocolL10n
	}
	if !IsNil(o.ConnectorTypeL10n) {
		toSerialize["connector_type_l10n"] = o.ConnectorTypeL10n
	}
	if !IsNil(o.DriveTypeL10n) {
		toSerialize["drive_type_l10n"] = o.DriveTypeL10n
	}
	if !IsNil(o.EncryptionStatusL10n) {
		toSerialize["encryption_status_l10n"] = o.EncryptionStatusL10n
	}
	if !IsNil(o.FipsStatusL10n) {
		toSerialize["fips_status_l10n"] = o.FipsStatusL10n
	}
	if !IsNil(o.EnclosureModelDescriptionL10n) {
		toSerialize["enclosure_model_description_l10n"] = o.EnclosureModelDescriptionL10n
	}
	if !IsNil(o.StorageClassL10n) {
		toSerialize["storage_class_l10n"] = o.StorageClassL10n
	}
	return toSerialize, nil
}

type NullableHardwareExtraDetailsInstance struct {
	value *HardwareExtraDetailsInstance
	isSet bool
}

func (v NullableHardwareExtraDetailsInstance) Get() *HardwareExtraDetailsInstance {
	return v.value
}

func (v *NullableHardwareExtraDetailsInstance) Set(val *HardwareExtraDetailsInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareExtraDetailsInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareExtraDetailsInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareExtraDetailsInstance(val *HardwareExtraDetailsInstance) *NullableHardwareExtraDetailsInstance {
	return &NullableHardwareExtraDetailsInstance{value: val, isSet: true}
}

func (v NullableHardwareExtraDetailsInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareExtraDetailsInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


