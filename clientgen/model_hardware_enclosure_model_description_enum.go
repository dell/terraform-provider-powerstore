/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// HardwareEnclosureModelDescriptionEnum The Enclosure Model Description. Available on the Expansion_Enclosure hardware type. Current enclosure models are:  * ENS24_2_5_NVMe_Drive_Enc - ENS24 2.5\" NVMe Expansion Enclosure.  * 2_5_SAS_Drive_Enc - 2.5\" SAS Expansion Enclosure.  Was added in version 3.0.0.0.
type HardwareEnclosureModelDescriptionEnum string

// List of HardwareEnclosureModelDescriptionEnum
const (
	HARDWAREENCLOSUREMODELDESCRIPTIONENUM_ENS24_2_5_NVME_DRIVE_ENC HardwareEnclosureModelDescriptionEnum = "ENS24_2_5_NVMe_Drive_Enc"
	HARDWAREENCLOSUREMODELDESCRIPTIONENUM__2_5_SAS_DRIVE_ENC HardwareEnclosureModelDescriptionEnum = "2_5_SAS_Drive_Enc"
)

// All allowed values of HardwareEnclosureModelDescriptionEnum enum
var AllowedHardwareEnclosureModelDescriptionEnumEnumValues = []HardwareEnclosureModelDescriptionEnum{
	"ENS24_2_5_NVMe_Drive_Enc",
	"2_5_SAS_Drive_Enc",
}

func (v *HardwareEnclosureModelDescriptionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HardwareEnclosureModelDescriptionEnum(value)
	for _, existing := range AllowedHardwareEnclosureModelDescriptionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HardwareEnclosureModelDescriptionEnum", value)
}

// NewHardwareEnclosureModelDescriptionEnumFromValue returns a pointer to a valid HardwareEnclosureModelDescriptionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHardwareEnclosureModelDescriptionEnumFromValue(v string) (*HardwareEnclosureModelDescriptionEnum, error) {
	ev := HardwareEnclosureModelDescriptionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HardwareEnclosureModelDescriptionEnum: valid values are %v", v, AllowedHardwareEnclosureModelDescriptionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HardwareEnclosureModelDescriptionEnum) IsValid() bool {
	for _, existing := range AllowedHardwareEnclosureModelDescriptionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HardwareEnclosureModelDescriptionEnum value
func (v HardwareEnclosureModelDescriptionEnum) Ptr() *HardwareEnclosureModelDescriptionEnum {
	return &v
}

type NullableHardwareEnclosureModelDescriptionEnum struct {
	value *HardwareEnclosureModelDescriptionEnum
	isSet bool
}

func (v NullableHardwareEnclosureModelDescriptionEnum) Get() *HardwareEnclosureModelDescriptionEnum {
	return v.value
}

func (v *NullableHardwareEnclosureModelDescriptionEnum) Set(val *HardwareEnclosureModelDescriptionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareEnclosureModelDescriptionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareEnclosureModelDescriptionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareEnclosureModelDescriptionEnum(val *HardwareEnclosureModelDescriptionEnum) *NullableHardwareEnclosureModelDescriptionEnum {
	return &NullableHardwareEnclosureModelDescriptionEnum{value: val, isSet: true}
}

func (v NullableHardwareEnclosureModelDescriptionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareEnclosureModelDescriptionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

