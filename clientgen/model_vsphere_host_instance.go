/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the VsphereHostInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VsphereHostInstance{}

// VsphereHostInstance Properties of a vsphere_host. Was added in version 3.0.0.0. This resource type has queriable associations from vcenter, vsphere_host_license_assignment, virtual_machine, datastore, host
type VsphereHostInstance struct {
	// Unique identifier of the vsphere_host instance.
	Id *string `json:"id,omitempty"`
	// User-assigned name of the ESXi host in vCenter.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Unique identifier of the vsphere_host in vCenter.
	VsphereObjectId *string `json:"vsphere_object_id,omitempty"`
	// Unique identifier of a vCenter instance.
	VcenterId *string `json:"vcenter_id,omitempty"`
	// ESXi host version.
	Version *string `json:"version,omitempty"`
	// ESXi host build.
	Build *string `json:"build,omitempty"`
	Vcenter *VcenterInstance `json:"vcenter,omitempty"`
	// This is the inverse of the resource type vsphere_host_license_assignment association.
	LicenseAssignments []VsphereHostLicenseAssignmentInstance `json:"license_assignments,omitempty"`
	// List of the virtual_machines that are associated with this vsphere_host.
	VirtualMachines []VirtualMachineInstance `json:"virtual_machines,omitempty"`
	// List of the datastores that are associated with this vsphere_host.
	Datastores []DatastoreInstance `json:"datastores,omitempty"`
	// List of the hosts that are associated with this vsphere_host.
	Hosts []HostInstance `json:"hosts,omitempty"`
}

// NewVsphereHostInstance instantiates a new VsphereHostInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVsphereHostInstance() *VsphereHostInstance {
	this := VsphereHostInstance{}
	return &this
}

// NewVsphereHostInstanceWithDefaults instantiates a new VsphereHostInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVsphereHostInstanceWithDefaults() *VsphereHostInstance {
	this := VsphereHostInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VsphereHostInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VsphereHostInstance) SetName(v string) {
	o.Name = &v
}

// GetVsphereObjectId returns the VsphereObjectId field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetVsphereObjectId() string {
	if o == nil || IsNil(o.VsphereObjectId) {
		var ret string
		return ret
	}
	return *o.VsphereObjectId
}

// GetVsphereObjectIdOk returns a tuple with the VsphereObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetVsphereObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.VsphereObjectId) {
		return nil, false
	}
	return o.VsphereObjectId, true
}

// HasVsphereObjectId returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasVsphereObjectId() bool {
	if o != nil && !IsNil(o.VsphereObjectId) {
		return true
	}

	return false
}

// SetVsphereObjectId gets a reference to the given string and assigns it to the VsphereObjectId field.
func (o *VsphereHostInstance) SetVsphereObjectId(v string) {
	o.VsphereObjectId = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetVcenterId() string {
	if o == nil || IsNil(o.VcenterId) {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetVcenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterId) {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasVcenterId() bool {
	if o != nil && !IsNil(o.VcenterId) {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *VsphereHostInstance) SetVcenterId(v string) {
	o.VcenterId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VsphereHostInstance) SetVersion(v string) {
	o.Version = &v
}

// GetBuild returns the Build field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetBuild() string {
	if o == nil || IsNil(o.Build) {
		var ret string
		return ret
	}
	return *o.Build
}

// GetBuildOk returns a tuple with the Build field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetBuildOk() (*string, bool) {
	if o == nil || IsNil(o.Build) {
		return nil, false
	}
	return o.Build, true
}

// HasBuild returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasBuild() bool {
	if o != nil && !IsNil(o.Build) {
		return true
	}

	return false
}

// SetBuild gets a reference to the given string and assigns it to the Build field.
func (o *VsphereHostInstance) SetBuild(v string) {
	o.Build = &v
}

// GetVcenter returns the Vcenter field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetVcenter() VcenterInstance {
	if o == nil || IsNil(o.Vcenter) {
		var ret VcenterInstance
		return ret
	}
	return *o.Vcenter
}

// GetVcenterOk returns a tuple with the Vcenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetVcenterOk() (*VcenterInstance, bool) {
	if o == nil || IsNil(o.Vcenter) {
		return nil, false
	}
	return o.Vcenter, true
}

// HasVcenter returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasVcenter() bool {
	if o != nil && !IsNil(o.Vcenter) {
		return true
	}

	return false
}

// SetVcenter gets a reference to the given VcenterInstance and assigns it to the Vcenter field.
func (o *VsphereHostInstance) SetVcenter(v VcenterInstance) {
	o.Vcenter = &v
}

// GetLicenseAssignments returns the LicenseAssignments field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetLicenseAssignments() []VsphereHostLicenseAssignmentInstance {
	if o == nil || IsNil(o.LicenseAssignments) {
		var ret []VsphereHostLicenseAssignmentInstance
		return ret
	}
	return o.LicenseAssignments
}

// GetLicenseAssignmentsOk returns a tuple with the LicenseAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetLicenseAssignmentsOk() ([]VsphereHostLicenseAssignmentInstance, bool) {
	if o == nil || IsNil(o.LicenseAssignments) {
		return nil, false
	}
	return o.LicenseAssignments, true
}

// HasLicenseAssignments returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasLicenseAssignments() bool {
	if o != nil && !IsNil(o.LicenseAssignments) {
		return true
	}

	return false
}

// SetLicenseAssignments gets a reference to the given []VsphereHostLicenseAssignmentInstance and assigns it to the LicenseAssignments field.
func (o *VsphereHostInstance) SetLicenseAssignments(v []VsphereHostLicenseAssignmentInstance) {
	o.LicenseAssignments = v
}

// GetVirtualMachines returns the VirtualMachines field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetVirtualMachines() []VirtualMachineInstance {
	if o == nil || IsNil(o.VirtualMachines) {
		var ret []VirtualMachineInstance
		return ret
	}
	return o.VirtualMachines
}

// GetVirtualMachinesOk returns a tuple with the VirtualMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetVirtualMachinesOk() ([]VirtualMachineInstance, bool) {
	if o == nil || IsNil(o.VirtualMachines) {
		return nil, false
	}
	return o.VirtualMachines, true
}

// HasVirtualMachines returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasVirtualMachines() bool {
	if o != nil && !IsNil(o.VirtualMachines) {
		return true
	}

	return false
}

// SetVirtualMachines gets a reference to the given []VirtualMachineInstance and assigns it to the VirtualMachines field.
func (o *VsphereHostInstance) SetVirtualMachines(v []VirtualMachineInstance) {
	o.VirtualMachines = v
}

// GetDatastores returns the Datastores field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetDatastores() []DatastoreInstance {
	if o == nil || IsNil(o.Datastores) {
		var ret []DatastoreInstance
		return ret
	}
	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetDatastoresOk() ([]DatastoreInstance, bool) {
	if o == nil || IsNil(o.Datastores) {
		return nil, false
	}
	return o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasDatastores() bool {
	if o != nil && !IsNil(o.Datastores) {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []DatastoreInstance and assigns it to the Datastores field.
func (o *VsphereHostInstance) SetDatastores(v []DatastoreInstance) {
	o.Datastores = v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *VsphereHostInstance) GetHosts() []HostInstance {
	if o == nil || IsNil(o.Hosts) {
		var ret []HostInstance
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VsphereHostInstance) GetHostsOk() ([]HostInstance, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *VsphereHostInstance) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []HostInstance and assigns it to the Hosts field.
func (o *VsphereHostInstance) SetHosts(v []HostInstance) {
	o.Hosts = v
}

func (o VsphereHostInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VsphereHostInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.VsphereObjectId) {
		toSerialize["vsphere_object_id"] = o.VsphereObjectId
	}
	if !IsNil(o.VcenterId) {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Build) {
		toSerialize["build"] = o.Build
	}
	if !IsNil(o.Vcenter) {
		toSerialize["vcenter"] = o.Vcenter
	}
	if !IsNil(o.LicenseAssignments) {
		toSerialize["license_assignments"] = o.LicenseAssignments
	}
	if !IsNil(o.VirtualMachines) {
		toSerialize["virtual_machines"] = o.VirtualMachines
	}
	if !IsNil(o.Datastores) {
		toSerialize["datastores"] = o.Datastores
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	return toSerialize, nil
}

type NullableVsphereHostInstance struct {
	value *VsphereHostInstance
	isSet bool
}

func (v NullableVsphereHostInstance) Get() *VsphereHostInstance {
	return v.value
}

func (v *NullableVsphereHostInstance) Set(val *VsphereHostInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVsphereHostInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVsphereHostInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVsphereHostInstance(val *VsphereHostInstance) *NullableVsphereHostInstance {
	return &NullableVsphereHostInstance{value: val, isSet: true}
}

func (v NullableVsphereHostInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVsphereHostInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


