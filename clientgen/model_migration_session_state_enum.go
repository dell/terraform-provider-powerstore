/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// MigrationSessionStateEnum Migration session states.  * Initializing - Migration session starts and stays in this state until the session initialization completes.  * Automatic_Rescan_In_Progress - Migration session is rescanning hosts that are capable of being automatically rescanned.  * Manual_Rescan_Required - Migration session has discovered hosts that need to be manually rescanned.  * Initialized - Migration session transitions to this state when session initialization completes and no further rescans are required.  * Synchronizing - Background copy is in progress.  * Idle - Migration session transitions to this state when initial background copy completes.  * Cutting_Over - Final phase of the migration, when ownership of the volume, vVol, or application group is transferred to the new appliance.  * Deleting - Migration session is being deleted.  * Completed - Migration session is complete and it is safe to delete the session.  * Pausing - Migration session transitions to this state when the pause command is issued.  * Paused - Migration session is paused. User intervention is required to resume the session.  * System_Paused - Migration session transitions to this state if it encounters any error. User may resume or delete the migration session after resolving the error.  * Resuming - Migration session background copy being resumed.  * Failed - Migration session encountered an error.  Values was added in 3.0.0.0: Automatic_Rescan_In_Progress, Manual_Rescan_Required.
type MigrationSessionStateEnum string

// List of MigrationSessionStateEnum
const (
	MIGRATIONSESSIONSTATEENUM_INITIALIZING MigrationSessionStateEnum = "Initializing"
	MIGRATIONSESSIONSTATEENUM_AUTOMATIC_RESCAN_IN_PROGRESS MigrationSessionStateEnum = "Automatic_Rescan_In_Progress"
	MIGRATIONSESSIONSTATEENUM_MANUAL_RESCAN_REQUIRED MigrationSessionStateEnum = "Manual_Rescan_Required"
	MIGRATIONSESSIONSTATEENUM_INITIALIZED MigrationSessionStateEnum = "Initialized"
	MIGRATIONSESSIONSTATEENUM_SYNCHRONIZING MigrationSessionStateEnum = "Synchronizing"
	MIGRATIONSESSIONSTATEENUM_IDLE MigrationSessionStateEnum = "Idle"
	MIGRATIONSESSIONSTATEENUM_CUTTING_OVER MigrationSessionStateEnum = "Cutting_Over"
	MIGRATIONSESSIONSTATEENUM_DELETING MigrationSessionStateEnum = "Deleting"
	MIGRATIONSESSIONSTATEENUM_COMPLETED MigrationSessionStateEnum = "Completed"
	MIGRATIONSESSIONSTATEENUM_PAUSING MigrationSessionStateEnum = "Pausing"
	MIGRATIONSESSIONSTATEENUM_PAUSED MigrationSessionStateEnum = "Paused"
	MIGRATIONSESSIONSTATEENUM_SYSTEM_PAUSED MigrationSessionStateEnum = "System_Paused"
	MIGRATIONSESSIONSTATEENUM_RESUMING MigrationSessionStateEnum = "Resuming"
	MIGRATIONSESSIONSTATEENUM_FAILED MigrationSessionStateEnum = "Failed"
)

// All allowed values of MigrationSessionStateEnum enum
var AllowedMigrationSessionStateEnumEnumValues = []MigrationSessionStateEnum{
	"Initializing",
	"Automatic_Rescan_In_Progress",
	"Manual_Rescan_Required",
	"Initialized",
	"Synchronizing",
	"Idle",
	"Cutting_Over",
	"Deleting",
	"Completed",
	"Pausing",
	"Paused",
	"System_Paused",
	"Resuming",
	"Failed",
}

func (v *MigrationSessionStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MigrationSessionStateEnum(value)
	for _, existing := range AllowedMigrationSessionStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MigrationSessionStateEnum", value)
}

// NewMigrationSessionStateEnumFromValue returns a pointer to a valid MigrationSessionStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMigrationSessionStateEnumFromValue(v string) (*MigrationSessionStateEnum, error) {
	ev := MigrationSessionStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MigrationSessionStateEnum: valid values are %v", v, AllowedMigrationSessionStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MigrationSessionStateEnum) IsValid() bool {
	for _, existing := range AllowedMigrationSessionStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MigrationSessionStateEnum value
func (v MigrationSessionStateEnum) Ptr() *MigrationSessionStateEnum {
	return &v
}

type NullableMigrationSessionStateEnum struct {
	value *MigrationSessionStateEnum
	isSet bool
}

func (v NullableMigrationSessionStateEnum) Get() *MigrationSessionStateEnum {
	return v.value
}

func (v *NullableMigrationSessionStateEnum) Set(val *MigrationSessionStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMigrationSessionStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMigrationSessionStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigrationSessionStateEnum(val *MigrationSessionStateEnum) *NullableMigrationSessionStateEnum {
	return &NullableMigrationSessionStateEnum{value: val, isSet: true}
}

func (v NullableMigrationSessionStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigrationSessionStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

