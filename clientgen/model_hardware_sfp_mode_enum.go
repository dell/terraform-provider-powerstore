/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// HardwareSFPModeEnum SFP mode. Available on the SFP hardware type. Current modes are:  * Unknown - This SFP has unknown support.  * Multi_Mode - This SFP supports multi-mode fiber.  * Single_Mode - This SFP supports single-mode fiber. 
type HardwareSFPModeEnum string

// List of HardwareSFPModeEnum
const (
	HARDWARESFPMODEENUM_UNKNOWN HardwareSFPModeEnum = "Unknown"
	HARDWARESFPMODEENUM_MULTI_MODE HardwareSFPModeEnum = "Multi_Mode"
	HARDWARESFPMODEENUM_SINGLE_MODE HardwareSFPModeEnum = "Single_Mode"
)

// All allowed values of HardwareSFPModeEnum enum
var AllowedHardwareSFPModeEnumEnumValues = []HardwareSFPModeEnum{
	"Unknown",
	"Multi_Mode",
	"Single_Mode",
}

func (v *HardwareSFPModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HardwareSFPModeEnum(value)
	for _, existing := range AllowedHardwareSFPModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HardwareSFPModeEnum", value)
}

// NewHardwareSFPModeEnumFromValue returns a pointer to a valid HardwareSFPModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHardwareSFPModeEnumFromValue(v string) (*HardwareSFPModeEnum, error) {
	ev := HardwareSFPModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HardwareSFPModeEnum: valid values are %v", v, AllowedHardwareSFPModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HardwareSFPModeEnum) IsValid() bool {
	for _, existing := range AllowedHardwareSFPModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HardwareSFPModeEnum value
func (v HardwareSFPModeEnum) Ptr() *HardwareSFPModeEnum {
	return &v
}

type NullableHardwareSFPModeEnum struct {
	value *HardwareSFPModeEnum
	isSet bool
}

func (v NullableHardwareSFPModeEnum) Get() *HardwareSFPModeEnum {
	return v.value
}

func (v *NullableHardwareSFPModeEnum) Set(val *HardwareSFPModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareSFPModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareSFPModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareSFPModeEnum(val *HardwareSFPModeEnum) *NullableHardwareSFPModeEnum {
	return &NullableHardwareSFPModeEnum{value: val, isSet: true}
}

func (v NullableHardwareSFPModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareSFPModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

