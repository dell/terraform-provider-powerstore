/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the NasServerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NasServerInstance{}

// NasServerInstance This resource type has queriable associations from policy, file_interface, file_ndmp, file_virus_checker, nfs_server, smb_server, file_dns, file_ftp, file_kerberos, file_ldap, file_nis, file_system, file_dhsm_config, file_events_publisher
type NasServerInstance struct {
	// Unique identifier of the NAS server.
	Id *string `json:"id,omitempty"`
	// Name of the NAS server.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Description of the NAS server.
	Description *string `json:"description,omitempty"`
	OperationalStatus *NASServerOperationalStatusEnum `json:"operational_status,omitempty"`
	// Unique identifier of the node on which the NAS server is running.
	CurrentNodeId *string `json:"current_node_id,omitempty"`
	// Unique identifier of the preferred node for the NAS server The initial value (on NAS server creation) is taken from the current node.
	PreferredNodeId *string `json:"preferred_node_id,omitempty"`
	// Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.
	DefaultUnixUser *string `json:"default_unix_user,omitempty"`
	// Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.
	DefaultWindowsUser *string `json:"default_windows_user,omitempty"`
	CurrentUnixDirectoryService *NASServerCurrentUnixDirectoryServiceEnum `json:"current_unix_directory_service,omitempty"`
	// Enable the possibility to match a windows account to a Unix account with different names.
	IsUsernameTranslationEnabled *bool `json:"is_username_translation_enabled,omitempty"`
	// A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generate this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true. 
	IsAutoUserMappingEnabled *bool `json:"is_auto_user_mapping_enabled,omitempty"`
	// Unique identifier of the preferred IPv4 production interface.
	ProductionIPv4InterfaceId *string `json:"production_IPv4_interface_id,omitempty"`
	// Unique identifier of the preferred IPv6 production interface.
	ProductionIPv6InterfaceId *string `json:"production_IPv6_interface_id,omitempty"`
	// Unique identifier of the preferred IPv4 backup interface.
	BackupIPv4InterfaceId *string `json:"backup_IPv4_interface_id,omitempty"`
	// Unique identifier of the preferred IPv6 backup interface.
	BackupIPv6InterfaceId *string `json:"backup_IPv6_interface_id,omitempty"`
	// Unique identifier of the current active preferred IPv4 interface.
	CurrentPreferredIPv4InterfaceId *string `json:"current_preferred_IPv4_interface_id,omitempty"`
	// Unique identifier of the current active preferred IPv6 interface.
	CurrentPreferredIPv6InterfaceId *string `json:"current_preferred_IPv6_interface_id,omitempty"`
	// Id of the protection policy applied to the nas server. Was added in version 3.0.0.0.
	ProtectionPolicyId *string `json:"protection_policy_id,omitempty"`
	// Unique identifier of a File_Performance type policy applied to the nas_server. If not set, there is no performance policy governing the nas_server.  Was added in version 4.1.0.0.
	PerformancePolicyId *string `json:"performance_policy_id,omitempty"`
	FileEventsPublishingMode *FileEventsPublishingModeEnum `json:"file_events_publishing_mode,omitempty"`
	// Indicates whether this NAS Server is a replication destination. A replication destination will be created by the system when a replication session is created. After the replication session is deleted, the replication destination will remain as it is until the end user changes it to be a non-replication destination. After the change, it becomes a production NAS server. If the end user keeps it as a replication destination, when the replication session is recreated, the replication destination NAS server could potentially be reused in the new session.  Was added in version 3.0.0.0.
	IsReplicationDestination *bool `json:"is_replication_destination,omitempty"`
	// true (Production mode) - In this mode, the NAS Server is fully operational. A NAS Server that is not part of a replication is always in production mode. Its configuration can also be changed without any restrictions. A NAS Server that is not part of a replication is always in production mode.  false (Destination mode) - In this mode, user data access and configuration change is restricted. User file systems are all unmounted and so not directly accessible. The administrator may create a snapshot of a file system and share the snap. The data is then only accessible through NFS (not secure nfs) or NDMP. Only network settings of objects can be changed (overridden locally). This includes objects such as network interfaces, dns, nis, ldap etc... This allows a destination NAS Server to have appropriate local network services configured in the event of a failover.  Was added in version 3.0.0.0.
	IsProductionModeEnabled *bool `json:"is_production_mode_enabled,omitempty"`
	// Cloning a replicated NAS server destination with the Disaster Recovery Testing option enabled allows for an independent copy of the NAS server to be instantiated so that full DR testing can be done against the clone. The DR test clone will not interfere with the production NAS server, nor will it interfere with the cloned destination should an actual failover occur while the DR test clone is active.  This relies on the clone having a completely isolated network from both the source and destination NAS servers of the replication. The DR test clone will have the same IP addresses as the cloned destination NAS server, so they cannot coexist on the same network. This means that port assignment to the clone must use ports that are not routable to the ports of the replicated destination NAS server.  Was added in version 3.6.0.0.
	IsDrTest *bool `json:"is_dr_test,omitempty"`
	// Localized message string corresponding to operational_status
	OperationalStatusL10n *string `json:"operational_status_l10n,omitempty"`
	// Localized message string corresponding to current_unix_directory_service
	CurrentUnixDirectoryServiceL10n *string `json:"current_unix_directory_service_l10n,omitempty"`
	// Localized message string corresponding to file_events_publishing_mode Was added in version 3.0.0.0.
	FileEventsPublishingModeL10n *string `json:"file_events_publishing_mode_l10n,omitempty"`
	ProtectionPolicy *PolicyInstance `json:"protection_policy,omitempty"`
	PerformancePolicy *PolicyInstance `json:"performance_policy,omitempty"`
	// This is the inverse of the resource type file_interface association.
	FileInterfaces []FileInterfaceInstance `json:"file_interfaces,omitempty"`
	// This is the inverse of the resource type file_ndmp association.
	FileNdmps []FileNdmpInstance `json:"file_ndmps,omitempty"`
	// This is the inverse of the resource type file_virus_checker association.
	FileVirusCheckers []FileVirusCheckerInstance `json:"file_virus_checkers,omitempty"`
	// This is the inverse of the resource type nfs_server association.
	NfsServers []NfsServerInstance `json:"nfs_servers,omitempty"`
	// This is the inverse of the resource type smb_server association.
	SmbServers []SmbServerInstance `json:"smb_servers,omitempty"`
	// This is the inverse of the resource type file_dns association.
	FileDnses []FileDnsInstance `json:"file_dnses,omitempty"`
	// This is the inverse of the resource type file_ftp association.
	FileFtps []FileFtpInstance `json:"file_ftps,omitempty"`
	// This is the inverse of the resource type file_kerberos association.
	FileKerberoses []FileKerberosInstance `json:"file_kerberoses,omitempty"`
	// This is the inverse of the resource type file_ldap association.
	FileLdaps []FileLdapInstance `json:"file_ldaps,omitempty"`
	// This is the inverse of the resource type file_nis association.
	FileNises []FileNisInstance `json:"file_nises,omitempty"`
	// This is the inverse of the resource type file_system association.
	FileSystems []FileSystemInstance `json:"file_systems,omitempty"`
	// This is the inverse of the resource type file_dhsm_config association.
	FileDhsmConfigs []FileDhsmConfigInstance `json:"file_dhsm_configs,omitempty"`
	// List of the file_events_publishers that are associated with this nas_server.
	FileEventsPublishers []FileEventsPublisherInstance `json:"file_events_publishers,omitempty"`
}

// NewNasServerInstance instantiates a new NasServerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasServerInstance() *NasServerInstance {
	this := NasServerInstance{}
	var isUsernameTranslationEnabled bool = false
	this.IsUsernameTranslationEnabled = &isUsernameTranslationEnabled
	var isAutoUserMappingEnabled bool = false
	this.IsAutoUserMappingEnabled = &isAutoUserMappingEnabled
	var fileEventsPublishingMode FileEventsPublishingModeEnum = FILEEVENTSPUBLISHINGMODEENUM_NONE
	this.FileEventsPublishingMode = &fileEventsPublishingMode
	return &this
}

// NewNasServerInstanceWithDefaults instantiates a new NasServerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasServerInstanceWithDefaults() *NasServerInstance {
	this := NasServerInstance{}
	var isUsernameTranslationEnabled bool = false
	this.IsUsernameTranslationEnabled = &isUsernameTranslationEnabled
	var isAutoUserMappingEnabled bool = false
	this.IsAutoUserMappingEnabled = &isAutoUserMappingEnabled
	var fileEventsPublishingMode FileEventsPublishingModeEnum = FILEEVENTSPUBLISHINGMODEENUM_NONE
	this.FileEventsPublishingMode = &fileEventsPublishingMode
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NasServerInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NasServerInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NasServerInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NasServerInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NasServerInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NasServerInstance) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NasServerInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NasServerInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NasServerInstance) SetDescription(v string) {
	o.Description = &v
}

// GetOperationalStatus returns the OperationalStatus field value if set, zero value otherwise.
func (o *NasServerInstance) GetOperationalStatus() NASServerOperationalStatusEnum {
	if o == nil || IsNil(o.OperationalStatus) {
		var ret NASServerOperationalStatusEnum
		return ret
	}
	return *o.OperationalStatus
}

// GetOperationalStatusOk returns a tuple with the OperationalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetOperationalStatusOk() (*NASServerOperationalStatusEnum, bool) {
	if o == nil || IsNil(o.OperationalStatus) {
		return nil, false
	}
	return o.OperationalStatus, true
}

// HasOperationalStatus returns a boolean if a field has been set.
func (o *NasServerInstance) HasOperationalStatus() bool {
	if o != nil && !IsNil(o.OperationalStatus) {
		return true
	}

	return false
}

// SetOperationalStatus gets a reference to the given NASServerOperationalStatusEnum and assigns it to the OperationalStatus field.
func (o *NasServerInstance) SetOperationalStatus(v NASServerOperationalStatusEnum) {
	o.OperationalStatus = &v
}

// GetCurrentNodeId returns the CurrentNodeId field value if set, zero value otherwise.
func (o *NasServerInstance) GetCurrentNodeId() string {
	if o == nil || IsNil(o.CurrentNodeId) {
		var ret string
		return ret
	}
	return *o.CurrentNodeId
}

// GetCurrentNodeIdOk returns a tuple with the CurrentNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetCurrentNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentNodeId) {
		return nil, false
	}
	return o.CurrentNodeId, true
}

// HasCurrentNodeId returns a boolean if a field has been set.
func (o *NasServerInstance) HasCurrentNodeId() bool {
	if o != nil && !IsNil(o.CurrentNodeId) {
		return true
	}

	return false
}

// SetCurrentNodeId gets a reference to the given string and assigns it to the CurrentNodeId field.
func (o *NasServerInstance) SetCurrentNodeId(v string) {
	o.CurrentNodeId = &v
}

// GetPreferredNodeId returns the PreferredNodeId field value if set, zero value otherwise.
func (o *NasServerInstance) GetPreferredNodeId() string {
	if o == nil || IsNil(o.PreferredNodeId) {
		var ret string
		return ret
	}
	return *o.PreferredNodeId
}

// GetPreferredNodeIdOk returns a tuple with the PreferredNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetPreferredNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredNodeId) {
		return nil, false
	}
	return o.PreferredNodeId, true
}

// HasPreferredNodeId returns a boolean if a field has been set.
func (o *NasServerInstance) HasPreferredNodeId() bool {
	if o != nil && !IsNil(o.PreferredNodeId) {
		return true
	}

	return false
}

// SetPreferredNodeId gets a reference to the given string and assigns it to the PreferredNodeId field.
func (o *NasServerInstance) SetPreferredNodeId(v string) {
	o.PreferredNodeId = &v
}

// GetDefaultUnixUser returns the DefaultUnixUser field value if set, zero value otherwise.
func (o *NasServerInstance) GetDefaultUnixUser() string {
	if o == nil || IsNil(o.DefaultUnixUser) {
		var ret string
		return ret
	}
	return *o.DefaultUnixUser
}

// GetDefaultUnixUserOk returns a tuple with the DefaultUnixUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetDefaultUnixUserOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultUnixUser) {
		return nil, false
	}
	return o.DefaultUnixUser, true
}

// HasDefaultUnixUser returns a boolean if a field has been set.
func (o *NasServerInstance) HasDefaultUnixUser() bool {
	if o != nil && !IsNil(o.DefaultUnixUser) {
		return true
	}

	return false
}

// SetDefaultUnixUser gets a reference to the given string and assigns it to the DefaultUnixUser field.
func (o *NasServerInstance) SetDefaultUnixUser(v string) {
	o.DefaultUnixUser = &v
}

// GetDefaultWindowsUser returns the DefaultWindowsUser field value if set, zero value otherwise.
func (o *NasServerInstance) GetDefaultWindowsUser() string {
	if o == nil || IsNil(o.DefaultWindowsUser) {
		var ret string
		return ret
	}
	return *o.DefaultWindowsUser
}

// GetDefaultWindowsUserOk returns a tuple with the DefaultWindowsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetDefaultWindowsUserOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultWindowsUser) {
		return nil, false
	}
	return o.DefaultWindowsUser, true
}

// HasDefaultWindowsUser returns a boolean if a field has been set.
func (o *NasServerInstance) HasDefaultWindowsUser() bool {
	if o != nil && !IsNil(o.DefaultWindowsUser) {
		return true
	}

	return false
}

// SetDefaultWindowsUser gets a reference to the given string and assigns it to the DefaultWindowsUser field.
func (o *NasServerInstance) SetDefaultWindowsUser(v string) {
	o.DefaultWindowsUser = &v
}

// GetCurrentUnixDirectoryService returns the CurrentUnixDirectoryService field value if set, zero value otherwise.
func (o *NasServerInstance) GetCurrentUnixDirectoryService() NASServerCurrentUnixDirectoryServiceEnum {
	if o == nil || IsNil(o.CurrentUnixDirectoryService) {
		var ret NASServerCurrentUnixDirectoryServiceEnum
		return ret
	}
	return *o.CurrentUnixDirectoryService
}

// GetCurrentUnixDirectoryServiceOk returns a tuple with the CurrentUnixDirectoryService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetCurrentUnixDirectoryServiceOk() (*NASServerCurrentUnixDirectoryServiceEnum, bool) {
	if o == nil || IsNil(o.CurrentUnixDirectoryService) {
		return nil, false
	}
	return o.CurrentUnixDirectoryService, true
}

// HasCurrentUnixDirectoryService returns a boolean if a field has been set.
func (o *NasServerInstance) HasCurrentUnixDirectoryService() bool {
	if o != nil && !IsNil(o.CurrentUnixDirectoryService) {
		return true
	}

	return false
}

// SetCurrentUnixDirectoryService gets a reference to the given NASServerCurrentUnixDirectoryServiceEnum and assigns it to the CurrentUnixDirectoryService field.
func (o *NasServerInstance) SetCurrentUnixDirectoryService(v NASServerCurrentUnixDirectoryServiceEnum) {
	o.CurrentUnixDirectoryService = &v
}

// GetIsUsernameTranslationEnabled returns the IsUsernameTranslationEnabled field value if set, zero value otherwise.
func (o *NasServerInstance) GetIsUsernameTranslationEnabled() bool {
	if o == nil || IsNil(o.IsUsernameTranslationEnabled) {
		var ret bool
		return ret
	}
	return *o.IsUsernameTranslationEnabled
}

// GetIsUsernameTranslationEnabledOk returns a tuple with the IsUsernameTranslationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetIsUsernameTranslationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUsernameTranslationEnabled) {
		return nil, false
	}
	return o.IsUsernameTranslationEnabled, true
}

// HasIsUsernameTranslationEnabled returns a boolean if a field has been set.
func (o *NasServerInstance) HasIsUsernameTranslationEnabled() bool {
	if o != nil && !IsNil(o.IsUsernameTranslationEnabled) {
		return true
	}

	return false
}

// SetIsUsernameTranslationEnabled gets a reference to the given bool and assigns it to the IsUsernameTranslationEnabled field.
func (o *NasServerInstance) SetIsUsernameTranslationEnabled(v bool) {
	o.IsUsernameTranslationEnabled = &v
}

// GetIsAutoUserMappingEnabled returns the IsAutoUserMappingEnabled field value if set, zero value otherwise.
func (o *NasServerInstance) GetIsAutoUserMappingEnabled() bool {
	if o == nil || IsNil(o.IsAutoUserMappingEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAutoUserMappingEnabled
}

// GetIsAutoUserMappingEnabledOk returns a tuple with the IsAutoUserMappingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetIsAutoUserMappingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoUserMappingEnabled) {
		return nil, false
	}
	return o.IsAutoUserMappingEnabled, true
}

// HasIsAutoUserMappingEnabled returns a boolean if a field has been set.
func (o *NasServerInstance) HasIsAutoUserMappingEnabled() bool {
	if o != nil && !IsNil(o.IsAutoUserMappingEnabled) {
		return true
	}

	return false
}

// SetIsAutoUserMappingEnabled gets a reference to the given bool and assigns it to the IsAutoUserMappingEnabled field.
func (o *NasServerInstance) SetIsAutoUserMappingEnabled(v bool) {
	o.IsAutoUserMappingEnabled = &v
}

// GetProductionIPv4InterfaceId returns the ProductionIPv4InterfaceId field value if set, zero value otherwise.
func (o *NasServerInstance) GetProductionIPv4InterfaceId() string {
	if o == nil || IsNil(o.ProductionIPv4InterfaceId) {
		var ret string
		return ret
	}
	return *o.ProductionIPv4InterfaceId
}

// GetProductionIPv4InterfaceIdOk returns a tuple with the ProductionIPv4InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetProductionIPv4InterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductionIPv4InterfaceId) {
		return nil, false
	}
	return o.ProductionIPv4InterfaceId, true
}

// HasProductionIPv4InterfaceId returns a boolean if a field has been set.
func (o *NasServerInstance) HasProductionIPv4InterfaceId() bool {
	if o != nil && !IsNil(o.ProductionIPv4InterfaceId) {
		return true
	}

	return false
}

// SetProductionIPv4InterfaceId gets a reference to the given string and assigns it to the ProductionIPv4InterfaceId field.
func (o *NasServerInstance) SetProductionIPv4InterfaceId(v string) {
	o.ProductionIPv4InterfaceId = &v
}

// GetProductionIPv6InterfaceId returns the ProductionIPv6InterfaceId field value if set, zero value otherwise.
func (o *NasServerInstance) GetProductionIPv6InterfaceId() string {
	if o == nil || IsNil(o.ProductionIPv6InterfaceId) {
		var ret string
		return ret
	}
	return *o.ProductionIPv6InterfaceId
}

// GetProductionIPv6InterfaceIdOk returns a tuple with the ProductionIPv6InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetProductionIPv6InterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductionIPv6InterfaceId) {
		return nil, false
	}
	return o.ProductionIPv6InterfaceId, true
}

// HasProductionIPv6InterfaceId returns a boolean if a field has been set.
func (o *NasServerInstance) HasProductionIPv6InterfaceId() bool {
	if o != nil && !IsNil(o.ProductionIPv6InterfaceId) {
		return true
	}

	return false
}

// SetProductionIPv6InterfaceId gets a reference to the given string and assigns it to the ProductionIPv6InterfaceId field.
func (o *NasServerInstance) SetProductionIPv6InterfaceId(v string) {
	o.ProductionIPv6InterfaceId = &v
}

// GetBackupIPv4InterfaceId returns the BackupIPv4InterfaceId field value if set, zero value otherwise.
func (o *NasServerInstance) GetBackupIPv4InterfaceId() string {
	if o == nil || IsNil(o.BackupIPv4InterfaceId) {
		var ret string
		return ret
	}
	return *o.BackupIPv4InterfaceId
}

// GetBackupIPv4InterfaceIdOk returns a tuple with the BackupIPv4InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetBackupIPv4InterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.BackupIPv4InterfaceId) {
		return nil, false
	}
	return o.BackupIPv4InterfaceId, true
}

// HasBackupIPv4InterfaceId returns a boolean if a field has been set.
func (o *NasServerInstance) HasBackupIPv4InterfaceId() bool {
	if o != nil && !IsNil(o.BackupIPv4InterfaceId) {
		return true
	}

	return false
}

// SetBackupIPv4InterfaceId gets a reference to the given string and assigns it to the BackupIPv4InterfaceId field.
func (o *NasServerInstance) SetBackupIPv4InterfaceId(v string) {
	o.BackupIPv4InterfaceId = &v
}

// GetBackupIPv6InterfaceId returns the BackupIPv6InterfaceId field value if set, zero value otherwise.
func (o *NasServerInstance) GetBackupIPv6InterfaceId() string {
	if o == nil || IsNil(o.BackupIPv6InterfaceId) {
		var ret string
		return ret
	}
	return *o.BackupIPv6InterfaceId
}

// GetBackupIPv6InterfaceIdOk returns a tuple with the BackupIPv6InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetBackupIPv6InterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.BackupIPv6InterfaceId) {
		return nil, false
	}
	return o.BackupIPv6InterfaceId, true
}

// HasBackupIPv6InterfaceId returns a boolean if a field has been set.
func (o *NasServerInstance) HasBackupIPv6InterfaceId() bool {
	if o != nil && !IsNil(o.BackupIPv6InterfaceId) {
		return true
	}

	return false
}

// SetBackupIPv6InterfaceId gets a reference to the given string and assigns it to the BackupIPv6InterfaceId field.
func (o *NasServerInstance) SetBackupIPv6InterfaceId(v string) {
	o.BackupIPv6InterfaceId = &v
}

// GetCurrentPreferredIPv4InterfaceId returns the CurrentPreferredIPv4InterfaceId field value if set, zero value otherwise.
func (o *NasServerInstance) GetCurrentPreferredIPv4InterfaceId() string {
	if o == nil || IsNil(o.CurrentPreferredIPv4InterfaceId) {
		var ret string
		return ret
	}
	return *o.CurrentPreferredIPv4InterfaceId
}

// GetCurrentPreferredIPv4InterfaceIdOk returns a tuple with the CurrentPreferredIPv4InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetCurrentPreferredIPv4InterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPreferredIPv4InterfaceId) {
		return nil, false
	}
	return o.CurrentPreferredIPv4InterfaceId, true
}

// HasCurrentPreferredIPv4InterfaceId returns a boolean if a field has been set.
func (o *NasServerInstance) HasCurrentPreferredIPv4InterfaceId() bool {
	if o != nil && !IsNil(o.CurrentPreferredIPv4InterfaceId) {
		return true
	}

	return false
}

// SetCurrentPreferredIPv4InterfaceId gets a reference to the given string and assigns it to the CurrentPreferredIPv4InterfaceId field.
func (o *NasServerInstance) SetCurrentPreferredIPv4InterfaceId(v string) {
	o.CurrentPreferredIPv4InterfaceId = &v
}

// GetCurrentPreferredIPv6InterfaceId returns the CurrentPreferredIPv6InterfaceId field value if set, zero value otherwise.
func (o *NasServerInstance) GetCurrentPreferredIPv6InterfaceId() string {
	if o == nil || IsNil(o.CurrentPreferredIPv6InterfaceId) {
		var ret string
		return ret
	}
	return *o.CurrentPreferredIPv6InterfaceId
}

// GetCurrentPreferredIPv6InterfaceIdOk returns a tuple with the CurrentPreferredIPv6InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetCurrentPreferredIPv6InterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPreferredIPv6InterfaceId) {
		return nil, false
	}
	return o.CurrentPreferredIPv6InterfaceId, true
}

// HasCurrentPreferredIPv6InterfaceId returns a boolean if a field has been set.
func (o *NasServerInstance) HasCurrentPreferredIPv6InterfaceId() bool {
	if o != nil && !IsNil(o.CurrentPreferredIPv6InterfaceId) {
		return true
	}

	return false
}

// SetCurrentPreferredIPv6InterfaceId gets a reference to the given string and assigns it to the CurrentPreferredIPv6InterfaceId field.
func (o *NasServerInstance) SetCurrentPreferredIPv6InterfaceId(v string) {
	o.CurrentPreferredIPv6InterfaceId = &v
}

// GetProtectionPolicyId returns the ProtectionPolicyId field value if set, zero value otherwise.
func (o *NasServerInstance) GetProtectionPolicyId() string {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyId
}

// GetProtectionPolicyIdOk returns a tuple with the ProtectionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetProtectionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		return nil, false
	}
	return o.ProtectionPolicyId, true
}

// HasProtectionPolicyId returns a boolean if a field has been set.
func (o *NasServerInstance) HasProtectionPolicyId() bool {
	if o != nil && !IsNil(o.ProtectionPolicyId) {
		return true
	}

	return false
}

// SetProtectionPolicyId gets a reference to the given string and assigns it to the ProtectionPolicyId field.
func (o *NasServerInstance) SetProtectionPolicyId(v string) {
	o.ProtectionPolicyId = &v
}

// GetPerformancePolicyId returns the PerformancePolicyId field value if set, zero value otherwise.
func (o *NasServerInstance) GetPerformancePolicyId() string {
	if o == nil || IsNil(o.PerformancePolicyId) {
		var ret string
		return ret
	}
	return *o.PerformancePolicyId
}

// GetPerformancePolicyIdOk returns a tuple with the PerformancePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetPerformancePolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PerformancePolicyId) {
		return nil, false
	}
	return o.PerformancePolicyId, true
}

// HasPerformancePolicyId returns a boolean if a field has been set.
func (o *NasServerInstance) HasPerformancePolicyId() bool {
	if o != nil && !IsNil(o.PerformancePolicyId) {
		return true
	}

	return false
}

// SetPerformancePolicyId gets a reference to the given string and assigns it to the PerformancePolicyId field.
func (o *NasServerInstance) SetPerformancePolicyId(v string) {
	o.PerformancePolicyId = &v
}

// GetFileEventsPublishingMode returns the FileEventsPublishingMode field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileEventsPublishingMode() FileEventsPublishingModeEnum {
	if o == nil || IsNil(o.FileEventsPublishingMode) {
		var ret FileEventsPublishingModeEnum
		return ret
	}
	return *o.FileEventsPublishingMode
}

// GetFileEventsPublishingModeOk returns a tuple with the FileEventsPublishingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileEventsPublishingModeOk() (*FileEventsPublishingModeEnum, bool) {
	if o == nil || IsNil(o.FileEventsPublishingMode) {
		return nil, false
	}
	return o.FileEventsPublishingMode, true
}

// HasFileEventsPublishingMode returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileEventsPublishingMode() bool {
	if o != nil && !IsNil(o.FileEventsPublishingMode) {
		return true
	}

	return false
}

// SetFileEventsPublishingMode gets a reference to the given FileEventsPublishingModeEnum and assigns it to the FileEventsPublishingMode field.
func (o *NasServerInstance) SetFileEventsPublishingMode(v FileEventsPublishingModeEnum) {
	o.FileEventsPublishingMode = &v
}

// GetIsReplicationDestination returns the IsReplicationDestination field value if set, zero value otherwise.
func (o *NasServerInstance) GetIsReplicationDestination() bool {
	if o == nil || IsNil(o.IsReplicationDestination) {
		var ret bool
		return ret
	}
	return *o.IsReplicationDestination
}

// GetIsReplicationDestinationOk returns a tuple with the IsReplicationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetIsReplicationDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplicationDestination) {
		return nil, false
	}
	return o.IsReplicationDestination, true
}

// HasIsReplicationDestination returns a boolean if a field has been set.
func (o *NasServerInstance) HasIsReplicationDestination() bool {
	if o != nil && !IsNil(o.IsReplicationDestination) {
		return true
	}

	return false
}

// SetIsReplicationDestination gets a reference to the given bool and assigns it to the IsReplicationDestination field.
func (o *NasServerInstance) SetIsReplicationDestination(v bool) {
	o.IsReplicationDestination = &v
}

// GetIsProductionModeEnabled returns the IsProductionModeEnabled field value if set, zero value otherwise.
func (o *NasServerInstance) GetIsProductionModeEnabled() bool {
	if o == nil || IsNil(o.IsProductionModeEnabled) {
		var ret bool
		return ret
	}
	return *o.IsProductionModeEnabled
}

// GetIsProductionModeEnabledOk returns a tuple with the IsProductionModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetIsProductionModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProductionModeEnabled) {
		return nil, false
	}
	return o.IsProductionModeEnabled, true
}

// HasIsProductionModeEnabled returns a boolean if a field has been set.
func (o *NasServerInstance) HasIsProductionModeEnabled() bool {
	if o != nil && !IsNil(o.IsProductionModeEnabled) {
		return true
	}

	return false
}

// SetIsProductionModeEnabled gets a reference to the given bool and assigns it to the IsProductionModeEnabled field.
func (o *NasServerInstance) SetIsProductionModeEnabled(v bool) {
	o.IsProductionModeEnabled = &v
}

// GetIsDrTest returns the IsDrTest field value if set, zero value otherwise.
func (o *NasServerInstance) GetIsDrTest() bool {
	if o == nil || IsNil(o.IsDrTest) {
		var ret bool
		return ret
	}
	return *o.IsDrTest
}

// GetIsDrTestOk returns a tuple with the IsDrTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetIsDrTestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDrTest) {
		return nil, false
	}
	return o.IsDrTest, true
}

// HasIsDrTest returns a boolean if a field has been set.
func (o *NasServerInstance) HasIsDrTest() bool {
	if o != nil && !IsNil(o.IsDrTest) {
		return true
	}

	return false
}

// SetIsDrTest gets a reference to the given bool and assigns it to the IsDrTest field.
func (o *NasServerInstance) SetIsDrTest(v bool) {
	o.IsDrTest = &v
}

// GetOperationalStatusL10n returns the OperationalStatusL10n field value if set, zero value otherwise.
func (o *NasServerInstance) GetOperationalStatusL10n() string {
	if o == nil || IsNil(o.OperationalStatusL10n) {
		var ret string
		return ret
	}
	return *o.OperationalStatusL10n
}

// GetOperationalStatusL10nOk returns a tuple with the OperationalStatusL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetOperationalStatusL10nOk() (*string, bool) {
	if o == nil || IsNil(o.OperationalStatusL10n) {
		return nil, false
	}
	return o.OperationalStatusL10n, true
}

// HasOperationalStatusL10n returns a boolean if a field has been set.
func (o *NasServerInstance) HasOperationalStatusL10n() bool {
	if o != nil && !IsNil(o.OperationalStatusL10n) {
		return true
	}

	return false
}

// SetOperationalStatusL10n gets a reference to the given string and assigns it to the OperationalStatusL10n field.
func (o *NasServerInstance) SetOperationalStatusL10n(v string) {
	o.OperationalStatusL10n = &v
}

// GetCurrentUnixDirectoryServiceL10n returns the CurrentUnixDirectoryServiceL10n field value if set, zero value otherwise.
func (o *NasServerInstance) GetCurrentUnixDirectoryServiceL10n() string {
	if o == nil || IsNil(o.CurrentUnixDirectoryServiceL10n) {
		var ret string
		return ret
	}
	return *o.CurrentUnixDirectoryServiceL10n
}

// GetCurrentUnixDirectoryServiceL10nOk returns a tuple with the CurrentUnixDirectoryServiceL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetCurrentUnixDirectoryServiceL10nOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentUnixDirectoryServiceL10n) {
		return nil, false
	}
	return o.CurrentUnixDirectoryServiceL10n, true
}

// HasCurrentUnixDirectoryServiceL10n returns a boolean if a field has been set.
func (o *NasServerInstance) HasCurrentUnixDirectoryServiceL10n() bool {
	if o != nil && !IsNil(o.CurrentUnixDirectoryServiceL10n) {
		return true
	}

	return false
}

// SetCurrentUnixDirectoryServiceL10n gets a reference to the given string and assigns it to the CurrentUnixDirectoryServiceL10n field.
func (o *NasServerInstance) SetCurrentUnixDirectoryServiceL10n(v string) {
	o.CurrentUnixDirectoryServiceL10n = &v
}

// GetFileEventsPublishingModeL10n returns the FileEventsPublishingModeL10n field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileEventsPublishingModeL10n() string {
	if o == nil || IsNil(o.FileEventsPublishingModeL10n) {
		var ret string
		return ret
	}
	return *o.FileEventsPublishingModeL10n
}

// GetFileEventsPublishingModeL10nOk returns a tuple with the FileEventsPublishingModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileEventsPublishingModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.FileEventsPublishingModeL10n) {
		return nil, false
	}
	return o.FileEventsPublishingModeL10n, true
}

// HasFileEventsPublishingModeL10n returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileEventsPublishingModeL10n() bool {
	if o != nil && !IsNil(o.FileEventsPublishingModeL10n) {
		return true
	}

	return false
}

// SetFileEventsPublishingModeL10n gets a reference to the given string and assigns it to the FileEventsPublishingModeL10n field.
func (o *NasServerInstance) SetFileEventsPublishingModeL10n(v string) {
	o.FileEventsPublishingModeL10n = &v
}

// GetProtectionPolicy returns the ProtectionPolicy field value if set, zero value otherwise.
func (o *NasServerInstance) GetProtectionPolicy() PolicyInstance {
	if o == nil || IsNil(o.ProtectionPolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.ProtectionPolicy
}

// GetProtectionPolicyOk returns a tuple with the ProtectionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetProtectionPolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.ProtectionPolicy) {
		return nil, false
	}
	return o.ProtectionPolicy, true
}

// HasProtectionPolicy returns a boolean if a field has been set.
func (o *NasServerInstance) HasProtectionPolicy() bool {
	if o != nil && !IsNil(o.ProtectionPolicy) {
		return true
	}

	return false
}

// SetProtectionPolicy gets a reference to the given PolicyInstance and assigns it to the ProtectionPolicy field.
func (o *NasServerInstance) SetProtectionPolicy(v PolicyInstance) {
	o.ProtectionPolicy = &v
}

// GetPerformancePolicy returns the PerformancePolicy field value if set, zero value otherwise.
func (o *NasServerInstance) GetPerformancePolicy() PolicyInstance {
	if o == nil || IsNil(o.PerformancePolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.PerformancePolicy
}

// GetPerformancePolicyOk returns a tuple with the PerformancePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetPerformancePolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.PerformancePolicy) {
		return nil, false
	}
	return o.PerformancePolicy, true
}

// HasPerformancePolicy returns a boolean if a field has been set.
func (o *NasServerInstance) HasPerformancePolicy() bool {
	if o != nil && !IsNil(o.PerformancePolicy) {
		return true
	}

	return false
}

// SetPerformancePolicy gets a reference to the given PolicyInstance and assigns it to the PerformancePolicy field.
func (o *NasServerInstance) SetPerformancePolicy(v PolicyInstance) {
	o.PerformancePolicy = &v
}

// GetFileInterfaces returns the FileInterfaces field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileInterfaces() []FileInterfaceInstance {
	if o == nil || IsNil(o.FileInterfaces) {
		var ret []FileInterfaceInstance
		return ret
	}
	return o.FileInterfaces
}

// GetFileInterfacesOk returns a tuple with the FileInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileInterfacesOk() ([]FileInterfaceInstance, bool) {
	if o == nil || IsNil(o.FileInterfaces) {
		return nil, false
	}
	return o.FileInterfaces, true
}

// HasFileInterfaces returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileInterfaces() bool {
	if o != nil && !IsNil(o.FileInterfaces) {
		return true
	}

	return false
}

// SetFileInterfaces gets a reference to the given []FileInterfaceInstance and assigns it to the FileInterfaces field.
func (o *NasServerInstance) SetFileInterfaces(v []FileInterfaceInstance) {
	o.FileInterfaces = v
}

// GetFileNdmps returns the FileNdmps field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileNdmps() []FileNdmpInstance {
	if o == nil || IsNil(o.FileNdmps) {
		var ret []FileNdmpInstance
		return ret
	}
	return o.FileNdmps
}

// GetFileNdmpsOk returns a tuple with the FileNdmps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileNdmpsOk() ([]FileNdmpInstance, bool) {
	if o == nil || IsNil(o.FileNdmps) {
		return nil, false
	}
	return o.FileNdmps, true
}

// HasFileNdmps returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileNdmps() bool {
	if o != nil && !IsNil(o.FileNdmps) {
		return true
	}

	return false
}

// SetFileNdmps gets a reference to the given []FileNdmpInstance and assigns it to the FileNdmps field.
func (o *NasServerInstance) SetFileNdmps(v []FileNdmpInstance) {
	o.FileNdmps = v
}

// GetFileVirusCheckers returns the FileVirusCheckers field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileVirusCheckers() []FileVirusCheckerInstance {
	if o == nil || IsNil(o.FileVirusCheckers) {
		var ret []FileVirusCheckerInstance
		return ret
	}
	return o.FileVirusCheckers
}

// GetFileVirusCheckersOk returns a tuple with the FileVirusCheckers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileVirusCheckersOk() ([]FileVirusCheckerInstance, bool) {
	if o == nil || IsNil(o.FileVirusCheckers) {
		return nil, false
	}
	return o.FileVirusCheckers, true
}

// HasFileVirusCheckers returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileVirusCheckers() bool {
	if o != nil && !IsNil(o.FileVirusCheckers) {
		return true
	}

	return false
}

// SetFileVirusCheckers gets a reference to the given []FileVirusCheckerInstance and assigns it to the FileVirusCheckers field.
func (o *NasServerInstance) SetFileVirusCheckers(v []FileVirusCheckerInstance) {
	o.FileVirusCheckers = v
}

// GetNfsServers returns the NfsServers field value if set, zero value otherwise.
func (o *NasServerInstance) GetNfsServers() []NfsServerInstance {
	if o == nil || IsNil(o.NfsServers) {
		var ret []NfsServerInstance
		return ret
	}
	return o.NfsServers
}

// GetNfsServersOk returns a tuple with the NfsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetNfsServersOk() ([]NfsServerInstance, bool) {
	if o == nil || IsNil(o.NfsServers) {
		return nil, false
	}
	return o.NfsServers, true
}

// HasNfsServers returns a boolean if a field has been set.
func (o *NasServerInstance) HasNfsServers() bool {
	if o != nil && !IsNil(o.NfsServers) {
		return true
	}

	return false
}

// SetNfsServers gets a reference to the given []NfsServerInstance and assigns it to the NfsServers field.
func (o *NasServerInstance) SetNfsServers(v []NfsServerInstance) {
	o.NfsServers = v
}

// GetSmbServers returns the SmbServers field value if set, zero value otherwise.
func (o *NasServerInstance) GetSmbServers() []SmbServerInstance {
	if o == nil || IsNil(o.SmbServers) {
		var ret []SmbServerInstance
		return ret
	}
	return o.SmbServers
}

// GetSmbServersOk returns a tuple with the SmbServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetSmbServersOk() ([]SmbServerInstance, bool) {
	if o == nil || IsNil(o.SmbServers) {
		return nil, false
	}
	return o.SmbServers, true
}

// HasSmbServers returns a boolean if a field has been set.
func (o *NasServerInstance) HasSmbServers() bool {
	if o != nil && !IsNil(o.SmbServers) {
		return true
	}

	return false
}

// SetSmbServers gets a reference to the given []SmbServerInstance and assigns it to the SmbServers field.
func (o *NasServerInstance) SetSmbServers(v []SmbServerInstance) {
	o.SmbServers = v
}

// GetFileDnses returns the FileDnses field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileDnses() []FileDnsInstance {
	if o == nil || IsNil(o.FileDnses) {
		var ret []FileDnsInstance
		return ret
	}
	return o.FileDnses
}

// GetFileDnsesOk returns a tuple with the FileDnses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileDnsesOk() ([]FileDnsInstance, bool) {
	if o == nil || IsNil(o.FileDnses) {
		return nil, false
	}
	return o.FileDnses, true
}

// HasFileDnses returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileDnses() bool {
	if o != nil && !IsNil(o.FileDnses) {
		return true
	}

	return false
}

// SetFileDnses gets a reference to the given []FileDnsInstance and assigns it to the FileDnses field.
func (o *NasServerInstance) SetFileDnses(v []FileDnsInstance) {
	o.FileDnses = v
}

// GetFileFtps returns the FileFtps field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileFtps() []FileFtpInstance {
	if o == nil || IsNil(o.FileFtps) {
		var ret []FileFtpInstance
		return ret
	}
	return o.FileFtps
}

// GetFileFtpsOk returns a tuple with the FileFtps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileFtpsOk() ([]FileFtpInstance, bool) {
	if o == nil || IsNil(o.FileFtps) {
		return nil, false
	}
	return o.FileFtps, true
}

// HasFileFtps returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileFtps() bool {
	if o != nil && !IsNil(o.FileFtps) {
		return true
	}

	return false
}

// SetFileFtps gets a reference to the given []FileFtpInstance and assigns it to the FileFtps field.
func (o *NasServerInstance) SetFileFtps(v []FileFtpInstance) {
	o.FileFtps = v
}

// GetFileKerberoses returns the FileKerberoses field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileKerberoses() []FileKerberosInstance {
	if o == nil || IsNil(o.FileKerberoses) {
		var ret []FileKerberosInstance
		return ret
	}
	return o.FileKerberoses
}

// GetFileKerberosesOk returns a tuple with the FileKerberoses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileKerberosesOk() ([]FileKerberosInstance, bool) {
	if o == nil || IsNil(o.FileKerberoses) {
		return nil, false
	}
	return o.FileKerberoses, true
}

// HasFileKerberoses returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileKerberoses() bool {
	if o != nil && !IsNil(o.FileKerberoses) {
		return true
	}

	return false
}

// SetFileKerberoses gets a reference to the given []FileKerberosInstance and assigns it to the FileKerberoses field.
func (o *NasServerInstance) SetFileKerberoses(v []FileKerberosInstance) {
	o.FileKerberoses = v
}

// GetFileLdaps returns the FileLdaps field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileLdaps() []FileLdapInstance {
	if o == nil || IsNil(o.FileLdaps) {
		var ret []FileLdapInstance
		return ret
	}
	return o.FileLdaps
}

// GetFileLdapsOk returns a tuple with the FileLdaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileLdapsOk() ([]FileLdapInstance, bool) {
	if o == nil || IsNil(o.FileLdaps) {
		return nil, false
	}
	return o.FileLdaps, true
}

// HasFileLdaps returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileLdaps() bool {
	if o != nil && !IsNil(o.FileLdaps) {
		return true
	}

	return false
}

// SetFileLdaps gets a reference to the given []FileLdapInstance and assigns it to the FileLdaps field.
func (o *NasServerInstance) SetFileLdaps(v []FileLdapInstance) {
	o.FileLdaps = v
}

// GetFileNises returns the FileNises field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileNises() []FileNisInstance {
	if o == nil || IsNil(o.FileNises) {
		var ret []FileNisInstance
		return ret
	}
	return o.FileNises
}

// GetFileNisesOk returns a tuple with the FileNises field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileNisesOk() ([]FileNisInstance, bool) {
	if o == nil || IsNil(o.FileNises) {
		return nil, false
	}
	return o.FileNises, true
}

// HasFileNises returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileNises() bool {
	if o != nil && !IsNil(o.FileNises) {
		return true
	}

	return false
}

// SetFileNises gets a reference to the given []FileNisInstance and assigns it to the FileNises field.
func (o *NasServerInstance) SetFileNises(v []FileNisInstance) {
	o.FileNises = v
}

// GetFileSystems returns the FileSystems field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileSystems() []FileSystemInstance {
	if o == nil || IsNil(o.FileSystems) {
		var ret []FileSystemInstance
		return ret
	}
	return o.FileSystems
}

// GetFileSystemsOk returns a tuple with the FileSystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileSystemsOk() ([]FileSystemInstance, bool) {
	if o == nil || IsNil(o.FileSystems) {
		return nil, false
	}
	return o.FileSystems, true
}

// HasFileSystems returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileSystems() bool {
	if o != nil && !IsNil(o.FileSystems) {
		return true
	}

	return false
}

// SetFileSystems gets a reference to the given []FileSystemInstance and assigns it to the FileSystems field.
func (o *NasServerInstance) SetFileSystems(v []FileSystemInstance) {
	o.FileSystems = v
}

// GetFileDhsmConfigs returns the FileDhsmConfigs field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileDhsmConfigs() []FileDhsmConfigInstance {
	if o == nil || IsNil(o.FileDhsmConfigs) {
		var ret []FileDhsmConfigInstance
		return ret
	}
	return o.FileDhsmConfigs
}

// GetFileDhsmConfigsOk returns a tuple with the FileDhsmConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileDhsmConfigsOk() ([]FileDhsmConfigInstance, bool) {
	if o == nil || IsNil(o.FileDhsmConfigs) {
		return nil, false
	}
	return o.FileDhsmConfigs, true
}

// HasFileDhsmConfigs returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileDhsmConfigs() bool {
	if o != nil && !IsNil(o.FileDhsmConfigs) {
		return true
	}

	return false
}

// SetFileDhsmConfigs gets a reference to the given []FileDhsmConfigInstance and assigns it to the FileDhsmConfigs field.
func (o *NasServerInstance) SetFileDhsmConfigs(v []FileDhsmConfigInstance) {
	o.FileDhsmConfigs = v
}

// GetFileEventsPublishers returns the FileEventsPublishers field value if set, zero value otherwise.
func (o *NasServerInstance) GetFileEventsPublishers() []FileEventsPublisherInstance {
	if o == nil || IsNil(o.FileEventsPublishers) {
		var ret []FileEventsPublisherInstance
		return ret
	}
	return o.FileEventsPublishers
}

// GetFileEventsPublishersOk returns a tuple with the FileEventsPublishers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasServerInstance) GetFileEventsPublishersOk() ([]FileEventsPublisherInstance, bool) {
	if o == nil || IsNil(o.FileEventsPublishers) {
		return nil, false
	}
	return o.FileEventsPublishers, true
}

// HasFileEventsPublishers returns a boolean if a field has been set.
func (o *NasServerInstance) HasFileEventsPublishers() bool {
	if o != nil && !IsNil(o.FileEventsPublishers) {
		return true
	}

	return false
}

// SetFileEventsPublishers gets a reference to the given []FileEventsPublisherInstance and assigns it to the FileEventsPublishers field.
func (o *NasServerInstance) SetFileEventsPublishers(v []FileEventsPublisherInstance) {
	o.FileEventsPublishers = v
}

func (o NasServerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NasServerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.OperationalStatus) {
		toSerialize["operational_status"] = o.OperationalStatus
	}
	if !IsNil(o.CurrentNodeId) {
		toSerialize["current_node_id"] = o.CurrentNodeId
	}
	if !IsNil(o.PreferredNodeId) {
		toSerialize["preferred_node_id"] = o.PreferredNodeId
	}
	if !IsNil(o.DefaultUnixUser) {
		toSerialize["default_unix_user"] = o.DefaultUnixUser
	}
	if !IsNil(o.DefaultWindowsUser) {
		toSerialize["default_windows_user"] = o.DefaultWindowsUser
	}
	if !IsNil(o.CurrentUnixDirectoryService) {
		toSerialize["current_unix_directory_service"] = o.CurrentUnixDirectoryService
	}
	if !IsNil(o.IsUsernameTranslationEnabled) {
		toSerialize["is_username_translation_enabled"] = o.IsUsernameTranslationEnabled
	}
	if !IsNil(o.IsAutoUserMappingEnabled) {
		toSerialize["is_auto_user_mapping_enabled"] = o.IsAutoUserMappingEnabled
	}
	if !IsNil(o.ProductionIPv4InterfaceId) {
		toSerialize["production_IPv4_interface_id"] = o.ProductionIPv4InterfaceId
	}
	if !IsNil(o.ProductionIPv6InterfaceId) {
		toSerialize["production_IPv6_interface_id"] = o.ProductionIPv6InterfaceId
	}
	if !IsNil(o.BackupIPv4InterfaceId) {
		toSerialize["backup_IPv4_interface_id"] = o.BackupIPv4InterfaceId
	}
	if !IsNil(o.BackupIPv6InterfaceId) {
		toSerialize["backup_IPv6_interface_id"] = o.BackupIPv6InterfaceId
	}
	if !IsNil(o.CurrentPreferredIPv4InterfaceId) {
		toSerialize["current_preferred_IPv4_interface_id"] = o.CurrentPreferredIPv4InterfaceId
	}
	if !IsNil(o.CurrentPreferredIPv6InterfaceId) {
		toSerialize["current_preferred_IPv6_interface_id"] = o.CurrentPreferredIPv6InterfaceId
	}
	if !IsNil(o.ProtectionPolicyId) {
		toSerialize["protection_policy_id"] = o.ProtectionPolicyId
	}
	if !IsNil(o.PerformancePolicyId) {
		toSerialize["performance_policy_id"] = o.PerformancePolicyId
	}
	if !IsNil(o.FileEventsPublishingMode) {
		toSerialize["file_events_publishing_mode"] = o.FileEventsPublishingMode
	}
	if !IsNil(o.IsReplicationDestination) {
		toSerialize["is_replication_destination"] = o.IsReplicationDestination
	}
	if !IsNil(o.IsProductionModeEnabled) {
		toSerialize["is_production_mode_enabled"] = o.IsProductionModeEnabled
	}
	if !IsNil(o.IsDrTest) {
		toSerialize["is_dr_test"] = o.IsDrTest
	}
	if !IsNil(o.OperationalStatusL10n) {
		toSerialize["operational_status_l10n"] = o.OperationalStatusL10n
	}
	if !IsNil(o.CurrentUnixDirectoryServiceL10n) {
		toSerialize["current_unix_directory_service_l10n"] = o.CurrentUnixDirectoryServiceL10n
	}
	if !IsNil(o.FileEventsPublishingModeL10n) {
		toSerialize["file_events_publishing_mode_l10n"] = o.FileEventsPublishingModeL10n
	}
	if !IsNil(o.ProtectionPolicy) {
		toSerialize["protection_policy"] = o.ProtectionPolicy
	}
	if !IsNil(o.PerformancePolicy) {
		toSerialize["performance_policy"] = o.PerformancePolicy
	}
	if !IsNil(o.FileInterfaces) {
		toSerialize["file_interfaces"] = o.FileInterfaces
	}
	if !IsNil(o.FileNdmps) {
		toSerialize["file_ndmps"] = o.FileNdmps
	}
	if !IsNil(o.FileVirusCheckers) {
		toSerialize["file_virus_checkers"] = o.FileVirusCheckers
	}
	if !IsNil(o.NfsServers) {
		toSerialize["nfs_servers"] = o.NfsServers
	}
	if !IsNil(o.SmbServers) {
		toSerialize["smb_servers"] = o.SmbServers
	}
	if !IsNil(o.FileDnses) {
		toSerialize["file_dnses"] = o.FileDnses
	}
	if !IsNil(o.FileFtps) {
		toSerialize["file_ftps"] = o.FileFtps
	}
	if !IsNil(o.FileKerberoses) {
		toSerialize["file_kerberoses"] = o.FileKerberoses
	}
	if !IsNil(o.FileLdaps) {
		toSerialize["file_ldaps"] = o.FileLdaps
	}
	if !IsNil(o.FileNises) {
		toSerialize["file_nises"] = o.FileNises
	}
	if !IsNil(o.FileSystems) {
		toSerialize["file_systems"] = o.FileSystems
	}
	if !IsNil(o.FileDhsmConfigs) {
		toSerialize["file_dhsm_configs"] = o.FileDhsmConfigs
	}
	if !IsNil(o.FileEventsPublishers) {
		toSerialize["file_events_publishers"] = o.FileEventsPublishers
	}
	return toSerialize, nil
}

type NullableNasServerInstance struct {
	value *NasServerInstance
	isSet bool
}

func (v NullableNasServerInstance) Get() *NasServerInstance {
	return v.value
}

func (v *NullableNasServerInstance) Set(val *NasServerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableNasServerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableNasServerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasServerInstance(val *NasServerInstance) *NullableNasServerInstance {
	return &NullableNasServerInstance{value: val, isSet: true}
}

func (v NullableNasServerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasServerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


