/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// FileSystemAccessPolicyEnum File system security access policies. Each file system uses its access policy to determine how to reconcile the differences between NFS and SMB access control. Selecting an access policy determines which mechanism is used to enforce file security on the particular file system.  * Native - Native Security.  * UNIX - UNIX Security.  * Windows - Windows Security. 
type FileSystemAccessPolicyEnum string

// List of FileSystemAccessPolicyEnum
const (
	FILESYSTEMACCESSPOLICYENUM_NATIVE FileSystemAccessPolicyEnum = "Native"
	FILESYSTEMACCESSPOLICYENUM_UNIX FileSystemAccessPolicyEnum = "UNIX"
	FILESYSTEMACCESSPOLICYENUM_WINDOWS FileSystemAccessPolicyEnum = "Windows"
)

// All allowed values of FileSystemAccessPolicyEnum enum
var AllowedFileSystemAccessPolicyEnumEnumValues = []FileSystemAccessPolicyEnum{
	"Native",
	"UNIX",
	"Windows",
}

func (v *FileSystemAccessPolicyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileSystemAccessPolicyEnum(value)
	for _, existing := range AllowedFileSystemAccessPolicyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileSystemAccessPolicyEnum", value)
}

// NewFileSystemAccessPolicyEnumFromValue returns a pointer to a valid FileSystemAccessPolicyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileSystemAccessPolicyEnumFromValue(v string) (*FileSystemAccessPolicyEnum, error) {
	ev := FileSystemAccessPolicyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileSystemAccessPolicyEnum: valid values are %v", v, AllowedFileSystemAccessPolicyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileSystemAccessPolicyEnum) IsValid() bool {
	for _, existing := range AllowedFileSystemAccessPolicyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileSystemAccessPolicyEnum value
func (v FileSystemAccessPolicyEnum) Ptr() *FileSystemAccessPolicyEnum {
	return &v
}

type NullableFileSystemAccessPolicyEnum struct {
	value *FileSystemAccessPolicyEnum
	isSet bool
}

func (v NullableFileSystemAccessPolicyEnum) Get() *FileSystemAccessPolicyEnum {
	return v.value
}

func (v *NullableFileSystemAccessPolicyEnum) Set(val *FileSystemAccessPolicyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSystemAccessPolicyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSystemAccessPolicyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSystemAccessPolicyEnum(val *FileSystemAccessPolicyEnum) *NullableFileSystemAccessPolicyEnum {
	return &NullableFileSystemAccessPolicyEnum{value: val, isSet: true}
}

func (v NullableFileSystemAccessPolicyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSystemAccessPolicyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

