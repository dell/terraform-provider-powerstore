/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// ImportSessionTypeEnum The type of the import session.  Values are: * Non_Disruptive - This type of import session requires an Import Host Agent to be running on any host accessing the import source resources. There is no host application downtime. * Agentless - This type of import session does not require an Import Host Agent to be running on any host accessing the source resources of import. Host application downtime is required to reconfigure the host application to use the destination resource before starting the data copy operation.  Was added in version 1.0.2.
type ImportSessionTypeEnum string

// List of ImportSessionTypeEnum
const (
	IMPORTSESSIONTYPEENUM_NON_DISRUPTIVE ImportSessionTypeEnum = "Non_Disruptive"
	IMPORTSESSIONTYPEENUM_AGENTLESS ImportSessionTypeEnum = "Agentless"
)

// All allowed values of ImportSessionTypeEnum enum
var AllowedImportSessionTypeEnumEnumValues = []ImportSessionTypeEnum{
	"Non_Disruptive",
	"Agentless",
}

func (v *ImportSessionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportSessionTypeEnum(value)
	for _, existing := range AllowedImportSessionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImportSessionTypeEnum", value)
}

// NewImportSessionTypeEnumFromValue returns a pointer to a valid ImportSessionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportSessionTypeEnumFromValue(v string) (*ImportSessionTypeEnum, error) {
	ev := ImportSessionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImportSessionTypeEnum: valid values are %v", v, AllowedImportSessionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportSessionTypeEnum) IsValid() bool {
	for _, existing := range AllowedImportSessionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportSessionTypeEnum value
func (v ImportSessionTypeEnum) Ptr() *ImportSessionTypeEnum {
	return &v
}

type NullableImportSessionTypeEnum struct {
	value *ImportSessionTypeEnum
	isSet bool
}

func (v NullableImportSessionTypeEnum) Get() *ImportSessionTypeEnum {
	return v.value
}

func (v *NullableImportSessionTypeEnum) Set(val *ImportSessionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableImportSessionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableImportSessionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportSessionTypeEnum(val *ImportSessionTypeEnum) *NullableImportSessionTypeEnum {
	return &NullableImportSessionTypeEnum{value: val, isSet: true}
}

func (v NullableImportSessionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportSessionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

