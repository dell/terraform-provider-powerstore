/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// ReplicationRoleEnum Role of the replication session: * Source      - The local resource is the source of the remote replication session. * Destination - The local resource is the destination of the remote replication session. * Metro_Preferred - The local resource is designated preferred side of the metro type replication session. * Metro_Non_Preferred - The local resource is designated non-preferred side of the metro type replication session.  Values was added in 3.0.0.0: Metro_Preferred, Metro_Non_Preferred.
type ReplicationRoleEnum string

// List of ReplicationRoleEnum
const (
	REPLICATIONROLEENUM_DESTINATION ReplicationRoleEnum = "Destination"
	REPLICATIONROLEENUM_METRO_NON_PREFERRED ReplicationRoleEnum = "Metro_Non_Preferred"
	REPLICATIONROLEENUM_METRO_PREFERRED ReplicationRoleEnum = "Metro_Preferred"
	REPLICATIONROLEENUM_SOURCE ReplicationRoleEnum = "Source"
)

// All allowed values of ReplicationRoleEnum enum
var AllowedReplicationRoleEnumEnumValues = []ReplicationRoleEnum{
	"Destination",
	"Metro_Non_Preferred",
	"Metro_Preferred",
	"Source",
}

func (v *ReplicationRoleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationRoleEnum(value)
	for _, existing := range AllowedReplicationRoleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationRoleEnum", value)
}

// NewReplicationRoleEnumFromValue returns a pointer to a valid ReplicationRoleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationRoleEnumFromValue(v string) (*ReplicationRoleEnum, error) {
	ev := ReplicationRoleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationRoleEnum: valid values are %v", v, AllowedReplicationRoleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationRoleEnum) IsValid() bool {
	for _, existing := range AllowedReplicationRoleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationRoleEnum value
func (v ReplicationRoleEnum) Ptr() *ReplicationRoleEnum {
	return &v
}

type NullableReplicationRoleEnum struct {
	value *ReplicationRoleEnum
	isSet bool
}

func (v NullableReplicationRoleEnum) Get() *ReplicationRoleEnum {
	return v.value
}

func (v *NullableReplicationRoleEnum) Set(val *ReplicationRoleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationRoleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationRoleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationRoleEnum(val *ReplicationRoleEnum) *NullableReplicationRoleEnum {
	return &NullableReplicationRoleEnum{value: val, isSet: true}
}

func (v NullableReplicationRoleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationRoleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

