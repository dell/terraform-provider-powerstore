/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the ImportUniversalVolumeInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportUniversalVolumeInstance{}

// ImportUniversalVolumeInstance An instance of a Universal volume. Was added in version 4.0.0.0. This resource type has queriable association from remote_system
type ImportUniversalVolumeInstance struct {
	// Unique identifier of the Universal volume.
	Id *string `json:"id,omitempty"`
	// World Wide Name (WWN) of the Universal volume.
	Wwn *string `json:"wwn,omitempty"`
	// Name of the Universal volume. During discovery name will come as null from proxy layer and can later be updated by calling Modify Volume API.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Size of the Universal volume, in bytes.
	Size *int64 `json:"size,omitempty"`
	BlockSize *VolumeBlockSizeEnum `json:"block_size,omitempty"`
	// Unique identifier of the Remote storage system to which the Universal volume belongs. 
	RemoteSystemId *string `json:"remote_system_id,omitempty"`
	ImportableCriteria *VolumeImportableCriteriaEnum `json:"importable_criteria,omitempty"`
	// Unique identifier of the Universal Consistency Group to which the Universal volume belongs. 
	ImportUniversalConsistencyGroupId *string `json:"import_universal_consistency_group_id,omitempty"`
	// Localized message string corresponding to block_size Was added in version 4.0.0.0.
	BlockSizeL10n *string `json:"block_size_l10n,omitempty"`
	// Localized message string corresponding to importable_criteria Was added in version 4.0.0.0.
	ImportableCriteriaL10n *string `json:"importable_criteria_l10n,omitempty"`
	RemoteSystem *RemoteSystemInstance `json:"remote_system,omitempty"`
}

// NewImportUniversalVolumeInstance instantiates a new ImportUniversalVolumeInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportUniversalVolumeInstance() *ImportUniversalVolumeInstance {
	this := ImportUniversalVolumeInstance{}
	return &this
}

// NewImportUniversalVolumeInstanceWithDefaults instantiates a new ImportUniversalVolumeInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportUniversalVolumeInstanceWithDefaults() *ImportUniversalVolumeInstance {
	this := ImportUniversalVolumeInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImportUniversalVolumeInstance) SetId(v string) {
	o.Id = &v
}

// GetWwn returns the Wwn field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetWwn() string {
	if o == nil || IsNil(o.Wwn) {
		var ret string
		return ret
	}
	return *o.Wwn
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetWwnOk() (*string, bool) {
	if o == nil || IsNil(o.Wwn) {
		return nil, false
	}
	return o.Wwn, true
}

// HasWwn returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasWwn() bool {
	if o != nil && !IsNil(o.Wwn) {
		return true
	}

	return false
}

// SetWwn gets a reference to the given string and assigns it to the Wwn field.
func (o *ImportUniversalVolumeInstance) SetWwn(v string) {
	o.Wwn = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImportUniversalVolumeInstance) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ImportUniversalVolumeInstance) SetSize(v int64) {
	o.Size = &v
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetBlockSize() VolumeBlockSizeEnum {
	if o == nil || IsNil(o.BlockSize) {
		var ret VolumeBlockSizeEnum
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetBlockSizeOk() (*VolumeBlockSizeEnum, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given VolumeBlockSizeEnum and assigns it to the BlockSize field.
func (o *ImportUniversalVolumeInstance) SetBlockSize(v VolumeBlockSizeEnum) {
	o.BlockSize = &v
}

// GetRemoteSystemId returns the RemoteSystemId field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetRemoteSystemId() string {
	if o == nil || IsNil(o.RemoteSystemId) {
		var ret string
		return ret
	}
	return *o.RemoteSystemId
}

// GetRemoteSystemIdOk returns a tuple with the RemoteSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetRemoteSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteSystemId) {
		return nil, false
	}
	return o.RemoteSystemId, true
}

// HasRemoteSystemId returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasRemoteSystemId() bool {
	if o != nil && !IsNil(o.RemoteSystemId) {
		return true
	}

	return false
}

// SetRemoteSystemId gets a reference to the given string and assigns it to the RemoteSystemId field.
func (o *ImportUniversalVolumeInstance) SetRemoteSystemId(v string) {
	o.RemoteSystemId = &v
}

// GetImportableCriteria returns the ImportableCriteria field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetImportableCriteria() VolumeImportableCriteriaEnum {
	if o == nil || IsNil(o.ImportableCriteria) {
		var ret VolumeImportableCriteriaEnum
		return ret
	}
	return *o.ImportableCriteria
}

// GetImportableCriteriaOk returns a tuple with the ImportableCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetImportableCriteriaOk() (*VolumeImportableCriteriaEnum, bool) {
	if o == nil || IsNil(o.ImportableCriteria) {
		return nil, false
	}
	return o.ImportableCriteria, true
}

// HasImportableCriteria returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasImportableCriteria() bool {
	if o != nil && !IsNil(o.ImportableCriteria) {
		return true
	}

	return false
}

// SetImportableCriteria gets a reference to the given VolumeImportableCriteriaEnum and assigns it to the ImportableCriteria field.
func (o *ImportUniversalVolumeInstance) SetImportableCriteria(v VolumeImportableCriteriaEnum) {
	o.ImportableCriteria = &v
}

// GetImportUniversalConsistencyGroupId returns the ImportUniversalConsistencyGroupId field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetImportUniversalConsistencyGroupId() string {
	if o == nil || IsNil(o.ImportUniversalConsistencyGroupId) {
		var ret string
		return ret
	}
	return *o.ImportUniversalConsistencyGroupId
}

// GetImportUniversalConsistencyGroupIdOk returns a tuple with the ImportUniversalConsistencyGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetImportUniversalConsistencyGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImportUniversalConsistencyGroupId) {
		return nil, false
	}
	return o.ImportUniversalConsistencyGroupId, true
}

// HasImportUniversalConsistencyGroupId returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasImportUniversalConsistencyGroupId() bool {
	if o != nil && !IsNil(o.ImportUniversalConsistencyGroupId) {
		return true
	}

	return false
}

// SetImportUniversalConsistencyGroupId gets a reference to the given string and assigns it to the ImportUniversalConsistencyGroupId field.
func (o *ImportUniversalVolumeInstance) SetImportUniversalConsistencyGroupId(v string) {
	o.ImportUniversalConsistencyGroupId = &v
}

// GetBlockSizeL10n returns the BlockSizeL10n field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetBlockSizeL10n() string {
	if o == nil || IsNil(o.BlockSizeL10n) {
		var ret string
		return ret
	}
	return *o.BlockSizeL10n
}

// GetBlockSizeL10nOk returns a tuple with the BlockSizeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetBlockSizeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.BlockSizeL10n) {
		return nil, false
	}
	return o.BlockSizeL10n, true
}

// HasBlockSizeL10n returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasBlockSizeL10n() bool {
	if o != nil && !IsNil(o.BlockSizeL10n) {
		return true
	}

	return false
}

// SetBlockSizeL10n gets a reference to the given string and assigns it to the BlockSizeL10n field.
func (o *ImportUniversalVolumeInstance) SetBlockSizeL10n(v string) {
	o.BlockSizeL10n = &v
}

// GetImportableCriteriaL10n returns the ImportableCriteriaL10n field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetImportableCriteriaL10n() string {
	if o == nil || IsNil(o.ImportableCriteriaL10n) {
		var ret string
		return ret
	}
	return *o.ImportableCriteriaL10n
}

// GetImportableCriteriaL10nOk returns a tuple with the ImportableCriteriaL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetImportableCriteriaL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ImportableCriteriaL10n) {
		return nil, false
	}
	return o.ImportableCriteriaL10n, true
}

// HasImportableCriteriaL10n returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasImportableCriteriaL10n() bool {
	if o != nil && !IsNil(o.ImportableCriteriaL10n) {
		return true
	}

	return false
}

// SetImportableCriteriaL10n gets a reference to the given string and assigns it to the ImportableCriteriaL10n field.
func (o *ImportUniversalVolumeInstance) SetImportableCriteriaL10n(v string) {
	o.ImportableCriteriaL10n = &v
}

// GetRemoteSystem returns the RemoteSystem field value if set, zero value otherwise.
func (o *ImportUniversalVolumeInstance) GetRemoteSystem() RemoteSystemInstance {
	if o == nil || IsNil(o.RemoteSystem) {
		var ret RemoteSystemInstance
		return ret
	}
	return *o.RemoteSystem
}

// GetRemoteSystemOk returns a tuple with the RemoteSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportUniversalVolumeInstance) GetRemoteSystemOk() (*RemoteSystemInstance, bool) {
	if o == nil || IsNil(o.RemoteSystem) {
		return nil, false
	}
	return o.RemoteSystem, true
}

// HasRemoteSystem returns a boolean if a field has been set.
func (o *ImportUniversalVolumeInstance) HasRemoteSystem() bool {
	if o != nil && !IsNil(o.RemoteSystem) {
		return true
	}

	return false
}

// SetRemoteSystem gets a reference to the given RemoteSystemInstance and assigns it to the RemoteSystem field.
func (o *ImportUniversalVolumeInstance) SetRemoteSystem(v RemoteSystemInstance) {
	o.RemoteSystem = &v
}

func (o ImportUniversalVolumeInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportUniversalVolumeInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Wwn) {
		toSerialize["wwn"] = o.Wwn
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.BlockSize) {
		toSerialize["block_size"] = o.BlockSize
	}
	if !IsNil(o.RemoteSystemId) {
		toSerialize["remote_system_id"] = o.RemoteSystemId
	}
	if !IsNil(o.ImportableCriteria) {
		toSerialize["importable_criteria"] = o.ImportableCriteria
	}
	if !IsNil(o.ImportUniversalConsistencyGroupId) {
		toSerialize["import_universal_consistency_group_id"] = o.ImportUniversalConsistencyGroupId
	}
	if !IsNil(o.BlockSizeL10n) {
		toSerialize["block_size_l10n"] = o.BlockSizeL10n
	}
	if !IsNil(o.ImportableCriteriaL10n) {
		toSerialize["importable_criteria_l10n"] = o.ImportableCriteriaL10n
	}
	if !IsNil(o.RemoteSystem) {
		toSerialize["remote_system"] = o.RemoteSystem
	}
	return toSerialize, nil
}

type NullableImportUniversalVolumeInstance struct {
	value *ImportUniversalVolumeInstance
	isSet bool
}

func (v NullableImportUniversalVolumeInstance) Get() *ImportUniversalVolumeInstance {
	return v.value
}

func (v *NullableImportUniversalVolumeInstance) Set(val *ImportUniversalVolumeInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableImportUniversalVolumeInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableImportUniversalVolumeInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportUniversalVolumeInstance(val *ImportUniversalVolumeInstance) *NullableImportUniversalVolumeInstance {
	return &NullableImportUniversalVolumeInstance{value: val, isSet: true}
}

func (v NullableImportUniversalVolumeInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportUniversalVolumeInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


