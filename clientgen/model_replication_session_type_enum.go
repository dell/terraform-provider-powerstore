/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// ReplicationSessionTypeEnum Type of the replication session: * Asynchronous               - Data is copied asynchronously to the destination resource. * Metro_Active_Active        - Data is copied synchronously in both directions. Both local and remote resource are available for production IO. * Synchronous       - Data is copied synchronously to destination resource.  Was added in version 3.0.0.0.
type ReplicationSessionTypeEnum string

// List of ReplicationSessionTypeEnum
const (
	REPLICATIONSESSIONTYPEENUM_ASYNCHRONOUS ReplicationSessionTypeEnum = "Asynchronous"
	REPLICATIONSESSIONTYPEENUM_METRO_ACTIVE_ACTIVE ReplicationSessionTypeEnum = "Metro_Active_Active"
	REPLICATIONSESSIONTYPEENUM_SYNCHRONOUS ReplicationSessionTypeEnum = "Synchronous"
)

// All allowed values of ReplicationSessionTypeEnum enum
var AllowedReplicationSessionTypeEnumEnumValues = []ReplicationSessionTypeEnum{
	"Asynchronous",
	"Metro_Active_Active",
	"Synchronous",
}

func (v *ReplicationSessionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationSessionTypeEnum(value)
	for _, existing := range AllowedReplicationSessionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationSessionTypeEnum", value)
}

// NewReplicationSessionTypeEnumFromValue returns a pointer to a valid ReplicationSessionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationSessionTypeEnumFromValue(v string) (*ReplicationSessionTypeEnum, error) {
	ev := ReplicationSessionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationSessionTypeEnum: valid values are %v", v, AllowedReplicationSessionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationSessionTypeEnum) IsValid() bool {
	for _, existing := range AllowedReplicationSessionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationSessionTypeEnum value
func (v ReplicationSessionTypeEnum) Ptr() *ReplicationSessionTypeEnum {
	return &v
}

type NullableReplicationSessionTypeEnum struct {
	value *ReplicationSessionTypeEnum
	isSet bool
}

func (v NullableReplicationSessionTypeEnum) Get() *ReplicationSessionTypeEnum {
	return v.value
}

func (v *NullableReplicationSessionTypeEnum) Set(val *ReplicationSessionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationSessionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationSessionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationSessionTypeEnum(val *ReplicationSessionTypeEnum) *NullableReplicationSessionTypeEnum {
	return &NullableReplicationSessionTypeEnum{value: val, isSet: true}
}

func (v NullableReplicationSessionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationSessionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

