/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the FileVirusCheckerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileVirusCheckerInstance{}

// FileVirusCheckerInstance This resource type has queriable association from nas_server
type FileVirusCheckerInstance struct {
	// Unique identifier of the virus checker instance.
	Id *string `json:"id,omitempty"`
	// NAS server that is configured with these anti-virus settings.
	NasServerId *string `json:"nas_server_id,omitempty"`
	// Indicates whether the anti-virus service is enabled on this NAS server. Value are: - true - Anti-virus service is enabled. Each file created or modified by an SMB client is scanned by the third-party anti-virus servers. If a virus is detected, the access to the file system is denied. If third-party anti-virus servers are not available, according the policy, the access to the file systems is denied to prevent potential viruses propagation. - false - Anti-virus service is disabled. File systems of the NAS servers are available for access without virus checking 
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// Indicates whether a virus checker configuration file has been uploaded.
	IsConfigFileUploaded *bool `json:"is_config_file_uploaded,omitempty"`
	// In order to modify the configuration of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true, a virus checker config file may be uploaded on the destination to override the source virus checker config file. Values are:   true - Enable locally set configuration. A virus checker config file may be uploaded on the destination to override the source virus checker config file.   false - Revert to use the source configuration file. Source configuration file changes will propagate directly to this resource.  Was added in version 3.0.0.0.
	IsDestinationOverrideEnabled *bool `json:"is_destination_override_enabled,omitempty"`
	// Virus Checker server IP addresses. The addresses may be IPv4 or IPv6 or FQDN. Was added in version 4.0.0.0.
	IpAddresses []string `json:"ip_addresses,omitempty"`
	// List of files or file extensions to be scanned. * and ? wildcards can be used: - Asterix (*) matches one or more occurrences of any character - Question mark (?) matches a single occurence or any character  Was added in version 4.0.0.0.
	FilesToScan []string `json:"files_to_scan,omitempty"`
	// List of files or file extensions to exclude during scanning. * and ? wildcards can be used: - Asterix (*) matches one or more occurrences of any character - Question mark (?) matches a single occurence or any character  Was added in version 4.0.0.0.
	FilesToExclude []string `json:"files_to_exclude,omitempty"`
	// Files that are larger than this size won''t be sent to the virus checker. 0 means no limit. Was added in version 4.0.0.0.
	MaxFileSize *int64 `json:"max_file_size,omitempty"`
	// Time, in seconds at which frequency the system will verify that the virus checkers are online. Was added in version 4.0.0.0.
	SurveyTime *int32 `json:"survey_time,omitempty"`
	OfflinePolicy *FileVirusCheckerOfflinePolicyEnum `json:"offline_policy,omitempty"`
	// Send an event and block FS I/O when the number of requests waiting for checker is reaching this value. Was added in version 4.0.0.0.
	HighWatermark *int32 `json:"high_watermark,omitempty"`
	// Only applicable after the high water mark is reached. After the high_watermark has been reached, system will wait the number of request to go below low watermark value before sending an event and un-blocking FS I/O. Recommended value is 1/4th of high_watermark value.  Was added in version 4.0.0.0.
	LowWatermark *int32 `json:"low_watermark,omitempty"`
	// User for authentication to the Virus checker server when msrpc request is enabled - MANDATORY IF MSRPC IS EMPLOYED (note that you can use the same user as the 'AV priviledged user' for ease of use, but it could be a different user).  Was added in version 4.0.0.0.
	MsrpcUser *string `json:"msrpc_user,omitempty"`
	// Retry the file scan if the checker does not respond after this time (msrpc only). Was added in version 4.0.0.0.
	RpcRetryTimeout *int32 `json:"rpc_retry_timeout,omitempty"`
	// Time in milliseconds, during which the file scan will be retried (msrpc only). Recommended value is RPC_retry_timeout * 5.  Was added in version 4.0.0.0.
	RpcRequestTimeout *int32 `json:"rpc_request_timeout,omitempty"`
	// TCP port number used by the service to connect to the Virus checker server(s) with HTTP. Default port number is 12228. Set this http_port value to 0 to disable HTTP. When enabled, connection via HTTP is attempted first. If HTTP connection is disabled, or the connection fails, then connection through MSRPC is attempted if all Virus checker server(s) are defined by FQDN. The SMB account of the NAS server in the AD Domain is used to make the connection via MSRPC. Note that HTTP connections should only be used on secure networks, as it is neither SSL nor authenticated. Note: When the http_port is set, the same port number must be specified in the HttpPort entry of the Checker's Windows Registry at: HKEY_LOCAL_MACHINE\\SOFTWARE\\EMC\\CEE\\Configuration  Was added in version 4.0.0.0.
	HttpPort *int32 `json:"http_port,omitempty"`
	// To enable scan on first read the reference time must be set. When the last access time of a file is earlier than the reference time, on access the file is sent to the Virus checker before the access is granted to the client.  Was added in version 4.0.0.0.
	ReferenceTime *time.Time `json:"reference_time,omitempty"`
	// Localized message string corresponding to offline_policy Was added in version 4.0.0.0.
	OfflinePolicyL10n *string `json:"offline_policy_l10n,omitempty"`
	NasServer *NasServerInstance `json:"nas_server,omitempty"`
}

// NewFileVirusCheckerInstance instantiates a new FileVirusCheckerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileVirusCheckerInstance() *FileVirusCheckerInstance {
	this := FileVirusCheckerInstance{}
	var isConfigFileUploaded bool = false
	this.IsConfigFileUploaded = &isConfigFileUploaded
	var isDestinationOverrideEnabled bool = false
	this.IsDestinationOverrideEnabled = &isDestinationOverrideEnabled
	var maxFileSize int64 = 0
	this.MaxFileSize = &maxFileSize
	var surveyTime int32 = 10
	this.SurveyTime = &surveyTime
	var offlinePolicy FileVirusCheckerOfflinePolicyEnum = FILEVIRUSCHECKEROFFLINEPOLICYENUM_ALLOW_ACCESS
	this.OfflinePolicy = &offlinePolicy
	var highWatermark int32 = 200
	this.HighWatermark = &highWatermark
	var lowWatermark int32 = 50
	this.LowWatermark = &lowWatermark
	var rpcRetryTimeout int32 = 5000
	this.RpcRetryTimeout = &rpcRetryTimeout
	var rpcRequestTimeout int32 = 25000
	this.RpcRequestTimeout = &rpcRequestTimeout
	var httpPort int32 = 12228
	this.HttpPort = &httpPort
	return &this
}

// NewFileVirusCheckerInstanceWithDefaults instantiates a new FileVirusCheckerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileVirusCheckerInstanceWithDefaults() *FileVirusCheckerInstance {
	this := FileVirusCheckerInstance{}
	var isConfigFileUploaded bool = false
	this.IsConfigFileUploaded = &isConfigFileUploaded
	var isDestinationOverrideEnabled bool = false
	this.IsDestinationOverrideEnabled = &isDestinationOverrideEnabled
	var maxFileSize int64 = 0
	this.MaxFileSize = &maxFileSize
	var surveyTime int32 = 10
	this.SurveyTime = &surveyTime
	var offlinePolicy FileVirusCheckerOfflinePolicyEnum = FILEVIRUSCHECKEROFFLINEPOLICYENUM_ALLOW_ACCESS
	this.OfflinePolicy = &offlinePolicy
	var highWatermark int32 = 200
	this.HighWatermark = &highWatermark
	var lowWatermark int32 = 50
	this.LowWatermark = &lowWatermark
	var rpcRetryTimeout int32 = 5000
	this.RpcRetryTimeout = &rpcRetryTimeout
	var rpcRequestTimeout int32 = 25000
	this.RpcRequestTimeout = &rpcRequestTimeout
	var httpPort int32 = 12228
	this.HttpPort = &httpPort
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileVirusCheckerInstance) SetId(v string) {
	o.Id = &v
}

// GetNasServerId returns the NasServerId field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetNasServerId() string {
	if o == nil || IsNil(o.NasServerId) {
		var ret string
		return ret
	}
	return *o.NasServerId
}

// GetNasServerIdOk returns a tuple with the NasServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetNasServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NasServerId) {
		return nil, false
	}
	return o.NasServerId, true
}

// HasNasServerId returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasNasServerId() bool {
	if o != nil && !IsNil(o.NasServerId) {
		return true
	}

	return false
}

// SetNasServerId gets a reference to the given string and assigns it to the NasServerId field.
func (o *FileVirusCheckerInstance) SetNasServerId(v string) {
	o.NasServerId = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *FileVirusCheckerInstance) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsConfigFileUploaded returns the IsConfigFileUploaded field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetIsConfigFileUploaded() bool {
	if o == nil || IsNil(o.IsConfigFileUploaded) {
		var ret bool
		return ret
	}
	return *o.IsConfigFileUploaded
}

// GetIsConfigFileUploadedOk returns a tuple with the IsConfigFileUploaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetIsConfigFileUploadedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConfigFileUploaded) {
		return nil, false
	}
	return o.IsConfigFileUploaded, true
}

// HasIsConfigFileUploaded returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasIsConfigFileUploaded() bool {
	if o != nil && !IsNil(o.IsConfigFileUploaded) {
		return true
	}

	return false
}

// SetIsConfigFileUploaded gets a reference to the given bool and assigns it to the IsConfigFileUploaded field.
func (o *FileVirusCheckerInstance) SetIsConfigFileUploaded(v bool) {
	o.IsConfigFileUploaded = &v
}

// GetIsDestinationOverrideEnabled returns the IsDestinationOverrideEnabled field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetIsDestinationOverrideEnabled() bool {
	if o == nil || IsNil(o.IsDestinationOverrideEnabled) {
		var ret bool
		return ret
	}
	return *o.IsDestinationOverrideEnabled
}

// GetIsDestinationOverrideEnabledOk returns a tuple with the IsDestinationOverrideEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetIsDestinationOverrideEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDestinationOverrideEnabled) {
		return nil, false
	}
	return o.IsDestinationOverrideEnabled, true
}

// HasIsDestinationOverrideEnabled returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasIsDestinationOverrideEnabled() bool {
	if o != nil && !IsNil(o.IsDestinationOverrideEnabled) {
		return true
	}

	return false
}

// SetIsDestinationOverrideEnabled gets a reference to the given bool and assigns it to the IsDestinationOverrideEnabled field.
func (o *FileVirusCheckerInstance) SetIsDestinationOverrideEnabled(v bool) {
	o.IsDestinationOverrideEnabled = &v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetIpAddresses() []string {
	if o == nil || IsNil(o.IpAddresses) {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *FileVirusCheckerInstance) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetFilesToScan returns the FilesToScan field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetFilesToScan() []string {
	if o == nil || IsNil(o.FilesToScan) {
		var ret []string
		return ret
	}
	return o.FilesToScan
}

// GetFilesToScanOk returns a tuple with the FilesToScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetFilesToScanOk() ([]string, bool) {
	if o == nil || IsNil(o.FilesToScan) {
		return nil, false
	}
	return o.FilesToScan, true
}

// HasFilesToScan returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasFilesToScan() bool {
	if o != nil && !IsNil(o.FilesToScan) {
		return true
	}

	return false
}

// SetFilesToScan gets a reference to the given []string and assigns it to the FilesToScan field.
func (o *FileVirusCheckerInstance) SetFilesToScan(v []string) {
	o.FilesToScan = v
}

// GetFilesToExclude returns the FilesToExclude field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetFilesToExclude() []string {
	if o == nil || IsNil(o.FilesToExclude) {
		var ret []string
		return ret
	}
	return o.FilesToExclude
}

// GetFilesToExcludeOk returns a tuple with the FilesToExclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetFilesToExcludeOk() ([]string, bool) {
	if o == nil || IsNil(o.FilesToExclude) {
		return nil, false
	}
	return o.FilesToExclude, true
}

// HasFilesToExclude returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasFilesToExclude() bool {
	if o != nil && !IsNil(o.FilesToExclude) {
		return true
	}

	return false
}

// SetFilesToExclude gets a reference to the given []string and assigns it to the FilesToExclude field.
func (o *FileVirusCheckerInstance) SetFilesToExclude(v []string) {
	o.FilesToExclude = v
}

// GetMaxFileSize returns the MaxFileSize field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetMaxFileSize() int64 {
	if o == nil || IsNil(o.MaxFileSize) {
		var ret int64
		return ret
	}
	return *o.MaxFileSize
}

// GetMaxFileSizeOk returns a tuple with the MaxFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetMaxFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxFileSize) {
		return nil, false
	}
	return o.MaxFileSize, true
}

// HasMaxFileSize returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasMaxFileSize() bool {
	if o != nil && !IsNil(o.MaxFileSize) {
		return true
	}

	return false
}

// SetMaxFileSize gets a reference to the given int64 and assigns it to the MaxFileSize field.
func (o *FileVirusCheckerInstance) SetMaxFileSize(v int64) {
	o.MaxFileSize = &v
}

// GetSurveyTime returns the SurveyTime field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetSurveyTime() int32 {
	if o == nil || IsNil(o.SurveyTime) {
		var ret int32
		return ret
	}
	return *o.SurveyTime
}

// GetSurveyTimeOk returns a tuple with the SurveyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetSurveyTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.SurveyTime) {
		return nil, false
	}
	return o.SurveyTime, true
}

// HasSurveyTime returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasSurveyTime() bool {
	if o != nil && !IsNil(o.SurveyTime) {
		return true
	}

	return false
}

// SetSurveyTime gets a reference to the given int32 and assigns it to the SurveyTime field.
func (o *FileVirusCheckerInstance) SetSurveyTime(v int32) {
	o.SurveyTime = &v
}

// GetOfflinePolicy returns the OfflinePolicy field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetOfflinePolicy() FileVirusCheckerOfflinePolicyEnum {
	if o == nil || IsNil(o.OfflinePolicy) {
		var ret FileVirusCheckerOfflinePolicyEnum
		return ret
	}
	return *o.OfflinePolicy
}

// GetOfflinePolicyOk returns a tuple with the OfflinePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetOfflinePolicyOk() (*FileVirusCheckerOfflinePolicyEnum, bool) {
	if o == nil || IsNil(o.OfflinePolicy) {
		return nil, false
	}
	return o.OfflinePolicy, true
}

// HasOfflinePolicy returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasOfflinePolicy() bool {
	if o != nil && !IsNil(o.OfflinePolicy) {
		return true
	}

	return false
}

// SetOfflinePolicy gets a reference to the given FileVirusCheckerOfflinePolicyEnum and assigns it to the OfflinePolicy field.
func (o *FileVirusCheckerInstance) SetOfflinePolicy(v FileVirusCheckerOfflinePolicyEnum) {
	o.OfflinePolicy = &v
}

// GetHighWatermark returns the HighWatermark field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetHighWatermark() int32 {
	if o == nil || IsNil(o.HighWatermark) {
		var ret int32
		return ret
	}
	return *o.HighWatermark
}

// GetHighWatermarkOk returns a tuple with the HighWatermark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetHighWatermarkOk() (*int32, bool) {
	if o == nil || IsNil(o.HighWatermark) {
		return nil, false
	}
	return o.HighWatermark, true
}

// HasHighWatermark returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasHighWatermark() bool {
	if o != nil && !IsNil(o.HighWatermark) {
		return true
	}

	return false
}

// SetHighWatermark gets a reference to the given int32 and assigns it to the HighWatermark field.
func (o *FileVirusCheckerInstance) SetHighWatermark(v int32) {
	o.HighWatermark = &v
}

// GetLowWatermark returns the LowWatermark field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetLowWatermark() int32 {
	if o == nil || IsNil(o.LowWatermark) {
		var ret int32
		return ret
	}
	return *o.LowWatermark
}

// GetLowWatermarkOk returns a tuple with the LowWatermark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetLowWatermarkOk() (*int32, bool) {
	if o == nil || IsNil(o.LowWatermark) {
		return nil, false
	}
	return o.LowWatermark, true
}

// HasLowWatermark returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasLowWatermark() bool {
	if o != nil && !IsNil(o.LowWatermark) {
		return true
	}

	return false
}

// SetLowWatermark gets a reference to the given int32 and assigns it to the LowWatermark field.
func (o *FileVirusCheckerInstance) SetLowWatermark(v int32) {
	o.LowWatermark = &v
}

// GetMsrpcUser returns the MsrpcUser field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetMsrpcUser() string {
	if o == nil || IsNil(o.MsrpcUser) {
		var ret string
		return ret
	}
	return *o.MsrpcUser
}

// GetMsrpcUserOk returns a tuple with the MsrpcUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetMsrpcUserOk() (*string, bool) {
	if o == nil || IsNil(o.MsrpcUser) {
		return nil, false
	}
	return o.MsrpcUser, true
}

// HasMsrpcUser returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasMsrpcUser() bool {
	if o != nil && !IsNil(o.MsrpcUser) {
		return true
	}

	return false
}

// SetMsrpcUser gets a reference to the given string and assigns it to the MsrpcUser field.
func (o *FileVirusCheckerInstance) SetMsrpcUser(v string) {
	o.MsrpcUser = &v
}

// GetRpcRetryTimeout returns the RpcRetryTimeout field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetRpcRetryTimeout() int32 {
	if o == nil || IsNil(o.RpcRetryTimeout) {
		var ret int32
		return ret
	}
	return *o.RpcRetryTimeout
}

// GetRpcRetryTimeoutOk returns a tuple with the RpcRetryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetRpcRetryTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.RpcRetryTimeout) {
		return nil, false
	}
	return o.RpcRetryTimeout, true
}

// HasRpcRetryTimeout returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasRpcRetryTimeout() bool {
	if o != nil && !IsNil(o.RpcRetryTimeout) {
		return true
	}

	return false
}

// SetRpcRetryTimeout gets a reference to the given int32 and assigns it to the RpcRetryTimeout field.
func (o *FileVirusCheckerInstance) SetRpcRetryTimeout(v int32) {
	o.RpcRetryTimeout = &v
}

// GetRpcRequestTimeout returns the RpcRequestTimeout field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetRpcRequestTimeout() int32 {
	if o == nil || IsNil(o.RpcRequestTimeout) {
		var ret int32
		return ret
	}
	return *o.RpcRequestTimeout
}

// GetRpcRequestTimeoutOk returns a tuple with the RpcRequestTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetRpcRequestTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.RpcRequestTimeout) {
		return nil, false
	}
	return o.RpcRequestTimeout, true
}

// HasRpcRequestTimeout returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasRpcRequestTimeout() bool {
	if o != nil && !IsNil(o.RpcRequestTimeout) {
		return true
	}

	return false
}

// SetRpcRequestTimeout gets a reference to the given int32 and assigns it to the RpcRequestTimeout field.
func (o *FileVirusCheckerInstance) SetRpcRequestTimeout(v int32) {
	o.RpcRequestTimeout = &v
}

// GetHttpPort returns the HttpPort field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetHttpPort() int32 {
	if o == nil || IsNil(o.HttpPort) {
		var ret int32
		return ret
	}
	return *o.HttpPort
}

// GetHttpPortOk returns a tuple with the HttpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetHttpPortOk() (*int32, bool) {
	if o == nil || IsNil(o.HttpPort) {
		return nil, false
	}
	return o.HttpPort, true
}

// HasHttpPort returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasHttpPort() bool {
	if o != nil && !IsNil(o.HttpPort) {
		return true
	}

	return false
}

// SetHttpPort gets a reference to the given int32 and assigns it to the HttpPort field.
func (o *FileVirusCheckerInstance) SetHttpPort(v int32) {
	o.HttpPort = &v
}

// GetReferenceTime returns the ReferenceTime field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetReferenceTime() time.Time {
	if o == nil || IsNil(o.ReferenceTime) {
		var ret time.Time
		return ret
	}
	return *o.ReferenceTime
}

// GetReferenceTimeOk returns a tuple with the ReferenceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetReferenceTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReferenceTime) {
		return nil, false
	}
	return o.ReferenceTime, true
}

// HasReferenceTime returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasReferenceTime() bool {
	if o != nil && !IsNil(o.ReferenceTime) {
		return true
	}

	return false
}

// SetReferenceTime gets a reference to the given time.Time and assigns it to the ReferenceTime field.
func (o *FileVirusCheckerInstance) SetReferenceTime(v time.Time) {
	o.ReferenceTime = &v
}

// GetOfflinePolicyL10n returns the OfflinePolicyL10n field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetOfflinePolicyL10n() string {
	if o == nil || IsNil(o.OfflinePolicyL10n) {
		var ret string
		return ret
	}
	return *o.OfflinePolicyL10n
}

// GetOfflinePolicyL10nOk returns a tuple with the OfflinePolicyL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetOfflinePolicyL10nOk() (*string, bool) {
	if o == nil || IsNil(o.OfflinePolicyL10n) {
		return nil, false
	}
	return o.OfflinePolicyL10n, true
}

// HasOfflinePolicyL10n returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasOfflinePolicyL10n() bool {
	if o != nil && !IsNil(o.OfflinePolicyL10n) {
		return true
	}

	return false
}

// SetOfflinePolicyL10n gets a reference to the given string and assigns it to the OfflinePolicyL10n field.
func (o *FileVirusCheckerInstance) SetOfflinePolicyL10n(v string) {
	o.OfflinePolicyL10n = &v
}

// GetNasServer returns the NasServer field value if set, zero value otherwise.
func (o *FileVirusCheckerInstance) GetNasServer() NasServerInstance {
	if o == nil || IsNil(o.NasServer) {
		var ret NasServerInstance
		return ret
	}
	return *o.NasServer
}

// GetNasServerOk returns a tuple with the NasServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVirusCheckerInstance) GetNasServerOk() (*NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServer) {
		return nil, false
	}
	return o.NasServer, true
}

// HasNasServer returns a boolean if a field has been set.
func (o *FileVirusCheckerInstance) HasNasServer() bool {
	if o != nil && !IsNil(o.NasServer) {
		return true
	}

	return false
}

// SetNasServer gets a reference to the given NasServerInstance and assigns it to the NasServer field.
func (o *FileVirusCheckerInstance) SetNasServer(v NasServerInstance) {
	o.NasServer = &v
}

func (o FileVirusCheckerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileVirusCheckerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NasServerId) {
		toSerialize["nas_server_id"] = o.NasServerId
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.IsConfigFileUploaded) {
		toSerialize["is_config_file_uploaded"] = o.IsConfigFileUploaded
	}
	if !IsNil(o.IsDestinationOverrideEnabled) {
		toSerialize["is_destination_override_enabled"] = o.IsDestinationOverrideEnabled
	}
	if !IsNil(o.IpAddresses) {
		toSerialize["ip_addresses"] = o.IpAddresses
	}
	if !IsNil(o.FilesToScan) {
		toSerialize["files_to_scan"] = o.FilesToScan
	}
	if !IsNil(o.FilesToExclude) {
		toSerialize["files_to_exclude"] = o.FilesToExclude
	}
	if !IsNil(o.MaxFileSize) {
		toSerialize["max_file_size"] = o.MaxFileSize
	}
	if !IsNil(o.SurveyTime) {
		toSerialize["survey_time"] = o.SurveyTime
	}
	if !IsNil(o.OfflinePolicy) {
		toSerialize["offline_policy"] = o.OfflinePolicy
	}
	if !IsNil(o.HighWatermark) {
		toSerialize["high_watermark"] = o.HighWatermark
	}
	if !IsNil(o.LowWatermark) {
		toSerialize["low_watermark"] = o.LowWatermark
	}
	if !IsNil(o.MsrpcUser) {
		toSerialize["msrpc_user"] = o.MsrpcUser
	}
	if !IsNil(o.RpcRetryTimeout) {
		toSerialize["rpc_retry_timeout"] = o.RpcRetryTimeout
	}
	if !IsNil(o.RpcRequestTimeout) {
		toSerialize["rpc_request_timeout"] = o.RpcRequestTimeout
	}
	if !IsNil(o.HttpPort) {
		toSerialize["http_port"] = o.HttpPort
	}
	if !IsNil(o.ReferenceTime) {
		toSerialize["reference_time"] = o.ReferenceTime
	}
	if !IsNil(o.OfflinePolicyL10n) {
		toSerialize["offline_policy_l10n"] = o.OfflinePolicyL10n
	}
	if !IsNil(o.NasServer) {
		toSerialize["nas_server"] = o.NasServer
	}
	return toSerialize, nil
}

type NullableFileVirusCheckerInstance struct {
	value *FileVirusCheckerInstance
	isSet bool
}

func (v NullableFileVirusCheckerInstance) Get() *FileVirusCheckerInstance {
	return v.value
}

func (v *NullableFileVirusCheckerInstance) Set(val *FileVirusCheckerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileVirusCheckerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileVirusCheckerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileVirusCheckerInstance(val *FileVirusCheckerInstance) *NullableFileVirusCheckerInstance {
	return &NullableFileVirusCheckerInstance{value: val, isSet: true}
}

func (v NullableFileVirusCheckerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileVirusCheckerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


