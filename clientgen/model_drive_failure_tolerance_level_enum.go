/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// DriveFailureToleranceLevelEnum Possible drive failure tolerance levels. * Single - A single drive failure can be tolerated without data loss. * Double - Two drive failures can be tolerated without data loss. * None - No drive failure can be tolerated without data loss (VSA-only).  Was added in version 2.0.0.0. Values was added in 3.0.0.0: None.
type DriveFailureToleranceLevelEnum string

// List of DriveFailureToleranceLevelEnum
const (
	DRIVEFAILURETOLERANCELEVELENUM_SINGLE DriveFailureToleranceLevelEnum = "Single"
	DRIVEFAILURETOLERANCELEVELENUM_DOUBLE DriveFailureToleranceLevelEnum = "Double"
	DRIVEFAILURETOLERANCELEVELENUM_NONE DriveFailureToleranceLevelEnum = "None"
)

// All allowed values of DriveFailureToleranceLevelEnum enum
var AllowedDriveFailureToleranceLevelEnumEnumValues = []DriveFailureToleranceLevelEnum{
	"Single",
	"Double",
	"None",
}

func (v *DriveFailureToleranceLevelEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DriveFailureToleranceLevelEnum(value)
	for _, existing := range AllowedDriveFailureToleranceLevelEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DriveFailureToleranceLevelEnum", value)
}

// NewDriveFailureToleranceLevelEnumFromValue returns a pointer to a valid DriveFailureToleranceLevelEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDriveFailureToleranceLevelEnumFromValue(v string) (*DriveFailureToleranceLevelEnum, error) {
	ev := DriveFailureToleranceLevelEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DriveFailureToleranceLevelEnum: valid values are %v", v, AllowedDriveFailureToleranceLevelEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DriveFailureToleranceLevelEnum) IsValid() bool {
	for _, existing := range AllowedDriveFailureToleranceLevelEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DriveFailureToleranceLevelEnum value
func (v DriveFailureToleranceLevelEnum) Ptr() *DriveFailureToleranceLevelEnum {
	return &v
}

type NullableDriveFailureToleranceLevelEnum struct {
	value *DriveFailureToleranceLevelEnum
	isSet bool
}

func (v NullableDriveFailureToleranceLevelEnum) Get() *DriveFailureToleranceLevelEnum {
	return v.value
}

func (v *NullableDriveFailureToleranceLevelEnum) Set(val *DriveFailureToleranceLevelEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDriveFailureToleranceLevelEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDriveFailureToleranceLevelEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriveFailureToleranceLevelEnum(val *DriveFailureToleranceLevelEnum) *NullableDriveFailureToleranceLevelEnum {
	return &NullableDriveFailureToleranceLevelEnum{value: val, isSet: true}
}

func (v NullableDriveFailureToleranceLevelEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriveFailureToleranceLevelEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

