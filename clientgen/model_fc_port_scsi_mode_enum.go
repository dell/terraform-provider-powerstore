/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// FcPortScsiModeEnum SCSI mode of the port. Possible values are: * Dual - The port is in dual mode as both initiator and target. * Target- The port is only target.  Was added in version 3.0.0.0.
type FcPortScsiModeEnum string

// List of FcPortScsiModeEnum
const (
	FCPORTSCSIMODEENUM_DUAL FcPortScsiModeEnum = "Dual"
	FCPORTSCSIMODEENUM_TARGET FcPortScsiModeEnum = "Target"
)

// All allowed values of FcPortScsiModeEnum enum
var AllowedFcPortScsiModeEnumEnumValues = []FcPortScsiModeEnum{
	"Dual",
	"Target",
}

func (v *FcPortScsiModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FcPortScsiModeEnum(value)
	for _, existing := range AllowedFcPortScsiModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FcPortScsiModeEnum", value)
}

// NewFcPortScsiModeEnumFromValue returns a pointer to a valid FcPortScsiModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFcPortScsiModeEnumFromValue(v string) (*FcPortScsiModeEnum, error) {
	ev := FcPortScsiModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FcPortScsiModeEnum: valid values are %v", v, AllowedFcPortScsiModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FcPortScsiModeEnum) IsValid() bool {
	for _, existing := range AllowedFcPortScsiModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FcPortScsiModeEnum value
func (v FcPortScsiModeEnum) Ptr() *FcPortScsiModeEnum {
	return &v
}

type NullableFcPortScsiModeEnum struct {
	value *FcPortScsiModeEnum
	isSet bool
}

func (v NullableFcPortScsiModeEnum) Get() *FcPortScsiModeEnum {
	return v.value
}

func (v *NullableFcPortScsiModeEnum) Set(val *FcPortScsiModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFcPortScsiModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFcPortScsiModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcPortScsiModeEnum(val *FcPortScsiModeEnum) *NullableFcPortScsiModeEnum {
	return &NullableFcPortScsiModeEnum{value: val, isSet: true}
}

func (v NullableFcPortScsiModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFcPortScsiModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

