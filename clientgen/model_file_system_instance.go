/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the FileSystemInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSystemInstance{}

// FileSystemInstance Properties of a file system. This resource type has queriable associations from nas_server, policy, file_tree_quota, file_user_quota, nfs_export, smb_share
type FileSystemInstance struct {
	// Unique identifier of the file system.
	Id *string `json:"id,omitempty"`
	// Name of the file system.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Description of the file system.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the NAS Server on which the file system is mounted.
	NasServerId *string `json:"nas_server_id,omitempty"`
	// Unique identifier of the object of the parent of this file system (only applies to clones and snapshots). If the parent of a clone has been deleted the object_id will contain the null GUID 00000000-0000-0000-0000-000000000000.
	ParentId *string `json:"parent_id,omitempty"`
	FilesystemType *FileSystemTypeEnum `json:"filesystem_type,omitempty"`
	// Size, in bytes, presented to the host or end user. Value is always rounded up to next MB. 
	SizeTotal *int64 `json:"size_total,omitempty"`
	// Size used, in bytes, for the data and metadata of the file system. Value is always rounded up to next MB. 
	SizeUsed *int64 `json:"size_used,omitempty"`
	ConfigType *FileSystemConfigTypeEnum `json:"config_type,omitempty"`
	// Unique identifier of the protection policy applied to the file system.
	ProtectionPolicyId *string `json:"protection_policy_id,omitempty"`
	// Unique identifier of the File_Performance type policy applied to the file_system. If empty and there is no performance policy set for the parent nas_server, then no performance policy is governing the file_system.  Was added in version 4.1.0.0.
	PerformancePolicyId *string `json:"performance_policy_id,omitempty"`
	AccessPolicy *FileSystemAccessPolicyEnum `json:"access_policy,omitempty"`
	LockingPolicy *FileSystemLockingPolicyEnum `json:"locking_policy,omitempty"`
	FolderRenamePolicy *FileSystemFolderRenamePolicyEnum `json:"folder_rename_policy,omitempty"`
	// Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system. 
	IsSmbSyncWritesEnabled *bool `json:"is_smb_sync_writes_enabled,omitempty"`
	// Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system. 
	IsSmbOpLocksEnabled *bool `json:"is_smb_op_locks_enabled,omitempty"`
	// Indicates whether notifications of changes to a directory file structure are enabled. * true - Change directory notifications are disabled. * false - Change directory notifications are enabled. 
	IsSmbNoNotifyEnabled *bool `json:"is_smb_no_notify_enabled,omitempty"`
	// Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications are disabled on the file system. 
	IsSmbNotifyOnAccessEnabled *bool `json:"is_smb_notify_on_access_enabled,omitempty"`
	// Indicates whether file writes notifications are enabled on the file system. Values are: * true - File writes notification are enabled on the file system. * false - File writes notifications are disabled on the file system. 
	IsSmbNotifyOnWriteEnabled *bool `json:"is_smb_notify_on_write_enabled,omitempty"`
	// Lowest directory level to which the enabled notifications apply, if any.
	SmbNotifyOnChangeDirDepth *int32 `json:"smb_notify_on_change_dir_depth,omitempty"`
	// Indicates whether asynchronous MTIME is enabled on the file system. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system. 
	IsAsyncMTimeEnabled *bool `json:"is_async_MTime_enabled,omitempty"`
	// Indicates whether quota is enabled. Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced. 
	IsQuotaEnabled *bool `json:"is_quota_enabled,omitempty"`
	// Grace period of soft limit (seconds):  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds). 
	GracePeriod *int32 `json:"grace_period,omitempty"`
	// Default hard limit of user quotas and tree quotas (bytes). (0 means 'No limitation'. This value can be used to compute the amount of space consumed without limiting the space). 
	DefaultHardLimit *int64 `json:"default_hard_limit,omitempty"`
	// Default soft limit of user quotas and tree quotas (bytes). (0 means 'No limitation') 
	DefaultSoftLimit *int64 `json:"default_soft_limit,omitempty"`
	// Time, in seconds, when the snapshot was created.
	CreationTimestamp *time.Time `json:"creation_timestamp,omitempty"`
	// Time, in seconds, when the snapshot will expire.
	ExpirationTimestamp *time.Time `json:"expiration_timestamp,omitempty"`
	// Time, in seconds, when the snapshot was last refreshed.
	LastRefreshTimestamp *time.Time `json:"last_refresh_timestamp,omitempty"`
	// If not mounted, and was previously mounted, the time (in seconds) of last mount. If never mounted, the value will be zero.
	LastWritableTimestamp *time.Time `json:"last_writable_timestamp,omitempty"`
	// Indicates whether the snapshot may have changed since it was created. Values are: * true - Snapshot is or was shared with read/write access. * false - Snapshot was never shared. 
	IsModified *bool `json:"is_modified,omitempty"`
	AccessType *FileSystemSnapshotAccessTypeEnum `json:"access_type,omitempty"`
	CreatorType *FileSystemSnapshotCreatorTypeEnum `json:"creator_type,omitempty"`
	FileEventsPublishingMode *FileEventsPublishingModeEnum `json:"file_events_publishing_mode,omitempty"`
	FlrAttributes *FlrInstance `json:"flr_attributes,omitempty"`
	HostIoSize *FileSystemHostIoSizeEnum `json:"host_io_size,omitempty"`
	// Indicates whether a snapshot type filesystem is secure: * true - The snapshot is read-only and cannot be deleted until it has expired.   The expiration time of secure snapshot cannot be reduced and cannot be set to infinite.   The value of is_secure cannot be changed from true to false. * false - A normal snapshot.  Was added in version 4.1.0.0.
	IsSecure *bool `json:"is_secure,omitempty"`
	// Localized message string corresponding to filesystem_type
	FilesystemTypeL10n *string `json:"filesystem_type_l10n,omitempty"`
	// Localized message string corresponding to config_type Was added in version 3.0.0.0.
	ConfigTypeL10n *string `json:"config_type_l10n,omitempty"`
	// Localized message string corresponding to access_policy
	AccessPolicyL10n *string `json:"access_policy_l10n,omitempty"`
	// Localized message string corresponding to locking_policy
	LockingPolicyL10n *string `json:"locking_policy_l10n,omitempty"`
	// Localized message string corresponding to folder_rename_policy
	FolderRenamePolicyL10n *string `json:"folder_rename_policy_l10n,omitempty"`
	// Localized message string corresponding to access_type
	AccessTypeL10n *string `json:"access_type_l10n,omitempty"`
	// Localized message string corresponding to creator_type
	CreatorTypeL10n *string `json:"creator_type_l10n,omitempty"`
	// Localized message string corresponding to file_events_publishing_mode Was added in version 3.0.0.0.
	FileEventsPublishingModeL10n *string `json:"file_events_publishing_mode_l10n,omitempty"`
	// Localized message string corresponding to host_io_size Was added in version 3.0.0.0.
	HostIoSizeL10n *string `json:"host_io_size_l10n,omitempty"`
	NasServer *NasServerInstance `json:"nas_server,omitempty"`
	ProtectionPolicy *PolicyInstance `json:"protection_policy,omitempty"`
	PerformancePolicy *PolicyInstance `json:"performance_policy,omitempty"`
	// This is the inverse of the resource type file_tree_quota association.
	FileTreeQuotas []FileTreeQuotaInstance `json:"file_tree_quotas,omitempty"`
	// This is the inverse of the resource type file_user_quota association.
	FileUserQuotas []FileUserQuotaInstance `json:"file_user_quotas,omitempty"`
	// This is the inverse of the resource type nfs_export association.
	NfsExports []NfsExportInstance `json:"nfs_exports,omitempty"`
	// This is the inverse of the resource type smb_share association.
	SmbShares []SmbShareInstance `json:"smb_shares,omitempty"`
}

// NewFileSystemInstance instantiates a new FileSystemInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSystemInstance() *FileSystemInstance {
	this := FileSystemInstance{}
	var filesystemType FileSystemTypeEnum = FILESYSTEMTYPEENUM_PRIMARY
	this.FilesystemType = &filesystemType
	var configType FileSystemConfigTypeEnum = FILESYSTEMCONFIGTYPEENUM_GENERAL
	this.ConfigType = &configType
	var accessPolicy FileSystemAccessPolicyEnum = FILESYSTEMACCESSPOLICYENUM_NATIVE
	this.AccessPolicy = &accessPolicy
	var lockingPolicy FileSystemLockingPolicyEnum = FILESYSTEMLOCKINGPOLICYENUM_ADVISORY
	this.LockingPolicy = &lockingPolicy
	var folderRenamePolicy FileSystemFolderRenamePolicyEnum = FILESYSTEMFOLDERRENAMEPOLICYENUM_ALL_FORBIDDEN
	this.FolderRenamePolicy = &folderRenamePolicy
	var gracePeriod int32 = -1
	this.GracePeriod = &gracePeriod
	var accessType FileSystemSnapshotAccessTypeEnum = FILESYSTEMSNAPSHOTACCESSTYPEENUM_SNAPSHOT
	this.AccessType = &accessType
	var fileEventsPublishingMode FileEventsPublishingModeEnum = FILEEVENTSPUBLISHINGMODEENUM_NONE
	this.FileEventsPublishingMode = &fileEventsPublishingMode
	return &this
}

// NewFileSystemInstanceWithDefaults instantiates a new FileSystemInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSystemInstanceWithDefaults() *FileSystemInstance {
	this := FileSystemInstance{}
	var filesystemType FileSystemTypeEnum = FILESYSTEMTYPEENUM_PRIMARY
	this.FilesystemType = &filesystemType
	var configType FileSystemConfigTypeEnum = FILESYSTEMCONFIGTYPEENUM_GENERAL
	this.ConfigType = &configType
	var accessPolicy FileSystemAccessPolicyEnum = FILESYSTEMACCESSPOLICYENUM_NATIVE
	this.AccessPolicy = &accessPolicy
	var lockingPolicy FileSystemLockingPolicyEnum = FILESYSTEMLOCKINGPOLICYENUM_ADVISORY
	this.LockingPolicy = &lockingPolicy
	var folderRenamePolicy FileSystemFolderRenamePolicyEnum = FILESYSTEMFOLDERRENAMEPOLICYENUM_ALL_FORBIDDEN
	this.FolderRenamePolicy = &folderRenamePolicy
	var gracePeriod int32 = -1
	this.GracePeriod = &gracePeriod
	var accessType FileSystemSnapshotAccessTypeEnum = FILESYSTEMSNAPSHOTACCESSTYPEENUM_SNAPSHOT
	this.AccessType = &accessType
	var fileEventsPublishingMode FileEventsPublishingModeEnum = FILEEVENTSPUBLISHINGMODEENUM_NONE
	this.FileEventsPublishingMode = &fileEventsPublishingMode
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileSystemInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileSystemInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileSystemInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileSystemInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileSystemInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileSystemInstance) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FileSystemInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FileSystemInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FileSystemInstance) SetDescription(v string) {
	o.Description = &v
}

// GetNasServerId returns the NasServerId field value if set, zero value otherwise.
func (o *FileSystemInstance) GetNasServerId() string {
	if o == nil || IsNil(o.NasServerId) {
		var ret string
		return ret
	}
	return *o.NasServerId
}

// GetNasServerIdOk returns a tuple with the NasServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetNasServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NasServerId) {
		return nil, false
	}
	return o.NasServerId, true
}

// HasNasServerId returns a boolean if a field has been set.
func (o *FileSystemInstance) HasNasServerId() bool {
	if o != nil && !IsNil(o.NasServerId) {
		return true
	}

	return false
}

// SetNasServerId gets a reference to the given string and assigns it to the NasServerId field.
func (o *FileSystemInstance) SetNasServerId(v string) {
	o.NasServerId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *FileSystemInstance) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *FileSystemInstance) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *FileSystemInstance) SetParentId(v string) {
	o.ParentId = &v
}

// GetFilesystemType returns the FilesystemType field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFilesystemType() FileSystemTypeEnum {
	if o == nil || IsNil(o.FilesystemType) {
		var ret FileSystemTypeEnum
		return ret
	}
	return *o.FilesystemType
}

// GetFilesystemTypeOk returns a tuple with the FilesystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFilesystemTypeOk() (*FileSystemTypeEnum, bool) {
	if o == nil || IsNil(o.FilesystemType) {
		return nil, false
	}
	return o.FilesystemType, true
}

// HasFilesystemType returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFilesystemType() bool {
	if o != nil && !IsNil(o.FilesystemType) {
		return true
	}

	return false
}

// SetFilesystemType gets a reference to the given FileSystemTypeEnum and assigns it to the FilesystemType field.
func (o *FileSystemInstance) SetFilesystemType(v FileSystemTypeEnum) {
	o.FilesystemType = &v
}

// GetSizeTotal returns the SizeTotal field value if set, zero value otherwise.
func (o *FileSystemInstance) GetSizeTotal() int64 {
	if o == nil || IsNil(o.SizeTotal) {
		var ret int64
		return ret
	}
	return *o.SizeTotal
}

// GetSizeTotalOk returns a tuple with the SizeTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetSizeTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeTotal) {
		return nil, false
	}
	return o.SizeTotal, true
}

// HasSizeTotal returns a boolean if a field has been set.
func (o *FileSystemInstance) HasSizeTotal() bool {
	if o != nil && !IsNil(o.SizeTotal) {
		return true
	}

	return false
}

// SetSizeTotal gets a reference to the given int64 and assigns it to the SizeTotal field.
func (o *FileSystemInstance) SetSizeTotal(v int64) {
	o.SizeTotal = &v
}

// GetSizeUsed returns the SizeUsed field value if set, zero value otherwise.
func (o *FileSystemInstance) GetSizeUsed() int64 {
	if o == nil || IsNil(o.SizeUsed) {
		var ret int64
		return ret
	}
	return *o.SizeUsed
}

// GetSizeUsedOk returns a tuple with the SizeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetSizeUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeUsed) {
		return nil, false
	}
	return o.SizeUsed, true
}

// HasSizeUsed returns a boolean if a field has been set.
func (o *FileSystemInstance) HasSizeUsed() bool {
	if o != nil && !IsNil(o.SizeUsed) {
		return true
	}

	return false
}

// SetSizeUsed gets a reference to the given int64 and assigns it to the SizeUsed field.
func (o *FileSystemInstance) SetSizeUsed(v int64) {
	o.SizeUsed = &v
}

// GetConfigType returns the ConfigType field value if set, zero value otherwise.
func (o *FileSystemInstance) GetConfigType() FileSystemConfigTypeEnum {
	if o == nil || IsNil(o.ConfigType) {
		var ret FileSystemConfigTypeEnum
		return ret
	}
	return *o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetConfigTypeOk() (*FileSystemConfigTypeEnum, bool) {
	if o == nil || IsNil(o.ConfigType) {
		return nil, false
	}
	return o.ConfigType, true
}

// HasConfigType returns a boolean if a field has been set.
func (o *FileSystemInstance) HasConfigType() bool {
	if o != nil && !IsNil(o.ConfigType) {
		return true
	}

	return false
}

// SetConfigType gets a reference to the given FileSystemConfigTypeEnum and assigns it to the ConfigType field.
func (o *FileSystemInstance) SetConfigType(v FileSystemConfigTypeEnum) {
	o.ConfigType = &v
}

// GetProtectionPolicyId returns the ProtectionPolicyId field value if set, zero value otherwise.
func (o *FileSystemInstance) GetProtectionPolicyId() string {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyId
}

// GetProtectionPolicyIdOk returns a tuple with the ProtectionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetProtectionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		return nil, false
	}
	return o.ProtectionPolicyId, true
}

// HasProtectionPolicyId returns a boolean if a field has been set.
func (o *FileSystemInstance) HasProtectionPolicyId() bool {
	if o != nil && !IsNil(o.ProtectionPolicyId) {
		return true
	}

	return false
}

// SetProtectionPolicyId gets a reference to the given string and assigns it to the ProtectionPolicyId field.
func (o *FileSystemInstance) SetProtectionPolicyId(v string) {
	o.ProtectionPolicyId = &v
}

// GetPerformancePolicyId returns the PerformancePolicyId field value if set, zero value otherwise.
func (o *FileSystemInstance) GetPerformancePolicyId() string {
	if o == nil || IsNil(o.PerformancePolicyId) {
		var ret string
		return ret
	}
	return *o.PerformancePolicyId
}

// GetPerformancePolicyIdOk returns a tuple with the PerformancePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetPerformancePolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PerformancePolicyId) {
		return nil, false
	}
	return o.PerformancePolicyId, true
}

// HasPerformancePolicyId returns a boolean if a field has been set.
func (o *FileSystemInstance) HasPerformancePolicyId() bool {
	if o != nil && !IsNil(o.PerformancePolicyId) {
		return true
	}

	return false
}

// SetPerformancePolicyId gets a reference to the given string and assigns it to the PerformancePolicyId field.
func (o *FileSystemInstance) SetPerformancePolicyId(v string) {
	o.PerformancePolicyId = &v
}

// GetAccessPolicy returns the AccessPolicy field value if set, zero value otherwise.
func (o *FileSystemInstance) GetAccessPolicy() FileSystemAccessPolicyEnum {
	if o == nil || IsNil(o.AccessPolicy) {
		var ret FileSystemAccessPolicyEnum
		return ret
	}
	return *o.AccessPolicy
}

// GetAccessPolicyOk returns a tuple with the AccessPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetAccessPolicyOk() (*FileSystemAccessPolicyEnum, bool) {
	if o == nil || IsNil(o.AccessPolicy) {
		return nil, false
	}
	return o.AccessPolicy, true
}

// HasAccessPolicy returns a boolean if a field has been set.
func (o *FileSystemInstance) HasAccessPolicy() bool {
	if o != nil && !IsNil(o.AccessPolicy) {
		return true
	}

	return false
}

// SetAccessPolicy gets a reference to the given FileSystemAccessPolicyEnum and assigns it to the AccessPolicy field.
func (o *FileSystemInstance) SetAccessPolicy(v FileSystemAccessPolicyEnum) {
	o.AccessPolicy = &v
}

// GetLockingPolicy returns the LockingPolicy field value if set, zero value otherwise.
func (o *FileSystemInstance) GetLockingPolicy() FileSystemLockingPolicyEnum {
	if o == nil || IsNil(o.LockingPolicy) {
		var ret FileSystemLockingPolicyEnum
		return ret
	}
	return *o.LockingPolicy
}

// GetLockingPolicyOk returns a tuple with the LockingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetLockingPolicyOk() (*FileSystemLockingPolicyEnum, bool) {
	if o == nil || IsNil(o.LockingPolicy) {
		return nil, false
	}
	return o.LockingPolicy, true
}

// HasLockingPolicy returns a boolean if a field has been set.
func (o *FileSystemInstance) HasLockingPolicy() bool {
	if o != nil && !IsNil(o.LockingPolicy) {
		return true
	}

	return false
}

// SetLockingPolicy gets a reference to the given FileSystemLockingPolicyEnum and assigns it to the LockingPolicy field.
func (o *FileSystemInstance) SetLockingPolicy(v FileSystemLockingPolicyEnum) {
	o.LockingPolicy = &v
}

// GetFolderRenamePolicy returns the FolderRenamePolicy field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFolderRenamePolicy() FileSystemFolderRenamePolicyEnum {
	if o == nil || IsNil(o.FolderRenamePolicy) {
		var ret FileSystemFolderRenamePolicyEnum
		return ret
	}
	return *o.FolderRenamePolicy
}

// GetFolderRenamePolicyOk returns a tuple with the FolderRenamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFolderRenamePolicyOk() (*FileSystemFolderRenamePolicyEnum, bool) {
	if o == nil || IsNil(o.FolderRenamePolicy) {
		return nil, false
	}
	return o.FolderRenamePolicy, true
}

// HasFolderRenamePolicy returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFolderRenamePolicy() bool {
	if o != nil && !IsNil(o.FolderRenamePolicy) {
		return true
	}

	return false
}

// SetFolderRenamePolicy gets a reference to the given FileSystemFolderRenamePolicyEnum and assigns it to the FolderRenamePolicy field.
func (o *FileSystemInstance) SetFolderRenamePolicy(v FileSystemFolderRenamePolicyEnum) {
	o.FolderRenamePolicy = &v
}

// GetIsSmbSyncWritesEnabled returns the IsSmbSyncWritesEnabled field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsSmbSyncWritesEnabled() bool {
	if o == nil || IsNil(o.IsSmbSyncWritesEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSmbSyncWritesEnabled
}

// GetIsSmbSyncWritesEnabledOk returns a tuple with the IsSmbSyncWritesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsSmbSyncWritesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmbSyncWritesEnabled) {
		return nil, false
	}
	return o.IsSmbSyncWritesEnabled, true
}

// HasIsSmbSyncWritesEnabled returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsSmbSyncWritesEnabled() bool {
	if o != nil && !IsNil(o.IsSmbSyncWritesEnabled) {
		return true
	}

	return false
}

// SetIsSmbSyncWritesEnabled gets a reference to the given bool and assigns it to the IsSmbSyncWritesEnabled field.
func (o *FileSystemInstance) SetIsSmbSyncWritesEnabled(v bool) {
	o.IsSmbSyncWritesEnabled = &v
}

// GetIsSmbOpLocksEnabled returns the IsSmbOpLocksEnabled field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsSmbOpLocksEnabled() bool {
	if o == nil || IsNil(o.IsSmbOpLocksEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSmbOpLocksEnabled
}

// GetIsSmbOpLocksEnabledOk returns a tuple with the IsSmbOpLocksEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsSmbOpLocksEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmbOpLocksEnabled) {
		return nil, false
	}
	return o.IsSmbOpLocksEnabled, true
}

// HasIsSmbOpLocksEnabled returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsSmbOpLocksEnabled() bool {
	if o != nil && !IsNil(o.IsSmbOpLocksEnabled) {
		return true
	}

	return false
}

// SetIsSmbOpLocksEnabled gets a reference to the given bool and assigns it to the IsSmbOpLocksEnabled field.
func (o *FileSystemInstance) SetIsSmbOpLocksEnabled(v bool) {
	o.IsSmbOpLocksEnabled = &v
}

// GetIsSmbNoNotifyEnabled returns the IsSmbNoNotifyEnabled field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsSmbNoNotifyEnabled() bool {
	if o == nil || IsNil(o.IsSmbNoNotifyEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSmbNoNotifyEnabled
}

// GetIsSmbNoNotifyEnabledOk returns a tuple with the IsSmbNoNotifyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsSmbNoNotifyEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmbNoNotifyEnabled) {
		return nil, false
	}
	return o.IsSmbNoNotifyEnabled, true
}

// HasIsSmbNoNotifyEnabled returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsSmbNoNotifyEnabled() bool {
	if o != nil && !IsNil(o.IsSmbNoNotifyEnabled) {
		return true
	}

	return false
}

// SetIsSmbNoNotifyEnabled gets a reference to the given bool and assigns it to the IsSmbNoNotifyEnabled field.
func (o *FileSystemInstance) SetIsSmbNoNotifyEnabled(v bool) {
	o.IsSmbNoNotifyEnabled = &v
}

// GetIsSmbNotifyOnAccessEnabled returns the IsSmbNotifyOnAccessEnabled field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsSmbNotifyOnAccessEnabled() bool {
	if o == nil || IsNil(o.IsSmbNotifyOnAccessEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSmbNotifyOnAccessEnabled
}

// GetIsSmbNotifyOnAccessEnabledOk returns a tuple with the IsSmbNotifyOnAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsSmbNotifyOnAccessEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmbNotifyOnAccessEnabled) {
		return nil, false
	}
	return o.IsSmbNotifyOnAccessEnabled, true
}

// HasIsSmbNotifyOnAccessEnabled returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsSmbNotifyOnAccessEnabled() bool {
	if o != nil && !IsNil(o.IsSmbNotifyOnAccessEnabled) {
		return true
	}

	return false
}

// SetIsSmbNotifyOnAccessEnabled gets a reference to the given bool and assigns it to the IsSmbNotifyOnAccessEnabled field.
func (o *FileSystemInstance) SetIsSmbNotifyOnAccessEnabled(v bool) {
	o.IsSmbNotifyOnAccessEnabled = &v
}

// GetIsSmbNotifyOnWriteEnabled returns the IsSmbNotifyOnWriteEnabled field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsSmbNotifyOnWriteEnabled() bool {
	if o == nil || IsNil(o.IsSmbNotifyOnWriteEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSmbNotifyOnWriteEnabled
}

// GetIsSmbNotifyOnWriteEnabledOk returns a tuple with the IsSmbNotifyOnWriteEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsSmbNotifyOnWriteEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmbNotifyOnWriteEnabled) {
		return nil, false
	}
	return o.IsSmbNotifyOnWriteEnabled, true
}

// HasIsSmbNotifyOnWriteEnabled returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsSmbNotifyOnWriteEnabled() bool {
	if o != nil && !IsNil(o.IsSmbNotifyOnWriteEnabled) {
		return true
	}

	return false
}

// SetIsSmbNotifyOnWriteEnabled gets a reference to the given bool and assigns it to the IsSmbNotifyOnWriteEnabled field.
func (o *FileSystemInstance) SetIsSmbNotifyOnWriteEnabled(v bool) {
	o.IsSmbNotifyOnWriteEnabled = &v
}

// GetSmbNotifyOnChangeDirDepth returns the SmbNotifyOnChangeDirDepth field value if set, zero value otherwise.
func (o *FileSystemInstance) GetSmbNotifyOnChangeDirDepth() int32 {
	if o == nil || IsNil(o.SmbNotifyOnChangeDirDepth) {
		var ret int32
		return ret
	}
	return *o.SmbNotifyOnChangeDirDepth
}

// GetSmbNotifyOnChangeDirDepthOk returns a tuple with the SmbNotifyOnChangeDirDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetSmbNotifyOnChangeDirDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.SmbNotifyOnChangeDirDepth) {
		return nil, false
	}
	return o.SmbNotifyOnChangeDirDepth, true
}

// HasSmbNotifyOnChangeDirDepth returns a boolean if a field has been set.
func (o *FileSystemInstance) HasSmbNotifyOnChangeDirDepth() bool {
	if o != nil && !IsNil(o.SmbNotifyOnChangeDirDepth) {
		return true
	}

	return false
}

// SetSmbNotifyOnChangeDirDepth gets a reference to the given int32 and assigns it to the SmbNotifyOnChangeDirDepth field.
func (o *FileSystemInstance) SetSmbNotifyOnChangeDirDepth(v int32) {
	o.SmbNotifyOnChangeDirDepth = &v
}

// GetIsAsyncMTimeEnabled returns the IsAsyncMTimeEnabled field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsAsyncMTimeEnabled() bool {
	if o == nil || IsNil(o.IsAsyncMTimeEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAsyncMTimeEnabled
}

// GetIsAsyncMTimeEnabledOk returns a tuple with the IsAsyncMTimeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsAsyncMTimeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAsyncMTimeEnabled) {
		return nil, false
	}
	return o.IsAsyncMTimeEnabled, true
}

// HasIsAsyncMTimeEnabled returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsAsyncMTimeEnabled() bool {
	if o != nil && !IsNil(o.IsAsyncMTimeEnabled) {
		return true
	}

	return false
}

// SetIsAsyncMTimeEnabled gets a reference to the given bool and assigns it to the IsAsyncMTimeEnabled field.
func (o *FileSystemInstance) SetIsAsyncMTimeEnabled(v bool) {
	o.IsAsyncMTimeEnabled = &v
}

// GetIsQuotaEnabled returns the IsQuotaEnabled field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsQuotaEnabled() bool {
	if o == nil || IsNil(o.IsQuotaEnabled) {
		var ret bool
		return ret
	}
	return *o.IsQuotaEnabled
}

// GetIsQuotaEnabledOk returns a tuple with the IsQuotaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsQuotaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQuotaEnabled) {
		return nil, false
	}
	return o.IsQuotaEnabled, true
}

// HasIsQuotaEnabled returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsQuotaEnabled() bool {
	if o != nil && !IsNil(o.IsQuotaEnabled) {
		return true
	}

	return false
}

// SetIsQuotaEnabled gets a reference to the given bool and assigns it to the IsQuotaEnabled field.
func (o *FileSystemInstance) SetIsQuotaEnabled(v bool) {
	o.IsQuotaEnabled = &v
}

// GetGracePeriod returns the GracePeriod field value if set, zero value otherwise.
func (o *FileSystemInstance) GetGracePeriod() int32 {
	if o == nil || IsNil(o.GracePeriod) {
		var ret int32
		return ret
	}
	return *o.GracePeriod
}

// GetGracePeriodOk returns a tuple with the GracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetGracePeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.GracePeriod) {
		return nil, false
	}
	return o.GracePeriod, true
}

// HasGracePeriod returns a boolean if a field has been set.
func (o *FileSystemInstance) HasGracePeriod() bool {
	if o != nil && !IsNil(o.GracePeriod) {
		return true
	}

	return false
}

// SetGracePeriod gets a reference to the given int32 and assigns it to the GracePeriod field.
func (o *FileSystemInstance) SetGracePeriod(v int32) {
	o.GracePeriod = &v
}

// GetDefaultHardLimit returns the DefaultHardLimit field value if set, zero value otherwise.
func (o *FileSystemInstance) GetDefaultHardLimit() int64 {
	if o == nil || IsNil(o.DefaultHardLimit) {
		var ret int64
		return ret
	}
	return *o.DefaultHardLimit
}

// GetDefaultHardLimitOk returns a tuple with the DefaultHardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetDefaultHardLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultHardLimit) {
		return nil, false
	}
	return o.DefaultHardLimit, true
}

// HasDefaultHardLimit returns a boolean if a field has been set.
func (o *FileSystemInstance) HasDefaultHardLimit() bool {
	if o != nil && !IsNil(o.DefaultHardLimit) {
		return true
	}

	return false
}

// SetDefaultHardLimit gets a reference to the given int64 and assigns it to the DefaultHardLimit field.
func (o *FileSystemInstance) SetDefaultHardLimit(v int64) {
	o.DefaultHardLimit = &v
}

// GetDefaultSoftLimit returns the DefaultSoftLimit field value if set, zero value otherwise.
func (o *FileSystemInstance) GetDefaultSoftLimit() int64 {
	if o == nil || IsNil(o.DefaultSoftLimit) {
		var ret int64
		return ret
	}
	return *o.DefaultSoftLimit
}

// GetDefaultSoftLimitOk returns a tuple with the DefaultSoftLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetDefaultSoftLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultSoftLimit) {
		return nil, false
	}
	return o.DefaultSoftLimit, true
}

// HasDefaultSoftLimit returns a boolean if a field has been set.
func (o *FileSystemInstance) HasDefaultSoftLimit() bool {
	if o != nil && !IsNil(o.DefaultSoftLimit) {
		return true
	}

	return false
}

// SetDefaultSoftLimit gets a reference to the given int64 and assigns it to the DefaultSoftLimit field.
func (o *FileSystemInstance) SetDefaultSoftLimit(v int64) {
	o.DefaultSoftLimit = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *FileSystemInstance) GetCreationTimestamp() time.Time {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *FileSystemInstance) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given time.Time and assigns it to the CreationTimestamp field.
func (o *FileSystemInstance) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = &v
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value if set, zero value otherwise.
func (o *FileSystemInstance) GetExpirationTimestamp() time.Time {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		return nil, false
	}
	return o.ExpirationTimestamp, true
}

// HasExpirationTimestamp returns a boolean if a field has been set.
func (o *FileSystemInstance) HasExpirationTimestamp() bool {
	if o != nil && !IsNil(o.ExpirationTimestamp) {
		return true
	}

	return false
}

// SetExpirationTimestamp gets a reference to the given time.Time and assigns it to the ExpirationTimestamp field.
func (o *FileSystemInstance) SetExpirationTimestamp(v time.Time) {
	o.ExpirationTimestamp = &v
}

// GetLastRefreshTimestamp returns the LastRefreshTimestamp field value if set, zero value otherwise.
func (o *FileSystemInstance) GetLastRefreshTimestamp() time.Time {
	if o == nil || IsNil(o.LastRefreshTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastRefreshTimestamp
}

// GetLastRefreshTimestampOk returns a tuple with the LastRefreshTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetLastRefreshTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastRefreshTimestamp) {
		return nil, false
	}
	return o.LastRefreshTimestamp, true
}

// HasLastRefreshTimestamp returns a boolean if a field has been set.
func (o *FileSystemInstance) HasLastRefreshTimestamp() bool {
	if o != nil && !IsNil(o.LastRefreshTimestamp) {
		return true
	}

	return false
}

// SetLastRefreshTimestamp gets a reference to the given time.Time and assigns it to the LastRefreshTimestamp field.
func (o *FileSystemInstance) SetLastRefreshTimestamp(v time.Time) {
	o.LastRefreshTimestamp = &v
}

// GetLastWritableTimestamp returns the LastWritableTimestamp field value if set, zero value otherwise.
func (o *FileSystemInstance) GetLastWritableTimestamp() time.Time {
	if o == nil || IsNil(o.LastWritableTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastWritableTimestamp
}

// GetLastWritableTimestampOk returns a tuple with the LastWritableTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetLastWritableTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastWritableTimestamp) {
		return nil, false
	}
	return o.LastWritableTimestamp, true
}

// HasLastWritableTimestamp returns a boolean if a field has been set.
func (o *FileSystemInstance) HasLastWritableTimestamp() bool {
	if o != nil && !IsNil(o.LastWritableTimestamp) {
		return true
	}

	return false
}

// SetLastWritableTimestamp gets a reference to the given time.Time and assigns it to the LastWritableTimestamp field.
func (o *FileSystemInstance) SetLastWritableTimestamp(v time.Time) {
	o.LastWritableTimestamp = &v
}

// GetIsModified returns the IsModified field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsModified() bool {
	if o == nil || IsNil(o.IsModified) {
		var ret bool
		return ret
	}
	return *o.IsModified
}

// GetIsModifiedOk returns a tuple with the IsModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsModifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsModified) {
		return nil, false
	}
	return o.IsModified, true
}

// HasIsModified returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsModified() bool {
	if o != nil && !IsNil(o.IsModified) {
		return true
	}

	return false
}

// SetIsModified gets a reference to the given bool and assigns it to the IsModified field.
func (o *FileSystemInstance) SetIsModified(v bool) {
	o.IsModified = &v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *FileSystemInstance) GetAccessType() FileSystemSnapshotAccessTypeEnum {
	if o == nil || IsNil(o.AccessType) {
		var ret FileSystemSnapshotAccessTypeEnum
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetAccessTypeOk() (*FileSystemSnapshotAccessTypeEnum, bool) {
	if o == nil || IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *FileSystemInstance) HasAccessType() bool {
	if o != nil && !IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given FileSystemSnapshotAccessTypeEnum and assigns it to the AccessType field.
func (o *FileSystemInstance) SetAccessType(v FileSystemSnapshotAccessTypeEnum) {
	o.AccessType = &v
}

// GetCreatorType returns the CreatorType field value if set, zero value otherwise.
func (o *FileSystemInstance) GetCreatorType() FileSystemSnapshotCreatorTypeEnum {
	if o == nil || IsNil(o.CreatorType) {
		var ret FileSystemSnapshotCreatorTypeEnum
		return ret
	}
	return *o.CreatorType
}

// GetCreatorTypeOk returns a tuple with the CreatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetCreatorTypeOk() (*FileSystemSnapshotCreatorTypeEnum, bool) {
	if o == nil || IsNil(o.CreatorType) {
		return nil, false
	}
	return o.CreatorType, true
}

// HasCreatorType returns a boolean if a field has been set.
func (o *FileSystemInstance) HasCreatorType() bool {
	if o != nil && !IsNil(o.CreatorType) {
		return true
	}

	return false
}

// SetCreatorType gets a reference to the given FileSystemSnapshotCreatorTypeEnum and assigns it to the CreatorType field.
func (o *FileSystemInstance) SetCreatorType(v FileSystemSnapshotCreatorTypeEnum) {
	o.CreatorType = &v
}

// GetFileEventsPublishingMode returns the FileEventsPublishingMode field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFileEventsPublishingMode() FileEventsPublishingModeEnum {
	if o == nil || IsNil(o.FileEventsPublishingMode) {
		var ret FileEventsPublishingModeEnum
		return ret
	}
	return *o.FileEventsPublishingMode
}

// GetFileEventsPublishingModeOk returns a tuple with the FileEventsPublishingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFileEventsPublishingModeOk() (*FileEventsPublishingModeEnum, bool) {
	if o == nil || IsNil(o.FileEventsPublishingMode) {
		return nil, false
	}
	return o.FileEventsPublishingMode, true
}

// HasFileEventsPublishingMode returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFileEventsPublishingMode() bool {
	if o != nil && !IsNil(o.FileEventsPublishingMode) {
		return true
	}

	return false
}

// SetFileEventsPublishingMode gets a reference to the given FileEventsPublishingModeEnum and assigns it to the FileEventsPublishingMode field.
func (o *FileSystemInstance) SetFileEventsPublishingMode(v FileEventsPublishingModeEnum) {
	o.FileEventsPublishingMode = &v
}

// GetFlrAttributes returns the FlrAttributes field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFlrAttributes() FlrInstance {
	if o == nil || IsNil(o.FlrAttributes) {
		var ret FlrInstance
		return ret
	}
	return *o.FlrAttributes
}

// GetFlrAttributesOk returns a tuple with the FlrAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFlrAttributesOk() (*FlrInstance, bool) {
	if o == nil || IsNil(o.FlrAttributes) {
		return nil, false
	}
	return o.FlrAttributes, true
}

// HasFlrAttributes returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFlrAttributes() bool {
	if o != nil && !IsNil(o.FlrAttributes) {
		return true
	}

	return false
}

// SetFlrAttributes gets a reference to the given FlrInstance and assigns it to the FlrAttributes field.
func (o *FileSystemInstance) SetFlrAttributes(v FlrInstance) {
	o.FlrAttributes = &v
}

// GetHostIoSize returns the HostIoSize field value if set, zero value otherwise.
func (o *FileSystemInstance) GetHostIoSize() FileSystemHostIoSizeEnum {
	if o == nil || IsNil(o.HostIoSize) {
		var ret FileSystemHostIoSizeEnum
		return ret
	}
	return *o.HostIoSize
}

// GetHostIoSizeOk returns a tuple with the HostIoSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetHostIoSizeOk() (*FileSystemHostIoSizeEnum, bool) {
	if o == nil || IsNil(o.HostIoSize) {
		return nil, false
	}
	return o.HostIoSize, true
}

// HasHostIoSize returns a boolean if a field has been set.
func (o *FileSystemInstance) HasHostIoSize() bool {
	if o != nil && !IsNil(o.HostIoSize) {
		return true
	}

	return false
}

// SetHostIoSize gets a reference to the given FileSystemHostIoSizeEnum and assigns it to the HostIoSize field.
func (o *FileSystemInstance) SetHostIoSize(v FileSystemHostIoSizeEnum) {
	o.HostIoSize = &v
}

// GetIsSecure returns the IsSecure field value if set, zero value otherwise.
func (o *FileSystemInstance) GetIsSecure() bool {
	if o == nil || IsNil(o.IsSecure) {
		var ret bool
		return ret
	}
	return *o.IsSecure
}

// GetIsSecureOk returns a tuple with the IsSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetIsSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecure) {
		return nil, false
	}
	return o.IsSecure, true
}

// HasIsSecure returns a boolean if a field has been set.
func (o *FileSystemInstance) HasIsSecure() bool {
	if o != nil && !IsNil(o.IsSecure) {
		return true
	}

	return false
}

// SetIsSecure gets a reference to the given bool and assigns it to the IsSecure field.
func (o *FileSystemInstance) SetIsSecure(v bool) {
	o.IsSecure = &v
}

// GetFilesystemTypeL10n returns the FilesystemTypeL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFilesystemTypeL10n() string {
	if o == nil || IsNil(o.FilesystemTypeL10n) {
		var ret string
		return ret
	}
	return *o.FilesystemTypeL10n
}

// GetFilesystemTypeL10nOk returns a tuple with the FilesystemTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFilesystemTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.FilesystemTypeL10n) {
		return nil, false
	}
	return o.FilesystemTypeL10n, true
}

// HasFilesystemTypeL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFilesystemTypeL10n() bool {
	if o != nil && !IsNil(o.FilesystemTypeL10n) {
		return true
	}

	return false
}

// SetFilesystemTypeL10n gets a reference to the given string and assigns it to the FilesystemTypeL10n field.
func (o *FileSystemInstance) SetFilesystemTypeL10n(v string) {
	o.FilesystemTypeL10n = &v
}

// GetConfigTypeL10n returns the ConfigTypeL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetConfigTypeL10n() string {
	if o == nil || IsNil(o.ConfigTypeL10n) {
		var ret string
		return ret
	}
	return *o.ConfigTypeL10n
}

// GetConfigTypeL10nOk returns a tuple with the ConfigTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetConfigTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigTypeL10n) {
		return nil, false
	}
	return o.ConfigTypeL10n, true
}

// HasConfigTypeL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasConfigTypeL10n() bool {
	if o != nil && !IsNil(o.ConfigTypeL10n) {
		return true
	}

	return false
}

// SetConfigTypeL10n gets a reference to the given string and assigns it to the ConfigTypeL10n field.
func (o *FileSystemInstance) SetConfigTypeL10n(v string) {
	o.ConfigTypeL10n = &v
}

// GetAccessPolicyL10n returns the AccessPolicyL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetAccessPolicyL10n() string {
	if o == nil || IsNil(o.AccessPolicyL10n) {
		var ret string
		return ret
	}
	return *o.AccessPolicyL10n
}

// GetAccessPolicyL10nOk returns a tuple with the AccessPolicyL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetAccessPolicyL10nOk() (*string, bool) {
	if o == nil || IsNil(o.AccessPolicyL10n) {
		return nil, false
	}
	return o.AccessPolicyL10n, true
}

// HasAccessPolicyL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasAccessPolicyL10n() bool {
	if o != nil && !IsNil(o.AccessPolicyL10n) {
		return true
	}

	return false
}

// SetAccessPolicyL10n gets a reference to the given string and assigns it to the AccessPolicyL10n field.
func (o *FileSystemInstance) SetAccessPolicyL10n(v string) {
	o.AccessPolicyL10n = &v
}

// GetLockingPolicyL10n returns the LockingPolicyL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetLockingPolicyL10n() string {
	if o == nil || IsNil(o.LockingPolicyL10n) {
		var ret string
		return ret
	}
	return *o.LockingPolicyL10n
}

// GetLockingPolicyL10nOk returns a tuple with the LockingPolicyL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetLockingPolicyL10nOk() (*string, bool) {
	if o == nil || IsNil(o.LockingPolicyL10n) {
		return nil, false
	}
	return o.LockingPolicyL10n, true
}

// HasLockingPolicyL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasLockingPolicyL10n() bool {
	if o != nil && !IsNil(o.LockingPolicyL10n) {
		return true
	}

	return false
}

// SetLockingPolicyL10n gets a reference to the given string and assigns it to the LockingPolicyL10n field.
func (o *FileSystemInstance) SetLockingPolicyL10n(v string) {
	o.LockingPolicyL10n = &v
}

// GetFolderRenamePolicyL10n returns the FolderRenamePolicyL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFolderRenamePolicyL10n() string {
	if o == nil || IsNil(o.FolderRenamePolicyL10n) {
		var ret string
		return ret
	}
	return *o.FolderRenamePolicyL10n
}

// GetFolderRenamePolicyL10nOk returns a tuple with the FolderRenamePolicyL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFolderRenamePolicyL10nOk() (*string, bool) {
	if o == nil || IsNil(o.FolderRenamePolicyL10n) {
		return nil, false
	}
	return o.FolderRenamePolicyL10n, true
}

// HasFolderRenamePolicyL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFolderRenamePolicyL10n() bool {
	if o != nil && !IsNil(o.FolderRenamePolicyL10n) {
		return true
	}

	return false
}

// SetFolderRenamePolicyL10n gets a reference to the given string and assigns it to the FolderRenamePolicyL10n field.
func (o *FileSystemInstance) SetFolderRenamePolicyL10n(v string) {
	o.FolderRenamePolicyL10n = &v
}

// GetAccessTypeL10n returns the AccessTypeL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetAccessTypeL10n() string {
	if o == nil || IsNil(o.AccessTypeL10n) {
		var ret string
		return ret
	}
	return *o.AccessTypeL10n
}

// GetAccessTypeL10nOk returns a tuple with the AccessTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetAccessTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.AccessTypeL10n) {
		return nil, false
	}
	return o.AccessTypeL10n, true
}

// HasAccessTypeL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasAccessTypeL10n() bool {
	if o != nil && !IsNil(o.AccessTypeL10n) {
		return true
	}

	return false
}

// SetAccessTypeL10n gets a reference to the given string and assigns it to the AccessTypeL10n field.
func (o *FileSystemInstance) SetAccessTypeL10n(v string) {
	o.AccessTypeL10n = &v
}

// GetCreatorTypeL10n returns the CreatorTypeL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetCreatorTypeL10n() string {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		var ret string
		return ret
	}
	return *o.CreatorTypeL10n
}

// GetCreatorTypeL10nOk returns a tuple with the CreatorTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetCreatorTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		return nil, false
	}
	return o.CreatorTypeL10n, true
}

// HasCreatorTypeL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasCreatorTypeL10n() bool {
	if o != nil && !IsNil(o.CreatorTypeL10n) {
		return true
	}

	return false
}

// SetCreatorTypeL10n gets a reference to the given string and assigns it to the CreatorTypeL10n field.
func (o *FileSystemInstance) SetCreatorTypeL10n(v string) {
	o.CreatorTypeL10n = &v
}

// GetFileEventsPublishingModeL10n returns the FileEventsPublishingModeL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFileEventsPublishingModeL10n() string {
	if o == nil || IsNil(o.FileEventsPublishingModeL10n) {
		var ret string
		return ret
	}
	return *o.FileEventsPublishingModeL10n
}

// GetFileEventsPublishingModeL10nOk returns a tuple with the FileEventsPublishingModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFileEventsPublishingModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.FileEventsPublishingModeL10n) {
		return nil, false
	}
	return o.FileEventsPublishingModeL10n, true
}

// HasFileEventsPublishingModeL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFileEventsPublishingModeL10n() bool {
	if o != nil && !IsNil(o.FileEventsPublishingModeL10n) {
		return true
	}

	return false
}

// SetFileEventsPublishingModeL10n gets a reference to the given string and assigns it to the FileEventsPublishingModeL10n field.
func (o *FileSystemInstance) SetFileEventsPublishingModeL10n(v string) {
	o.FileEventsPublishingModeL10n = &v
}

// GetHostIoSizeL10n returns the HostIoSizeL10n field value if set, zero value otherwise.
func (o *FileSystemInstance) GetHostIoSizeL10n() string {
	if o == nil || IsNil(o.HostIoSizeL10n) {
		var ret string
		return ret
	}
	return *o.HostIoSizeL10n
}

// GetHostIoSizeL10nOk returns a tuple with the HostIoSizeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetHostIoSizeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.HostIoSizeL10n) {
		return nil, false
	}
	return o.HostIoSizeL10n, true
}

// HasHostIoSizeL10n returns a boolean if a field has been set.
func (o *FileSystemInstance) HasHostIoSizeL10n() bool {
	if o != nil && !IsNil(o.HostIoSizeL10n) {
		return true
	}

	return false
}

// SetHostIoSizeL10n gets a reference to the given string and assigns it to the HostIoSizeL10n field.
func (o *FileSystemInstance) SetHostIoSizeL10n(v string) {
	o.HostIoSizeL10n = &v
}

// GetNasServer returns the NasServer field value if set, zero value otherwise.
func (o *FileSystemInstance) GetNasServer() NasServerInstance {
	if o == nil || IsNil(o.NasServer) {
		var ret NasServerInstance
		return ret
	}
	return *o.NasServer
}

// GetNasServerOk returns a tuple with the NasServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetNasServerOk() (*NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServer) {
		return nil, false
	}
	return o.NasServer, true
}

// HasNasServer returns a boolean if a field has been set.
func (o *FileSystemInstance) HasNasServer() bool {
	if o != nil && !IsNil(o.NasServer) {
		return true
	}

	return false
}

// SetNasServer gets a reference to the given NasServerInstance and assigns it to the NasServer field.
func (o *FileSystemInstance) SetNasServer(v NasServerInstance) {
	o.NasServer = &v
}

// GetProtectionPolicy returns the ProtectionPolicy field value if set, zero value otherwise.
func (o *FileSystemInstance) GetProtectionPolicy() PolicyInstance {
	if o == nil || IsNil(o.ProtectionPolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.ProtectionPolicy
}

// GetProtectionPolicyOk returns a tuple with the ProtectionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetProtectionPolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.ProtectionPolicy) {
		return nil, false
	}
	return o.ProtectionPolicy, true
}

// HasProtectionPolicy returns a boolean if a field has been set.
func (o *FileSystemInstance) HasProtectionPolicy() bool {
	if o != nil && !IsNil(o.ProtectionPolicy) {
		return true
	}

	return false
}

// SetProtectionPolicy gets a reference to the given PolicyInstance and assigns it to the ProtectionPolicy field.
func (o *FileSystemInstance) SetProtectionPolicy(v PolicyInstance) {
	o.ProtectionPolicy = &v
}

// GetPerformancePolicy returns the PerformancePolicy field value if set, zero value otherwise.
func (o *FileSystemInstance) GetPerformancePolicy() PolicyInstance {
	if o == nil || IsNil(o.PerformancePolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.PerformancePolicy
}

// GetPerformancePolicyOk returns a tuple with the PerformancePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetPerformancePolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.PerformancePolicy) {
		return nil, false
	}
	return o.PerformancePolicy, true
}

// HasPerformancePolicy returns a boolean if a field has been set.
func (o *FileSystemInstance) HasPerformancePolicy() bool {
	if o != nil && !IsNil(o.PerformancePolicy) {
		return true
	}

	return false
}

// SetPerformancePolicy gets a reference to the given PolicyInstance and assigns it to the PerformancePolicy field.
func (o *FileSystemInstance) SetPerformancePolicy(v PolicyInstance) {
	o.PerformancePolicy = &v
}

// GetFileTreeQuotas returns the FileTreeQuotas field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFileTreeQuotas() []FileTreeQuotaInstance {
	if o == nil || IsNil(o.FileTreeQuotas) {
		var ret []FileTreeQuotaInstance
		return ret
	}
	return o.FileTreeQuotas
}

// GetFileTreeQuotasOk returns a tuple with the FileTreeQuotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFileTreeQuotasOk() ([]FileTreeQuotaInstance, bool) {
	if o == nil || IsNil(o.FileTreeQuotas) {
		return nil, false
	}
	return o.FileTreeQuotas, true
}

// HasFileTreeQuotas returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFileTreeQuotas() bool {
	if o != nil && !IsNil(o.FileTreeQuotas) {
		return true
	}

	return false
}

// SetFileTreeQuotas gets a reference to the given []FileTreeQuotaInstance and assigns it to the FileTreeQuotas field.
func (o *FileSystemInstance) SetFileTreeQuotas(v []FileTreeQuotaInstance) {
	o.FileTreeQuotas = v
}

// GetFileUserQuotas returns the FileUserQuotas field value if set, zero value otherwise.
func (o *FileSystemInstance) GetFileUserQuotas() []FileUserQuotaInstance {
	if o == nil || IsNil(o.FileUserQuotas) {
		var ret []FileUserQuotaInstance
		return ret
	}
	return o.FileUserQuotas
}

// GetFileUserQuotasOk returns a tuple with the FileUserQuotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetFileUserQuotasOk() ([]FileUserQuotaInstance, bool) {
	if o == nil || IsNil(o.FileUserQuotas) {
		return nil, false
	}
	return o.FileUserQuotas, true
}

// HasFileUserQuotas returns a boolean if a field has been set.
func (o *FileSystemInstance) HasFileUserQuotas() bool {
	if o != nil && !IsNil(o.FileUserQuotas) {
		return true
	}

	return false
}

// SetFileUserQuotas gets a reference to the given []FileUserQuotaInstance and assigns it to the FileUserQuotas field.
func (o *FileSystemInstance) SetFileUserQuotas(v []FileUserQuotaInstance) {
	o.FileUserQuotas = v
}

// GetNfsExports returns the NfsExports field value if set, zero value otherwise.
func (o *FileSystemInstance) GetNfsExports() []NfsExportInstance {
	if o == nil || IsNil(o.NfsExports) {
		var ret []NfsExportInstance
		return ret
	}
	return o.NfsExports
}

// GetNfsExportsOk returns a tuple with the NfsExports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetNfsExportsOk() ([]NfsExportInstance, bool) {
	if o == nil || IsNil(o.NfsExports) {
		return nil, false
	}
	return o.NfsExports, true
}

// HasNfsExports returns a boolean if a field has been set.
func (o *FileSystemInstance) HasNfsExports() bool {
	if o != nil && !IsNil(o.NfsExports) {
		return true
	}

	return false
}

// SetNfsExports gets a reference to the given []NfsExportInstance and assigns it to the NfsExports field.
func (o *FileSystemInstance) SetNfsExports(v []NfsExportInstance) {
	o.NfsExports = v
}

// GetSmbShares returns the SmbShares field value if set, zero value otherwise.
func (o *FileSystemInstance) GetSmbShares() []SmbShareInstance {
	if o == nil || IsNil(o.SmbShares) {
		var ret []SmbShareInstance
		return ret
	}
	return o.SmbShares
}

// GetSmbSharesOk returns a tuple with the SmbShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemInstance) GetSmbSharesOk() ([]SmbShareInstance, bool) {
	if o == nil || IsNil(o.SmbShares) {
		return nil, false
	}
	return o.SmbShares, true
}

// HasSmbShares returns a boolean if a field has been set.
func (o *FileSystemInstance) HasSmbShares() bool {
	if o != nil && !IsNil(o.SmbShares) {
		return true
	}

	return false
}

// SetSmbShares gets a reference to the given []SmbShareInstance and assigns it to the SmbShares field.
func (o *FileSystemInstance) SetSmbShares(v []SmbShareInstance) {
	o.SmbShares = v
}

func (o FileSystemInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSystemInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.NasServerId) {
		toSerialize["nas_server_id"] = o.NasServerId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	if !IsNil(o.FilesystemType) {
		toSerialize["filesystem_type"] = o.FilesystemType
	}
	if !IsNil(o.SizeTotal) {
		toSerialize["size_total"] = o.SizeTotal
	}
	if !IsNil(o.SizeUsed) {
		toSerialize["size_used"] = o.SizeUsed
	}
	if !IsNil(o.ConfigType) {
		toSerialize["config_type"] = o.ConfigType
	}
	if !IsNil(o.ProtectionPolicyId) {
		toSerialize["protection_policy_id"] = o.ProtectionPolicyId
	}
	if !IsNil(o.PerformancePolicyId) {
		toSerialize["performance_policy_id"] = o.PerformancePolicyId
	}
	if !IsNil(o.AccessPolicy) {
		toSerialize["access_policy"] = o.AccessPolicy
	}
	if !IsNil(o.LockingPolicy) {
		toSerialize["locking_policy"] = o.LockingPolicy
	}
	if !IsNil(o.FolderRenamePolicy) {
		toSerialize["folder_rename_policy"] = o.FolderRenamePolicy
	}
	if !IsNil(o.IsSmbSyncWritesEnabled) {
		toSerialize["is_smb_sync_writes_enabled"] = o.IsSmbSyncWritesEnabled
	}
	if !IsNil(o.IsSmbOpLocksEnabled) {
		toSerialize["is_smb_op_locks_enabled"] = o.IsSmbOpLocksEnabled
	}
	if !IsNil(o.IsSmbNoNotifyEnabled) {
		toSerialize["is_smb_no_notify_enabled"] = o.IsSmbNoNotifyEnabled
	}
	if !IsNil(o.IsSmbNotifyOnAccessEnabled) {
		toSerialize["is_smb_notify_on_access_enabled"] = o.IsSmbNotifyOnAccessEnabled
	}
	if !IsNil(o.IsSmbNotifyOnWriteEnabled) {
		toSerialize["is_smb_notify_on_write_enabled"] = o.IsSmbNotifyOnWriteEnabled
	}
	if !IsNil(o.SmbNotifyOnChangeDirDepth) {
		toSerialize["smb_notify_on_change_dir_depth"] = o.SmbNotifyOnChangeDirDepth
	}
	if !IsNil(o.IsAsyncMTimeEnabled) {
		toSerialize["is_async_MTime_enabled"] = o.IsAsyncMTimeEnabled
	}
	if !IsNil(o.IsQuotaEnabled) {
		toSerialize["is_quota_enabled"] = o.IsQuotaEnabled
	}
	if !IsNil(o.GracePeriod) {
		toSerialize["grace_period"] = o.GracePeriod
	}
	if !IsNil(o.DefaultHardLimit) {
		toSerialize["default_hard_limit"] = o.DefaultHardLimit
	}
	if !IsNil(o.DefaultSoftLimit) {
		toSerialize["default_soft_limit"] = o.DefaultSoftLimit
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.ExpirationTimestamp) {
		toSerialize["expiration_timestamp"] = o.ExpirationTimestamp
	}
	if !IsNil(o.LastRefreshTimestamp) {
		toSerialize["last_refresh_timestamp"] = o.LastRefreshTimestamp
	}
	if !IsNil(o.LastWritableTimestamp) {
		toSerialize["last_writable_timestamp"] = o.LastWritableTimestamp
	}
	if !IsNil(o.IsModified) {
		toSerialize["is_modified"] = o.IsModified
	}
	if !IsNil(o.AccessType) {
		toSerialize["access_type"] = o.AccessType
	}
	if !IsNil(o.CreatorType) {
		toSerialize["creator_type"] = o.CreatorType
	}
	if !IsNil(o.FileEventsPublishingMode) {
		toSerialize["file_events_publishing_mode"] = o.FileEventsPublishingMode
	}
	if !IsNil(o.FlrAttributes) {
		toSerialize["flr_attributes"] = o.FlrAttributes
	}
	if !IsNil(o.HostIoSize) {
		toSerialize["host_io_size"] = o.HostIoSize
	}
	if !IsNil(o.IsSecure) {
		toSerialize["is_secure"] = o.IsSecure
	}
	if !IsNil(o.FilesystemTypeL10n) {
		toSerialize["filesystem_type_l10n"] = o.FilesystemTypeL10n
	}
	if !IsNil(o.ConfigTypeL10n) {
		toSerialize["config_type_l10n"] = o.ConfigTypeL10n
	}
	if !IsNil(o.AccessPolicyL10n) {
		toSerialize["access_policy_l10n"] = o.AccessPolicyL10n
	}
	if !IsNil(o.LockingPolicyL10n) {
		toSerialize["locking_policy_l10n"] = o.LockingPolicyL10n
	}
	if !IsNil(o.FolderRenamePolicyL10n) {
		toSerialize["folder_rename_policy_l10n"] = o.FolderRenamePolicyL10n
	}
	if !IsNil(o.AccessTypeL10n) {
		toSerialize["access_type_l10n"] = o.AccessTypeL10n
	}
	if !IsNil(o.CreatorTypeL10n) {
		toSerialize["creator_type_l10n"] = o.CreatorTypeL10n
	}
	if !IsNil(o.FileEventsPublishingModeL10n) {
		toSerialize["file_events_publishing_mode_l10n"] = o.FileEventsPublishingModeL10n
	}
	if !IsNil(o.HostIoSizeL10n) {
		toSerialize["host_io_size_l10n"] = o.HostIoSizeL10n
	}
	if !IsNil(o.NasServer) {
		toSerialize["nas_server"] = o.NasServer
	}
	if !IsNil(o.ProtectionPolicy) {
		toSerialize["protection_policy"] = o.ProtectionPolicy
	}
	if !IsNil(o.PerformancePolicy) {
		toSerialize["performance_policy"] = o.PerformancePolicy
	}
	if !IsNil(o.FileTreeQuotas) {
		toSerialize["file_tree_quotas"] = o.FileTreeQuotas
	}
	if !IsNil(o.FileUserQuotas) {
		toSerialize["file_user_quotas"] = o.FileUserQuotas
	}
	if !IsNil(o.NfsExports) {
		toSerialize["nfs_exports"] = o.NfsExports
	}
	if !IsNil(o.SmbShares) {
		toSerialize["smb_shares"] = o.SmbShares
	}
	return toSerialize, nil
}

type NullableFileSystemInstance struct {
	value *FileSystemInstance
	isSet bool
}

func (v NullableFileSystemInstance) Get() *FileSystemInstance {
	return v.value
}

func (v *NullableFileSystemInstance) Set(val *FileSystemInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSystemInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSystemInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSystemInstance(val *FileSystemInstance) *NullableFileSystemInstance {
	return &NullableFileSystemInstance{value: val, isSet: true}
}

func (v NullableFileSystemInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSystemInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


