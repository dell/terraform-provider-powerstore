/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the VolumeInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeInstance{}

// VolumeInstance Details about a volume, including snapshots and clones of volumes. This resource type has queriable associations from appliance, policy, migration_session, host_volume_mapping, remote_snapshot_session, remote_snapshot, volume_group, datastore, replication_session
type VolumeInstance struct {
	// Unique identifier of the volume instance.
	Id *string `json:"id,omitempty"`
	// Name of the volume. This value must contain 128 or fewer printable Unicode characters.   This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Description of the volume. This value must contain 128 or fewer printable Unicode characters. 
	Description *string `json:"description,omitempty"`
	Type *VolumeTypeEnum `json:"type,omitempty"`
	// World wide name of the volume.
	Wwn *string `json:"wwn,omitempty"`
	// NVMe Namespace unique identifier in the NVME subsystem. Used for volumes attached to NVMEoF hosts. Was added in version 2.0.0.0.
	Nsid *int32 `json:"nsid,omitempty"`
	// NVMe Namespace globally unique identifier. Used for volumes attached to NVMEoF hosts. Was added in version 2.0.0.0.
	Nguid *string `json:"nguid,omitempty"`
	// Unique identifier of the appliance on which the volume is provisioned.
	ApplianceId *string `json:"appliance_id,omitempty"`
	State *VolumeStateEnum `json:"state,omitempty"`
	//  Size of the volume in bytes. Minimum volume size is 1MB. Maximum volume size is 256TB. Size must be a multiple of 8192.
	Size *int64 `json:"size,omitempty"`
	// Current amount of data (in bytes) host has written to a volume without dedupe, compression or sharing. This metric applies to primaries, snaps and clones. The value is null initially when a volume is created and is collected at 5 minute intervals.  Was added in version 3.0.0.0.
	LogicalUsed *int64 `json:"logical_used,omitempty"`
	NodeAffinity *NodeAffinityEnum `json:"node_affinity,omitempty"`
	// Time when the volume was created.
	CreationTimestamp *time.Time `json:"creation_timestamp,omitempty"`
	// Unique identifier of the protection policy assigned to the volume. Only applicable to primary and clone volumes. 
	ProtectionPolicyId *string `json:"protection_policy_id,omitempty"`
	// Unique identifier of the performance policy assigned to the volume.
	PerformancePolicyId *string `json:"performance_policy_id,omitempty"`
	// Unique identifier of the QoS performance policy assigned to the volume. Was added in version 4.0.0.0.
	QosPerformancePolicyId *string `json:"qos_performance_policy_id,omitempty"`
	// Indicates whether this volume is a replication destination. This field is false on both ends when a volume is a metro volume. Areplication destination will be created by the system when a replication session is created. When there is an active replication session, all the user operations are restricted including modification, deletion, host operation, snapshot, clone, etc. After the replication session is deleted, the replication destination volume will remain as it is until the end user changes it to be a non-replication destination. After the change, it becomes a primary volume. If the end user keeps it as a replication destination, when the replication session is recreated, the replication destination volume could potentially be reused in the new session to avoid a time-consuming full sync. This property is only valid for primary and clone volumes. 
	IsReplicationDestination *bool `json:"is_replication_destination,omitempty"`
	// Unique identifier of the migration session assigned to the volume if it is part of a migration activity. 
	MigrationSessionId *string `json:"migration_session_id,omitempty"`
	// Unique identifier of the replication session assigned to the volume if it has been configured as a metro volume between two PowerStore clusters. The volume can only be modified, refreshed, or restored when the metro_replication_session is in the paused state.  Was added in version 3.0.0.0.
	MetroReplicationSessionId *string `json:"metro_replication_session_id,omitempty"`
	// Indicates whether the volume is available to host. This attribute is only applicable to primary volumes and clones.  Was added in version 3.0.0.0.
	IsHostAccessAvailable *bool `json:"is_host_access_available,omitempty"`
	ProtectionData *ProtectionDataInstance `json:"protection_data,omitempty"`
	// Filtering on the fields of this embedded resource is not supported.
	LocationHistory []LocationHistoryInstance `json:"location_history,omitempty"`
	AppType *AppTypeEnum `json:"app_type,omitempty"`
	// An optional field used to describe application type usage for a volume. This field can only be set if app_type is set to Relational_Databases_Other, Big_Data_Analytics_Other, Business_Applications_Other, Healthcare_Other, Virtualization_Other or Other. If the app_type attribute is set to anything other than one of these values, the attribute will be cleared.  Was added in version 2.1.0.0.
	AppTypeOther *string `json:"app_type_other,omitempty"`
	// Localized message string corresponding to type
	TypeL10n *string `json:"type_l10n,omitempty"`
	// Localized message string corresponding to state
	StateL10n *string `json:"state_l10n,omitempty"`
	// Localized message string corresponding to node_affinity
	NodeAffinityL10n *string `json:"node_affinity_l10n,omitempty"`
	// Localized message string corresponding to app_type Was added in version 2.1.0.0.
	AppTypeL10n *string `json:"app_type_l10n,omitempty"`
	Appliance *ApplianceInstance `json:"appliance,omitempty"`
	ProtectionPolicy *PolicyInstance `json:"protection_policy,omitempty"`
	QosPerformancePolicy *PolicyInstance `json:"qos_performance_policy,omitempty"`
	MigrationSession *MigrationSessionInstance `json:"migration_session,omitempty"`
	// This is the inverse of the resource type host_volume_mapping association.
	MappedVolumes []HostVolumeMappingInstance `json:"mapped_volumes,omitempty"`
	// This is the inverse of the resource type remote_snapshot_session association.
	RemoteSnapshotSessions []RemoteSnapshotSessionInstance `json:"remote_snapshot_sessions,omitempty"`
	// This is the inverse of the resource type remote_snapshot_session association.
	CurrentRemoteSnapshotSessions []RemoteSnapshotSessionInstance `json:"current_remote_snapshot_sessions,omitempty"`
	// This is the inverse of the resource type remote_snapshot association.
	RemoteSnapshots []RemoteSnapshotInstance `json:"remote_snapshots,omitempty"`
	// List of the volume_groups that are associated with this volume.
	VolumeGroups []VolumeGroupInstance `json:"volume_groups,omitempty"`
	// List of the datastores that are associated with this volume.
	Datastores []DatastoreInstance `json:"datastores,omitempty"`
	// List of the replication_sessions that are associated with this volume.
	ReplicationSessions []ReplicationSessionInstance `json:"replication_sessions,omitempty"`
}

// NewVolumeInstance instantiates a new VolumeInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInstance() *VolumeInstance {
	this := VolumeInstance{}
	var isReplicationDestination bool = false
	this.IsReplicationDestination = &isReplicationDestination
	return &this
}

// NewVolumeInstanceWithDefaults instantiates a new VolumeInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInstanceWithDefaults() *VolumeInstance {
	this := VolumeInstance{}
	var isReplicationDestination bool = false
	this.IsReplicationDestination = &isReplicationDestination
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VolumeInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VolumeInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VolumeInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VolumeInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VolumeInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VolumeInstance) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VolumeInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VolumeInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VolumeInstance) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VolumeInstance) GetType() VolumeTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret VolumeTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetTypeOk() (*VolumeTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VolumeInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VolumeTypeEnum and assigns it to the Type field.
func (o *VolumeInstance) SetType(v VolumeTypeEnum) {
	o.Type = &v
}

// GetWwn returns the Wwn field value if set, zero value otherwise.
func (o *VolumeInstance) GetWwn() string {
	if o == nil || IsNil(o.Wwn) {
		var ret string
		return ret
	}
	return *o.Wwn
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetWwnOk() (*string, bool) {
	if o == nil || IsNil(o.Wwn) {
		return nil, false
	}
	return o.Wwn, true
}

// HasWwn returns a boolean if a field has been set.
func (o *VolumeInstance) HasWwn() bool {
	if o != nil && !IsNil(o.Wwn) {
		return true
	}

	return false
}

// SetWwn gets a reference to the given string and assigns it to the Wwn field.
func (o *VolumeInstance) SetWwn(v string) {
	o.Wwn = &v
}

// GetNsid returns the Nsid field value if set, zero value otherwise.
func (o *VolumeInstance) GetNsid() int32 {
	if o == nil || IsNil(o.Nsid) {
		var ret int32
		return ret
	}
	return *o.Nsid
}

// GetNsidOk returns a tuple with the Nsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetNsidOk() (*int32, bool) {
	if o == nil || IsNil(o.Nsid) {
		return nil, false
	}
	return o.Nsid, true
}

// HasNsid returns a boolean if a field has been set.
func (o *VolumeInstance) HasNsid() bool {
	if o != nil && !IsNil(o.Nsid) {
		return true
	}

	return false
}

// SetNsid gets a reference to the given int32 and assigns it to the Nsid field.
func (o *VolumeInstance) SetNsid(v int32) {
	o.Nsid = &v
}

// GetNguid returns the Nguid field value if set, zero value otherwise.
func (o *VolumeInstance) GetNguid() string {
	if o == nil || IsNil(o.Nguid) {
		var ret string
		return ret
	}
	return *o.Nguid
}

// GetNguidOk returns a tuple with the Nguid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetNguidOk() (*string, bool) {
	if o == nil || IsNil(o.Nguid) {
		return nil, false
	}
	return o.Nguid, true
}

// HasNguid returns a boolean if a field has been set.
func (o *VolumeInstance) HasNguid() bool {
	if o != nil && !IsNil(o.Nguid) {
		return true
	}

	return false
}

// SetNguid gets a reference to the given string and assigns it to the Nguid field.
func (o *VolumeInstance) SetNguid(v string) {
	o.Nguid = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *VolumeInstance) GetApplianceId() string {
	if o == nil || IsNil(o.ApplianceId) {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *VolumeInstance) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *VolumeInstance) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *VolumeInstance) GetState() VolumeStateEnum {
	if o == nil || IsNil(o.State) {
		var ret VolumeStateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetStateOk() (*VolumeStateEnum, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *VolumeInstance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given VolumeStateEnum and assigns it to the State field.
func (o *VolumeInstance) SetState(v VolumeStateEnum) {
	o.State = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *VolumeInstance) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *VolumeInstance) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *VolumeInstance) SetSize(v int64) {
	o.Size = &v
}

// GetLogicalUsed returns the LogicalUsed field value if set, zero value otherwise.
func (o *VolumeInstance) GetLogicalUsed() int64 {
	if o == nil || IsNil(o.LogicalUsed) {
		var ret int64
		return ret
	}
	return *o.LogicalUsed
}

// GetLogicalUsedOk returns a tuple with the LogicalUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetLogicalUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.LogicalUsed) {
		return nil, false
	}
	return o.LogicalUsed, true
}

// HasLogicalUsed returns a boolean if a field has been set.
func (o *VolumeInstance) HasLogicalUsed() bool {
	if o != nil && !IsNil(o.LogicalUsed) {
		return true
	}

	return false
}

// SetLogicalUsed gets a reference to the given int64 and assigns it to the LogicalUsed field.
func (o *VolumeInstance) SetLogicalUsed(v int64) {
	o.LogicalUsed = &v
}

// GetNodeAffinity returns the NodeAffinity field value if set, zero value otherwise.
func (o *VolumeInstance) GetNodeAffinity() NodeAffinityEnum {
	if o == nil || IsNil(o.NodeAffinity) {
		var ret NodeAffinityEnum
		return ret
	}
	return *o.NodeAffinity
}

// GetNodeAffinityOk returns a tuple with the NodeAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetNodeAffinityOk() (*NodeAffinityEnum, bool) {
	if o == nil || IsNil(o.NodeAffinity) {
		return nil, false
	}
	return o.NodeAffinity, true
}

// HasNodeAffinity returns a boolean if a field has been set.
func (o *VolumeInstance) HasNodeAffinity() bool {
	if o != nil && !IsNil(o.NodeAffinity) {
		return true
	}

	return false
}

// SetNodeAffinity gets a reference to the given NodeAffinityEnum and assigns it to the NodeAffinity field.
func (o *VolumeInstance) SetNodeAffinity(v NodeAffinityEnum) {
	o.NodeAffinity = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *VolumeInstance) GetCreationTimestamp() time.Time {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *VolumeInstance) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given time.Time and assigns it to the CreationTimestamp field.
func (o *VolumeInstance) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = &v
}

// GetProtectionPolicyId returns the ProtectionPolicyId field value if set, zero value otherwise.
func (o *VolumeInstance) GetProtectionPolicyId() string {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyId
}

// GetProtectionPolicyIdOk returns a tuple with the ProtectionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetProtectionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		return nil, false
	}
	return o.ProtectionPolicyId, true
}

// HasProtectionPolicyId returns a boolean if a field has been set.
func (o *VolumeInstance) HasProtectionPolicyId() bool {
	if o != nil && !IsNil(o.ProtectionPolicyId) {
		return true
	}

	return false
}

// SetProtectionPolicyId gets a reference to the given string and assigns it to the ProtectionPolicyId field.
func (o *VolumeInstance) SetProtectionPolicyId(v string) {
	o.ProtectionPolicyId = &v
}

// GetPerformancePolicyId returns the PerformancePolicyId field value if set, zero value otherwise.
func (o *VolumeInstance) GetPerformancePolicyId() string {
	if o == nil || IsNil(o.PerformancePolicyId) {
		var ret string
		return ret
	}
	return *o.PerformancePolicyId
}

// GetPerformancePolicyIdOk returns a tuple with the PerformancePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetPerformancePolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PerformancePolicyId) {
		return nil, false
	}
	return o.PerformancePolicyId, true
}

// HasPerformancePolicyId returns a boolean if a field has been set.
func (o *VolumeInstance) HasPerformancePolicyId() bool {
	if o != nil && !IsNil(o.PerformancePolicyId) {
		return true
	}

	return false
}

// SetPerformancePolicyId gets a reference to the given string and assigns it to the PerformancePolicyId field.
func (o *VolumeInstance) SetPerformancePolicyId(v string) {
	o.PerformancePolicyId = &v
}

// GetQosPerformancePolicyId returns the QosPerformancePolicyId field value if set, zero value otherwise.
func (o *VolumeInstance) GetQosPerformancePolicyId() string {
	if o == nil || IsNil(o.QosPerformancePolicyId) {
		var ret string
		return ret
	}
	return *o.QosPerformancePolicyId
}

// GetQosPerformancePolicyIdOk returns a tuple with the QosPerformancePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetQosPerformancePolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.QosPerformancePolicyId) {
		return nil, false
	}
	return o.QosPerformancePolicyId, true
}

// HasQosPerformancePolicyId returns a boolean if a field has been set.
func (o *VolumeInstance) HasQosPerformancePolicyId() bool {
	if o != nil && !IsNil(o.QosPerformancePolicyId) {
		return true
	}

	return false
}

// SetQosPerformancePolicyId gets a reference to the given string and assigns it to the QosPerformancePolicyId field.
func (o *VolumeInstance) SetQosPerformancePolicyId(v string) {
	o.QosPerformancePolicyId = &v
}

// GetIsReplicationDestination returns the IsReplicationDestination field value if set, zero value otherwise.
func (o *VolumeInstance) GetIsReplicationDestination() bool {
	if o == nil || IsNil(o.IsReplicationDestination) {
		var ret bool
		return ret
	}
	return *o.IsReplicationDestination
}

// GetIsReplicationDestinationOk returns a tuple with the IsReplicationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetIsReplicationDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplicationDestination) {
		return nil, false
	}
	return o.IsReplicationDestination, true
}

// HasIsReplicationDestination returns a boolean if a field has been set.
func (o *VolumeInstance) HasIsReplicationDestination() bool {
	if o != nil && !IsNil(o.IsReplicationDestination) {
		return true
	}

	return false
}

// SetIsReplicationDestination gets a reference to the given bool and assigns it to the IsReplicationDestination field.
func (o *VolumeInstance) SetIsReplicationDestination(v bool) {
	o.IsReplicationDestination = &v
}

// GetMigrationSessionId returns the MigrationSessionId field value if set, zero value otherwise.
func (o *VolumeInstance) GetMigrationSessionId() string {
	if o == nil || IsNil(o.MigrationSessionId) {
		var ret string
		return ret
	}
	return *o.MigrationSessionId
}

// GetMigrationSessionIdOk returns a tuple with the MigrationSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetMigrationSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.MigrationSessionId) {
		return nil, false
	}
	return o.MigrationSessionId, true
}

// HasMigrationSessionId returns a boolean if a field has been set.
func (o *VolumeInstance) HasMigrationSessionId() bool {
	if o != nil && !IsNil(o.MigrationSessionId) {
		return true
	}

	return false
}

// SetMigrationSessionId gets a reference to the given string and assigns it to the MigrationSessionId field.
func (o *VolumeInstance) SetMigrationSessionId(v string) {
	o.MigrationSessionId = &v
}

// GetMetroReplicationSessionId returns the MetroReplicationSessionId field value if set, zero value otherwise.
func (o *VolumeInstance) GetMetroReplicationSessionId() string {
	if o == nil || IsNil(o.MetroReplicationSessionId) {
		var ret string
		return ret
	}
	return *o.MetroReplicationSessionId
}

// GetMetroReplicationSessionIdOk returns a tuple with the MetroReplicationSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetMetroReplicationSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.MetroReplicationSessionId) {
		return nil, false
	}
	return o.MetroReplicationSessionId, true
}

// HasMetroReplicationSessionId returns a boolean if a field has been set.
func (o *VolumeInstance) HasMetroReplicationSessionId() bool {
	if o != nil && !IsNil(o.MetroReplicationSessionId) {
		return true
	}

	return false
}

// SetMetroReplicationSessionId gets a reference to the given string and assigns it to the MetroReplicationSessionId field.
func (o *VolumeInstance) SetMetroReplicationSessionId(v string) {
	o.MetroReplicationSessionId = &v
}

// GetIsHostAccessAvailable returns the IsHostAccessAvailable field value if set, zero value otherwise.
func (o *VolumeInstance) GetIsHostAccessAvailable() bool {
	if o == nil || IsNil(o.IsHostAccessAvailable) {
		var ret bool
		return ret
	}
	return *o.IsHostAccessAvailable
}

// GetIsHostAccessAvailableOk returns a tuple with the IsHostAccessAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetIsHostAccessAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHostAccessAvailable) {
		return nil, false
	}
	return o.IsHostAccessAvailable, true
}

// HasIsHostAccessAvailable returns a boolean if a field has been set.
func (o *VolumeInstance) HasIsHostAccessAvailable() bool {
	if o != nil && !IsNil(o.IsHostAccessAvailable) {
		return true
	}

	return false
}

// SetIsHostAccessAvailable gets a reference to the given bool and assigns it to the IsHostAccessAvailable field.
func (o *VolumeInstance) SetIsHostAccessAvailable(v bool) {
	o.IsHostAccessAvailable = &v
}

// GetProtectionData returns the ProtectionData field value if set, zero value otherwise.
func (o *VolumeInstance) GetProtectionData() ProtectionDataInstance {
	if o == nil || IsNil(o.ProtectionData) {
		var ret ProtectionDataInstance
		return ret
	}
	return *o.ProtectionData
}

// GetProtectionDataOk returns a tuple with the ProtectionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetProtectionDataOk() (*ProtectionDataInstance, bool) {
	if o == nil || IsNil(o.ProtectionData) {
		return nil, false
	}
	return o.ProtectionData, true
}

// HasProtectionData returns a boolean if a field has been set.
func (o *VolumeInstance) HasProtectionData() bool {
	if o != nil && !IsNil(o.ProtectionData) {
		return true
	}

	return false
}

// SetProtectionData gets a reference to the given ProtectionDataInstance and assigns it to the ProtectionData field.
func (o *VolumeInstance) SetProtectionData(v ProtectionDataInstance) {
	o.ProtectionData = &v
}

// GetLocationHistory returns the LocationHistory field value if set, zero value otherwise.
func (o *VolumeInstance) GetLocationHistory() []LocationHistoryInstance {
	if o == nil || IsNil(o.LocationHistory) {
		var ret []LocationHistoryInstance
		return ret
	}
	return o.LocationHistory
}

// GetLocationHistoryOk returns a tuple with the LocationHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetLocationHistoryOk() ([]LocationHistoryInstance, bool) {
	if o == nil || IsNil(o.LocationHistory) {
		return nil, false
	}
	return o.LocationHistory, true
}

// HasLocationHistory returns a boolean if a field has been set.
func (o *VolumeInstance) HasLocationHistory() bool {
	if o != nil && !IsNil(o.LocationHistory) {
		return true
	}

	return false
}

// SetLocationHistory gets a reference to the given []LocationHistoryInstance and assigns it to the LocationHistory field.
func (o *VolumeInstance) SetLocationHistory(v []LocationHistoryInstance) {
	o.LocationHistory = v
}

// GetAppType returns the AppType field value if set, zero value otherwise.
func (o *VolumeInstance) GetAppType() AppTypeEnum {
	if o == nil || IsNil(o.AppType) {
		var ret AppTypeEnum
		return ret
	}
	return *o.AppType
}

// GetAppTypeOk returns a tuple with the AppType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetAppTypeOk() (*AppTypeEnum, bool) {
	if o == nil || IsNil(o.AppType) {
		return nil, false
	}
	return o.AppType, true
}

// HasAppType returns a boolean if a field has been set.
func (o *VolumeInstance) HasAppType() bool {
	if o != nil && !IsNil(o.AppType) {
		return true
	}

	return false
}

// SetAppType gets a reference to the given AppTypeEnum and assigns it to the AppType field.
func (o *VolumeInstance) SetAppType(v AppTypeEnum) {
	o.AppType = &v
}

// GetAppTypeOther returns the AppTypeOther field value if set, zero value otherwise.
func (o *VolumeInstance) GetAppTypeOther() string {
	if o == nil || IsNil(o.AppTypeOther) {
		var ret string
		return ret
	}
	return *o.AppTypeOther
}

// GetAppTypeOtherOk returns a tuple with the AppTypeOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetAppTypeOtherOk() (*string, bool) {
	if o == nil || IsNil(o.AppTypeOther) {
		return nil, false
	}
	return o.AppTypeOther, true
}

// HasAppTypeOther returns a boolean if a field has been set.
func (o *VolumeInstance) HasAppTypeOther() bool {
	if o != nil && !IsNil(o.AppTypeOther) {
		return true
	}

	return false
}

// SetAppTypeOther gets a reference to the given string and assigns it to the AppTypeOther field.
func (o *VolumeInstance) SetAppTypeOther(v string) {
	o.AppTypeOther = &v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *VolumeInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *VolumeInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *VolumeInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetStateL10n returns the StateL10n field value if set, zero value otherwise.
func (o *VolumeInstance) GetStateL10n() string {
	if o == nil || IsNil(o.StateL10n) {
		var ret string
		return ret
	}
	return *o.StateL10n
}

// GetStateL10nOk returns a tuple with the StateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StateL10n) {
		return nil, false
	}
	return o.StateL10n, true
}

// HasStateL10n returns a boolean if a field has been set.
func (o *VolumeInstance) HasStateL10n() bool {
	if o != nil && !IsNil(o.StateL10n) {
		return true
	}

	return false
}

// SetStateL10n gets a reference to the given string and assigns it to the StateL10n field.
func (o *VolumeInstance) SetStateL10n(v string) {
	o.StateL10n = &v
}

// GetNodeAffinityL10n returns the NodeAffinityL10n field value if set, zero value otherwise.
func (o *VolumeInstance) GetNodeAffinityL10n() string {
	if o == nil || IsNil(o.NodeAffinityL10n) {
		var ret string
		return ret
	}
	return *o.NodeAffinityL10n
}

// GetNodeAffinityL10nOk returns a tuple with the NodeAffinityL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetNodeAffinityL10nOk() (*string, bool) {
	if o == nil || IsNil(o.NodeAffinityL10n) {
		return nil, false
	}
	return o.NodeAffinityL10n, true
}

// HasNodeAffinityL10n returns a boolean if a field has been set.
func (o *VolumeInstance) HasNodeAffinityL10n() bool {
	if o != nil && !IsNil(o.NodeAffinityL10n) {
		return true
	}

	return false
}

// SetNodeAffinityL10n gets a reference to the given string and assigns it to the NodeAffinityL10n field.
func (o *VolumeInstance) SetNodeAffinityL10n(v string) {
	o.NodeAffinityL10n = &v
}

// GetAppTypeL10n returns the AppTypeL10n field value if set, zero value otherwise.
func (o *VolumeInstance) GetAppTypeL10n() string {
	if o == nil || IsNil(o.AppTypeL10n) {
		var ret string
		return ret
	}
	return *o.AppTypeL10n
}

// GetAppTypeL10nOk returns a tuple with the AppTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetAppTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.AppTypeL10n) {
		return nil, false
	}
	return o.AppTypeL10n, true
}

// HasAppTypeL10n returns a boolean if a field has been set.
func (o *VolumeInstance) HasAppTypeL10n() bool {
	if o != nil && !IsNil(o.AppTypeL10n) {
		return true
	}

	return false
}

// SetAppTypeL10n gets a reference to the given string and assigns it to the AppTypeL10n field.
func (o *VolumeInstance) SetAppTypeL10n(v string) {
	o.AppTypeL10n = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *VolumeInstance) GetAppliance() ApplianceInstance {
	if o == nil || IsNil(o.Appliance) {
		var ret ApplianceInstance
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetApplianceOk() (*ApplianceInstance, bool) {
	if o == nil || IsNil(o.Appliance) {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *VolumeInstance) HasAppliance() bool {
	if o != nil && !IsNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given ApplianceInstance and assigns it to the Appliance field.
func (o *VolumeInstance) SetAppliance(v ApplianceInstance) {
	o.Appliance = &v
}

// GetProtectionPolicy returns the ProtectionPolicy field value if set, zero value otherwise.
func (o *VolumeInstance) GetProtectionPolicy() PolicyInstance {
	if o == nil || IsNil(o.ProtectionPolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.ProtectionPolicy
}

// GetProtectionPolicyOk returns a tuple with the ProtectionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetProtectionPolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.ProtectionPolicy) {
		return nil, false
	}
	return o.ProtectionPolicy, true
}

// HasProtectionPolicy returns a boolean if a field has been set.
func (o *VolumeInstance) HasProtectionPolicy() bool {
	if o != nil && !IsNil(o.ProtectionPolicy) {
		return true
	}

	return false
}

// SetProtectionPolicy gets a reference to the given PolicyInstance and assigns it to the ProtectionPolicy field.
func (o *VolumeInstance) SetProtectionPolicy(v PolicyInstance) {
	o.ProtectionPolicy = &v
}

// GetQosPerformancePolicy returns the QosPerformancePolicy field value if set, zero value otherwise.
func (o *VolumeInstance) GetQosPerformancePolicy() PolicyInstance {
	if o == nil || IsNil(o.QosPerformancePolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.QosPerformancePolicy
}

// GetQosPerformancePolicyOk returns a tuple with the QosPerformancePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetQosPerformancePolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.QosPerformancePolicy) {
		return nil, false
	}
	return o.QosPerformancePolicy, true
}

// HasQosPerformancePolicy returns a boolean if a field has been set.
func (o *VolumeInstance) HasQosPerformancePolicy() bool {
	if o != nil && !IsNil(o.QosPerformancePolicy) {
		return true
	}

	return false
}

// SetQosPerformancePolicy gets a reference to the given PolicyInstance and assigns it to the QosPerformancePolicy field.
func (o *VolumeInstance) SetQosPerformancePolicy(v PolicyInstance) {
	o.QosPerformancePolicy = &v
}

// GetMigrationSession returns the MigrationSession field value if set, zero value otherwise.
func (o *VolumeInstance) GetMigrationSession() MigrationSessionInstance {
	if o == nil || IsNil(o.MigrationSession) {
		var ret MigrationSessionInstance
		return ret
	}
	return *o.MigrationSession
}

// GetMigrationSessionOk returns a tuple with the MigrationSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetMigrationSessionOk() (*MigrationSessionInstance, bool) {
	if o == nil || IsNil(o.MigrationSession) {
		return nil, false
	}
	return o.MigrationSession, true
}

// HasMigrationSession returns a boolean if a field has been set.
func (o *VolumeInstance) HasMigrationSession() bool {
	if o != nil && !IsNil(o.MigrationSession) {
		return true
	}

	return false
}

// SetMigrationSession gets a reference to the given MigrationSessionInstance and assigns it to the MigrationSession field.
func (o *VolumeInstance) SetMigrationSession(v MigrationSessionInstance) {
	o.MigrationSession = &v
}

// GetMappedVolumes returns the MappedVolumes field value if set, zero value otherwise.
func (o *VolumeInstance) GetMappedVolumes() []HostVolumeMappingInstance {
	if o == nil || IsNil(o.MappedVolumes) {
		var ret []HostVolumeMappingInstance
		return ret
	}
	return o.MappedVolumes
}

// GetMappedVolumesOk returns a tuple with the MappedVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetMappedVolumesOk() ([]HostVolumeMappingInstance, bool) {
	if o == nil || IsNil(o.MappedVolumes) {
		return nil, false
	}
	return o.MappedVolumes, true
}

// HasMappedVolumes returns a boolean if a field has been set.
func (o *VolumeInstance) HasMappedVolumes() bool {
	if o != nil && !IsNil(o.MappedVolumes) {
		return true
	}

	return false
}

// SetMappedVolumes gets a reference to the given []HostVolumeMappingInstance and assigns it to the MappedVolumes field.
func (o *VolumeInstance) SetMappedVolumes(v []HostVolumeMappingInstance) {
	o.MappedVolumes = v
}

// GetRemoteSnapshotSessions returns the RemoteSnapshotSessions field value if set, zero value otherwise.
func (o *VolumeInstance) GetRemoteSnapshotSessions() []RemoteSnapshotSessionInstance {
	if o == nil || IsNil(o.RemoteSnapshotSessions) {
		var ret []RemoteSnapshotSessionInstance
		return ret
	}
	return o.RemoteSnapshotSessions
}

// GetRemoteSnapshotSessionsOk returns a tuple with the RemoteSnapshotSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetRemoteSnapshotSessionsOk() ([]RemoteSnapshotSessionInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshotSessions) {
		return nil, false
	}
	return o.RemoteSnapshotSessions, true
}

// HasRemoteSnapshotSessions returns a boolean if a field has been set.
func (o *VolumeInstance) HasRemoteSnapshotSessions() bool {
	if o != nil && !IsNil(o.RemoteSnapshotSessions) {
		return true
	}

	return false
}

// SetRemoteSnapshotSessions gets a reference to the given []RemoteSnapshotSessionInstance and assigns it to the RemoteSnapshotSessions field.
func (o *VolumeInstance) SetRemoteSnapshotSessions(v []RemoteSnapshotSessionInstance) {
	o.RemoteSnapshotSessions = v
}

// GetCurrentRemoteSnapshotSessions returns the CurrentRemoteSnapshotSessions field value if set, zero value otherwise.
func (o *VolumeInstance) GetCurrentRemoteSnapshotSessions() []RemoteSnapshotSessionInstance {
	if o == nil || IsNil(o.CurrentRemoteSnapshotSessions) {
		var ret []RemoteSnapshotSessionInstance
		return ret
	}
	return o.CurrentRemoteSnapshotSessions
}

// GetCurrentRemoteSnapshotSessionsOk returns a tuple with the CurrentRemoteSnapshotSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetCurrentRemoteSnapshotSessionsOk() ([]RemoteSnapshotSessionInstance, bool) {
	if o == nil || IsNil(o.CurrentRemoteSnapshotSessions) {
		return nil, false
	}
	return o.CurrentRemoteSnapshotSessions, true
}

// HasCurrentRemoteSnapshotSessions returns a boolean if a field has been set.
func (o *VolumeInstance) HasCurrentRemoteSnapshotSessions() bool {
	if o != nil && !IsNil(o.CurrentRemoteSnapshotSessions) {
		return true
	}

	return false
}

// SetCurrentRemoteSnapshotSessions gets a reference to the given []RemoteSnapshotSessionInstance and assigns it to the CurrentRemoteSnapshotSessions field.
func (o *VolumeInstance) SetCurrentRemoteSnapshotSessions(v []RemoteSnapshotSessionInstance) {
	o.CurrentRemoteSnapshotSessions = v
}

// GetRemoteSnapshots returns the RemoteSnapshots field value if set, zero value otherwise.
func (o *VolumeInstance) GetRemoteSnapshots() []RemoteSnapshotInstance {
	if o == nil || IsNil(o.RemoteSnapshots) {
		var ret []RemoteSnapshotInstance
		return ret
	}
	return o.RemoteSnapshots
}

// GetRemoteSnapshotsOk returns a tuple with the RemoteSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetRemoteSnapshotsOk() ([]RemoteSnapshotInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshots) {
		return nil, false
	}
	return o.RemoteSnapshots, true
}

// HasRemoteSnapshots returns a boolean if a field has been set.
func (o *VolumeInstance) HasRemoteSnapshots() bool {
	if o != nil && !IsNil(o.RemoteSnapshots) {
		return true
	}

	return false
}

// SetRemoteSnapshots gets a reference to the given []RemoteSnapshotInstance and assigns it to the RemoteSnapshots field.
func (o *VolumeInstance) SetRemoteSnapshots(v []RemoteSnapshotInstance) {
	o.RemoteSnapshots = v
}

// GetVolumeGroups returns the VolumeGroups field value if set, zero value otherwise.
func (o *VolumeInstance) GetVolumeGroups() []VolumeGroupInstance {
	if o == nil || IsNil(o.VolumeGroups) {
		var ret []VolumeGroupInstance
		return ret
	}
	return o.VolumeGroups
}

// GetVolumeGroupsOk returns a tuple with the VolumeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetVolumeGroupsOk() ([]VolumeGroupInstance, bool) {
	if o == nil || IsNil(o.VolumeGroups) {
		return nil, false
	}
	return o.VolumeGroups, true
}

// HasVolumeGroups returns a boolean if a field has been set.
func (o *VolumeInstance) HasVolumeGroups() bool {
	if o != nil && !IsNil(o.VolumeGroups) {
		return true
	}

	return false
}

// SetVolumeGroups gets a reference to the given []VolumeGroupInstance and assigns it to the VolumeGroups field.
func (o *VolumeInstance) SetVolumeGroups(v []VolumeGroupInstance) {
	o.VolumeGroups = v
}

// GetDatastores returns the Datastores field value if set, zero value otherwise.
func (o *VolumeInstance) GetDatastores() []DatastoreInstance {
	if o == nil || IsNil(o.Datastores) {
		var ret []DatastoreInstance
		return ret
	}
	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetDatastoresOk() ([]DatastoreInstance, bool) {
	if o == nil || IsNil(o.Datastores) {
		return nil, false
	}
	return o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *VolumeInstance) HasDatastores() bool {
	if o != nil && !IsNil(o.Datastores) {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []DatastoreInstance and assigns it to the Datastores field.
func (o *VolumeInstance) SetDatastores(v []DatastoreInstance) {
	o.Datastores = v
}

// GetReplicationSessions returns the ReplicationSessions field value if set, zero value otherwise.
func (o *VolumeInstance) GetReplicationSessions() []ReplicationSessionInstance {
	if o == nil || IsNil(o.ReplicationSessions) {
		var ret []ReplicationSessionInstance
		return ret
	}
	return o.ReplicationSessions
}

// GetReplicationSessionsOk returns a tuple with the ReplicationSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInstance) GetReplicationSessionsOk() ([]ReplicationSessionInstance, bool) {
	if o == nil || IsNil(o.ReplicationSessions) {
		return nil, false
	}
	return o.ReplicationSessions, true
}

// HasReplicationSessions returns a boolean if a field has been set.
func (o *VolumeInstance) HasReplicationSessions() bool {
	if o != nil && !IsNil(o.ReplicationSessions) {
		return true
	}

	return false
}

// SetReplicationSessions gets a reference to the given []ReplicationSessionInstance and assigns it to the ReplicationSessions field.
func (o *VolumeInstance) SetReplicationSessions(v []ReplicationSessionInstance) {
	o.ReplicationSessions = v
}

func (o VolumeInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Wwn) {
		toSerialize["wwn"] = o.Wwn
	}
	if !IsNil(o.Nsid) {
		toSerialize["nsid"] = o.Nsid
	}
	if !IsNil(o.Nguid) {
		toSerialize["nguid"] = o.Nguid
	}
	if !IsNil(o.ApplianceId) {
		toSerialize["appliance_id"] = o.ApplianceId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.LogicalUsed) {
		toSerialize["logical_used"] = o.LogicalUsed
	}
	if !IsNil(o.NodeAffinity) {
		toSerialize["node_affinity"] = o.NodeAffinity
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.ProtectionPolicyId) {
		toSerialize["protection_policy_id"] = o.ProtectionPolicyId
	}
	if !IsNil(o.PerformancePolicyId) {
		toSerialize["performance_policy_id"] = o.PerformancePolicyId
	}
	if !IsNil(o.QosPerformancePolicyId) {
		toSerialize["qos_performance_policy_id"] = o.QosPerformancePolicyId
	}
	if !IsNil(o.IsReplicationDestination) {
		toSerialize["is_replication_destination"] = o.IsReplicationDestination
	}
	if !IsNil(o.MigrationSessionId) {
		toSerialize["migration_session_id"] = o.MigrationSessionId
	}
	if !IsNil(o.MetroReplicationSessionId) {
		toSerialize["metro_replication_session_id"] = o.MetroReplicationSessionId
	}
	if !IsNil(o.IsHostAccessAvailable) {
		toSerialize["is_host_access_available"] = o.IsHostAccessAvailable
	}
	if !IsNil(o.ProtectionData) {
		toSerialize["protection_data"] = o.ProtectionData
	}
	if !IsNil(o.LocationHistory) {
		toSerialize["location_history"] = o.LocationHistory
	}
	if !IsNil(o.AppType) {
		toSerialize["app_type"] = o.AppType
	}
	if !IsNil(o.AppTypeOther) {
		toSerialize["app_type_other"] = o.AppTypeOther
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.StateL10n) {
		toSerialize["state_l10n"] = o.StateL10n
	}
	if !IsNil(o.NodeAffinityL10n) {
		toSerialize["node_affinity_l10n"] = o.NodeAffinityL10n
	}
	if !IsNil(o.AppTypeL10n) {
		toSerialize["app_type_l10n"] = o.AppTypeL10n
	}
	if !IsNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	if !IsNil(o.ProtectionPolicy) {
		toSerialize["protection_policy"] = o.ProtectionPolicy
	}
	if !IsNil(o.QosPerformancePolicy) {
		toSerialize["qos_performance_policy"] = o.QosPerformancePolicy
	}
	if !IsNil(o.MigrationSession) {
		toSerialize["migration_session"] = o.MigrationSession
	}
	if !IsNil(o.MappedVolumes) {
		toSerialize["mapped_volumes"] = o.MappedVolumes
	}
	if !IsNil(o.RemoteSnapshotSessions) {
		toSerialize["remote_snapshot_sessions"] = o.RemoteSnapshotSessions
	}
	if !IsNil(o.CurrentRemoteSnapshotSessions) {
		toSerialize["current_remote_snapshot_sessions"] = o.CurrentRemoteSnapshotSessions
	}
	if !IsNil(o.RemoteSnapshots) {
		toSerialize["remote_snapshots"] = o.RemoteSnapshots
	}
	if !IsNil(o.VolumeGroups) {
		toSerialize["volume_groups"] = o.VolumeGroups
	}
	if !IsNil(o.Datastores) {
		toSerialize["datastores"] = o.Datastores
	}
	if !IsNil(o.ReplicationSessions) {
		toSerialize["replication_sessions"] = o.ReplicationSessions
	}
	return toSerialize, nil
}

type NullableVolumeInstance struct {
	value *VolumeInstance
	isSet bool
}

func (v NullableVolumeInstance) Get() *VolumeInstance {
	return v.value
}

func (v *NullableVolumeInstance) Set(val *VolumeInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInstance(val *VolumeInstance) *NullableVolumeInstance {
	return &NullableVolumeInstance{value: val, isSet: true}
}

func (v NullableVolumeInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


