/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the SmbShareInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmbShareInstance{}

// SmbShareInstance This resource type has queriable association from file_system
type SmbShareInstance struct {
	// Id of the SMB Share.
	Id *string `json:"id,omitempty"`
	// The file system from which the share was created.
	FileSystemId *string `json:"file_system_id,omitempty"`
	// SMB share name.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Local path to the file system or any existing sub-folder of the file system that is shared over the network. This path is relative to the NAS Server and must start with the filesystem's mountpoint path, which is the filesystem name. For example to share the top-level of a filesystem named svr1fs1, which is on the /svr1fs1 mountpoint of the NAS Server, use /svr1fs1 in the path parameter. SMB shares allow you to create multiple network shares for the same local path. 
	Path *string `json:"path,omitempty"`
	// User defined SMB share description.
	Description *string `json:"description,omitempty"`
	// Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share. 
	IsContinuousAvailabilityEnabled *bool `json:"is_continuous_availability_enabled,omitempty"`
	// Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - Encryption for SMB 3.0 is enabled. - false - Encryption for SMB 3.0 is disabled. 
	IsEncryptionEnabled *bool `json:"is_encryption_enabled,omitempty"`
	// Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those to which the requesting user has access. Values are: - true - ABE is enabled. - false - ABE is disabled. 
	IsABEEnabled *bool `json:"is_ABE_enabled,omitempty"`
	// Indicates whether BranchCache optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled. 
	IsBranchCacheEnabled *bool `json:"is_branch_cache_enabled,omitempty"`
	OfflineAvailability *SMBShareOfflineAvailabilityEnum `json:"offline_availability,omitempty"`
	// The default UNIX umask for new files created on the Share. If not specified the umask defaults to 022.
	Umask *string `json:"umask,omitempty"`
	// Localized message string corresponding to offline_availability
	OfflineAvailabilityL10n *string `json:"offline_availability_l10n,omitempty"`
	FileSystem *FileSystemInstance `json:"file_system,omitempty"`
}

// NewSmbShareInstance instantiates a new SmbShareInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbShareInstance() *SmbShareInstance {
	this := SmbShareInstance{}
	var offlineAvailability SMBShareOfflineAvailabilityEnum = SMBSHAREOFFLINEAVAILABILITYENUM_NONE
	this.OfflineAvailability = &offlineAvailability
	var umask string = "022"
	this.Umask = &umask
	return &this
}

// NewSmbShareInstanceWithDefaults instantiates a new SmbShareInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbShareInstanceWithDefaults() *SmbShareInstance {
	this := SmbShareInstance{}
	var offlineAvailability SMBShareOfflineAvailabilityEnum = SMBSHAREOFFLINEAVAILABILITYENUM_NONE
	this.OfflineAvailability = &offlineAvailability
	var umask string = "022"
	this.Umask = &umask
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SmbShareInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SmbShareInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SmbShareInstance) SetId(v string) {
	o.Id = &v
}

// GetFileSystemId returns the FileSystemId field value if set, zero value otherwise.
func (o *SmbShareInstance) GetFileSystemId() string {
	if o == nil || IsNil(o.FileSystemId) {
		var ret string
		return ret
	}
	return *o.FileSystemId
}

// GetFileSystemIdOk returns a tuple with the FileSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetFileSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.FileSystemId) {
		return nil, false
	}
	return o.FileSystemId, true
}

// HasFileSystemId returns a boolean if a field has been set.
func (o *SmbShareInstance) HasFileSystemId() bool {
	if o != nil && !IsNil(o.FileSystemId) {
		return true
	}

	return false
}

// SetFileSystemId gets a reference to the given string and assigns it to the FileSystemId field.
func (o *SmbShareInstance) SetFileSystemId(v string) {
	o.FileSystemId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmbShareInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmbShareInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmbShareInstance) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SmbShareInstance) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SmbShareInstance) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *SmbShareInstance) SetPath(v string) {
	o.Path = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SmbShareInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SmbShareInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SmbShareInstance) SetDescription(v string) {
	o.Description = &v
}

// GetIsContinuousAvailabilityEnabled returns the IsContinuousAvailabilityEnabled field value if set, zero value otherwise.
func (o *SmbShareInstance) GetIsContinuousAvailabilityEnabled() bool {
	if o == nil || IsNil(o.IsContinuousAvailabilityEnabled) {
		var ret bool
		return ret
	}
	return *o.IsContinuousAvailabilityEnabled
}

// GetIsContinuousAvailabilityEnabledOk returns a tuple with the IsContinuousAvailabilityEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetIsContinuousAvailabilityEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsContinuousAvailabilityEnabled) {
		return nil, false
	}
	return o.IsContinuousAvailabilityEnabled, true
}

// HasIsContinuousAvailabilityEnabled returns a boolean if a field has been set.
func (o *SmbShareInstance) HasIsContinuousAvailabilityEnabled() bool {
	if o != nil && !IsNil(o.IsContinuousAvailabilityEnabled) {
		return true
	}

	return false
}

// SetIsContinuousAvailabilityEnabled gets a reference to the given bool and assigns it to the IsContinuousAvailabilityEnabled field.
func (o *SmbShareInstance) SetIsContinuousAvailabilityEnabled(v bool) {
	o.IsContinuousAvailabilityEnabled = &v
}

// GetIsEncryptionEnabled returns the IsEncryptionEnabled field value if set, zero value otherwise.
func (o *SmbShareInstance) GetIsEncryptionEnabled() bool {
	if o == nil || IsNil(o.IsEncryptionEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEncryptionEnabled
}

// GetIsEncryptionEnabledOk returns a tuple with the IsEncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetIsEncryptionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEncryptionEnabled) {
		return nil, false
	}
	return o.IsEncryptionEnabled, true
}

// HasIsEncryptionEnabled returns a boolean if a field has been set.
func (o *SmbShareInstance) HasIsEncryptionEnabled() bool {
	if o != nil && !IsNil(o.IsEncryptionEnabled) {
		return true
	}

	return false
}

// SetIsEncryptionEnabled gets a reference to the given bool and assigns it to the IsEncryptionEnabled field.
func (o *SmbShareInstance) SetIsEncryptionEnabled(v bool) {
	o.IsEncryptionEnabled = &v
}

// GetIsABEEnabled returns the IsABEEnabled field value if set, zero value otherwise.
func (o *SmbShareInstance) GetIsABEEnabled() bool {
	if o == nil || IsNil(o.IsABEEnabled) {
		var ret bool
		return ret
	}
	return *o.IsABEEnabled
}

// GetIsABEEnabledOk returns a tuple with the IsABEEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetIsABEEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsABEEnabled) {
		return nil, false
	}
	return o.IsABEEnabled, true
}

// HasIsABEEnabled returns a boolean if a field has been set.
func (o *SmbShareInstance) HasIsABEEnabled() bool {
	if o != nil && !IsNil(o.IsABEEnabled) {
		return true
	}

	return false
}

// SetIsABEEnabled gets a reference to the given bool and assigns it to the IsABEEnabled field.
func (o *SmbShareInstance) SetIsABEEnabled(v bool) {
	o.IsABEEnabled = &v
}

// GetIsBranchCacheEnabled returns the IsBranchCacheEnabled field value if set, zero value otherwise.
func (o *SmbShareInstance) GetIsBranchCacheEnabled() bool {
	if o == nil || IsNil(o.IsBranchCacheEnabled) {
		var ret bool
		return ret
	}
	return *o.IsBranchCacheEnabled
}

// GetIsBranchCacheEnabledOk returns a tuple with the IsBranchCacheEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetIsBranchCacheEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBranchCacheEnabled) {
		return nil, false
	}
	return o.IsBranchCacheEnabled, true
}

// HasIsBranchCacheEnabled returns a boolean if a field has been set.
func (o *SmbShareInstance) HasIsBranchCacheEnabled() bool {
	if o != nil && !IsNil(o.IsBranchCacheEnabled) {
		return true
	}

	return false
}

// SetIsBranchCacheEnabled gets a reference to the given bool and assigns it to the IsBranchCacheEnabled field.
func (o *SmbShareInstance) SetIsBranchCacheEnabled(v bool) {
	o.IsBranchCacheEnabled = &v
}

// GetOfflineAvailability returns the OfflineAvailability field value if set, zero value otherwise.
func (o *SmbShareInstance) GetOfflineAvailability() SMBShareOfflineAvailabilityEnum {
	if o == nil || IsNil(o.OfflineAvailability) {
		var ret SMBShareOfflineAvailabilityEnum
		return ret
	}
	return *o.OfflineAvailability
}

// GetOfflineAvailabilityOk returns a tuple with the OfflineAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetOfflineAvailabilityOk() (*SMBShareOfflineAvailabilityEnum, bool) {
	if o == nil || IsNil(o.OfflineAvailability) {
		return nil, false
	}
	return o.OfflineAvailability, true
}

// HasOfflineAvailability returns a boolean if a field has been set.
func (o *SmbShareInstance) HasOfflineAvailability() bool {
	if o != nil && !IsNil(o.OfflineAvailability) {
		return true
	}

	return false
}

// SetOfflineAvailability gets a reference to the given SMBShareOfflineAvailabilityEnum and assigns it to the OfflineAvailability field.
func (o *SmbShareInstance) SetOfflineAvailability(v SMBShareOfflineAvailabilityEnum) {
	o.OfflineAvailability = &v
}

// GetUmask returns the Umask field value if set, zero value otherwise.
func (o *SmbShareInstance) GetUmask() string {
	if o == nil || IsNil(o.Umask) {
		var ret string
		return ret
	}
	return *o.Umask
}

// GetUmaskOk returns a tuple with the Umask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetUmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Umask) {
		return nil, false
	}
	return o.Umask, true
}

// HasUmask returns a boolean if a field has been set.
func (o *SmbShareInstance) HasUmask() bool {
	if o != nil && !IsNil(o.Umask) {
		return true
	}

	return false
}

// SetUmask gets a reference to the given string and assigns it to the Umask field.
func (o *SmbShareInstance) SetUmask(v string) {
	o.Umask = &v
}

// GetOfflineAvailabilityL10n returns the OfflineAvailabilityL10n field value if set, zero value otherwise.
func (o *SmbShareInstance) GetOfflineAvailabilityL10n() string {
	if o == nil || IsNil(o.OfflineAvailabilityL10n) {
		var ret string
		return ret
	}
	return *o.OfflineAvailabilityL10n
}

// GetOfflineAvailabilityL10nOk returns a tuple with the OfflineAvailabilityL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetOfflineAvailabilityL10nOk() (*string, bool) {
	if o == nil || IsNil(o.OfflineAvailabilityL10n) {
		return nil, false
	}
	return o.OfflineAvailabilityL10n, true
}

// HasOfflineAvailabilityL10n returns a boolean if a field has been set.
func (o *SmbShareInstance) HasOfflineAvailabilityL10n() bool {
	if o != nil && !IsNil(o.OfflineAvailabilityL10n) {
		return true
	}

	return false
}

// SetOfflineAvailabilityL10n gets a reference to the given string and assigns it to the OfflineAvailabilityL10n field.
func (o *SmbShareInstance) SetOfflineAvailabilityL10n(v string) {
	o.OfflineAvailabilityL10n = &v
}

// GetFileSystem returns the FileSystem field value if set, zero value otherwise.
func (o *SmbShareInstance) GetFileSystem() FileSystemInstance {
	if o == nil || IsNil(o.FileSystem) {
		var ret FileSystemInstance
		return ret
	}
	return *o.FileSystem
}

// GetFileSystemOk returns a tuple with the FileSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbShareInstance) GetFileSystemOk() (*FileSystemInstance, bool) {
	if o == nil || IsNil(o.FileSystem) {
		return nil, false
	}
	return o.FileSystem, true
}

// HasFileSystem returns a boolean if a field has been set.
func (o *SmbShareInstance) HasFileSystem() bool {
	if o != nil && !IsNil(o.FileSystem) {
		return true
	}

	return false
}

// SetFileSystem gets a reference to the given FileSystemInstance and assigns it to the FileSystem field.
func (o *SmbShareInstance) SetFileSystem(v FileSystemInstance) {
	o.FileSystem = &v
}

func (o SmbShareInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmbShareInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FileSystemId) {
		toSerialize["file_system_id"] = o.FileSystemId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsContinuousAvailabilityEnabled) {
		toSerialize["is_continuous_availability_enabled"] = o.IsContinuousAvailabilityEnabled
	}
	if !IsNil(o.IsEncryptionEnabled) {
		toSerialize["is_encryption_enabled"] = o.IsEncryptionEnabled
	}
	if !IsNil(o.IsABEEnabled) {
		toSerialize["is_ABE_enabled"] = o.IsABEEnabled
	}
	if !IsNil(o.IsBranchCacheEnabled) {
		toSerialize["is_branch_cache_enabled"] = o.IsBranchCacheEnabled
	}
	if !IsNil(o.OfflineAvailability) {
		toSerialize["offline_availability"] = o.OfflineAvailability
	}
	if !IsNil(o.Umask) {
		toSerialize["umask"] = o.Umask
	}
	if !IsNil(o.OfflineAvailabilityL10n) {
		toSerialize["offline_availability_l10n"] = o.OfflineAvailabilityL10n
	}
	if !IsNil(o.FileSystem) {
		toSerialize["file_system"] = o.FileSystem
	}
	return toSerialize, nil
}

type NullableSmbShareInstance struct {
	value *SmbShareInstance
	isSet bool
}

func (v NullableSmbShareInstance) Get() *SmbShareInstance {
	return v.value
}

func (v *NullableSmbShareInstance) Set(val *SmbShareInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbShareInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbShareInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbShareInstance(val *SmbShareInstance) *NullableSmbShareInstance {
	return &NullableSmbShareInstance{value: val, isSet: true}
}

func (v NullableSmbShareInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbShareInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


