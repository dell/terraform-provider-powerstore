/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the NvmeDiscoveredCdcInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NvmeDiscoveredCdcInstance{}

// NvmeDiscoveredCdcInstance Properties of an NVMe Centralized Discovery Controller (CDC). Was added in version 3.0.0.0. This resource type has queriable association from ip_pool_address
type NvmeDiscoveredCdcInstance struct {
	// Unique identifier of the CDC.
	Id *string `json:"id,omitempty"`
	// Identifier of the IP address being used for NVMe/TCP through which CDC was discovered.
	IpPoolAddressId *string `json:"ip_pool_address_id,omitempty"`
	// IP address of the CDC.
	NvmeCdcAddress *string `json:"nvme_cdc_address,omitempty"`
	// TCP port of the CDC.
	NvmeCdcPort *int32 `json:"nvme_cdc_port,omitempty"`
	// NVMe Qualified Name of the CDC.
	NvmeCdcNqn *string `json:"nvme_cdc_nqn,omitempty"`
	NvmeCdcConnectionState *NvmeCdcConnectionStateEnum `json:"nvme_cdc_connection_state,omitempty"`
	// Localized message string corresponding to nvme_cdc_connection_state Was added in version 3.0.0.0.
	NvmeCdcConnectionStateL10n *string `json:"nvme_cdc_connection_state_l10n,omitempty"`
	IpPoolAddress *IpPoolAddressInstance `json:"ip_pool_address,omitempty"`
}

// NewNvmeDiscoveredCdcInstance instantiates a new NvmeDiscoveredCdcInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNvmeDiscoveredCdcInstance() *NvmeDiscoveredCdcInstance {
	this := NvmeDiscoveredCdcInstance{}
	return &this
}

// NewNvmeDiscoveredCdcInstanceWithDefaults instantiates a new NvmeDiscoveredCdcInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNvmeDiscoveredCdcInstanceWithDefaults() *NvmeDiscoveredCdcInstance {
	this := NvmeDiscoveredCdcInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NvmeDiscoveredCdcInstance) SetId(v string) {
	o.Id = &v
}

// GetIpPoolAddressId returns the IpPoolAddressId field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetIpPoolAddressId() string {
	if o == nil || IsNil(o.IpPoolAddressId) {
		var ret string
		return ret
	}
	return *o.IpPoolAddressId
}

// GetIpPoolAddressIdOk returns a tuple with the IpPoolAddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetIpPoolAddressIdOk() (*string, bool) {
	if o == nil || IsNil(o.IpPoolAddressId) {
		return nil, false
	}
	return o.IpPoolAddressId, true
}

// HasIpPoolAddressId returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasIpPoolAddressId() bool {
	if o != nil && !IsNil(o.IpPoolAddressId) {
		return true
	}

	return false
}

// SetIpPoolAddressId gets a reference to the given string and assigns it to the IpPoolAddressId field.
func (o *NvmeDiscoveredCdcInstance) SetIpPoolAddressId(v string) {
	o.IpPoolAddressId = &v
}

// GetNvmeCdcAddress returns the NvmeCdcAddress field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcAddress() string {
	if o == nil || IsNil(o.NvmeCdcAddress) {
		var ret string
		return ret
	}
	return *o.NvmeCdcAddress
}

// GetNvmeCdcAddressOk returns a tuple with the NvmeCdcAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcAddressOk() (*string, bool) {
	if o == nil || IsNil(o.NvmeCdcAddress) {
		return nil, false
	}
	return o.NvmeCdcAddress, true
}

// HasNvmeCdcAddress returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasNvmeCdcAddress() bool {
	if o != nil && !IsNil(o.NvmeCdcAddress) {
		return true
	}

	return false
}

// SetNvmeCdcAddress gets a reference to the given string and assigns it to the NvmeCdcAddress field.
func (o *NvmeDiscoveredCdcInstance) SetNvmeCdcAddress(v string) {
	o.NvmeCdcAddress = &v
}

// GetNvmeCdcPort returns the NvmeCdcPort field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcPort() int32 {
	if o == nil || IsNil(o.NvmeCdcPort) {
		var ret int32
		return ret
	}
	return *o.NvmeCdcPort
}

// GetNvmeCdcPortOk returns a tuple with the NvmeCdcPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcPortOk() (*int32, bool) {
	if o == nil || IsNil(o.NvmeCdcPort) {
		return nil, false
	}
	return o.NvmeCdcPort, true
}

// HasNvmeCdcPort returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasNvmeCdcPort() bool {
	if o != nil && !IsNil(o.NvmeCdcPort) {
		return true
	}

	return false
}

// SetNvmeCdcPort gets a reference to the given int32 and assigns it to the NvmeCdcPort field.
func (o *NvmeDiscoveredCdcInstance) SetNvmeCdcPort(v int32) {
	o.NvmeCdcPort = &v
}

// GetNvmeCdcNqn returns the NvmeCdcNqn field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcNqn() string {
	if o == nil || IsNil(o.NvmeCdcNqn) {
		var ret string
		return ret
	}
	return *o.NvmeCdcNqn
}

// GetNvmeCdcNqnOk returns a tuple with the NvmeCdcNqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcNqnOk() (*string, bool) {
	if o == nil || IsNil(o.NvmeCdcNqn) {
		return nil, false
	}
	return o.NvmeCdcNqn, true
}

// HasNvmeCdcNqn returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasNvmeCdcNqn() bool {
	if o != nil && !IsNil(o.NvmeCdcNqn) {
		return true
	}

	return false
}

// SetNvmeCdcNqn gets a reference to the given string and assigns it to the NvmeCdcNqn field.
func (o *NvmeDiscoveredCdcInstance) SetNvmeCdcNqn(v string) {
	o.NvmeCdcNqn = &v
}

// GetNvmeCdcConnectionState returns the NvmeCdcConnectionState field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcConnectionState() NvmeCdcConnectionStateEnum {
	if o == nil || IsNil(o.NvmeCdcConnectionState) {
		var ret NvmeCdcConnectionStateEnum
		return ret
	}
	return *o.NvmeCdcConnectionState
}

// GetNvmeCdcConnectionStateOk returns a tuple with the NvmeCdcConnectionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcConnectionStateOk() (*NvmeCdcConnectionStateEnum, bool) {
	if o == nil || IsNil(o.NvmeCdcConnectionState) {
		return nil, false
	}
	return o.NvmeCdcConnectionState, true
}

// HasNvmeCdcConnectionState returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasNvmeCdcConnectionState() bool {
	if o != nil && !IsNil(o.NvmeCdcConnectionState) {
		return true
	}

	return false
}

// SetNvmeCdcConnectionState gets a reference to the given NvmeCdcConnectionStateEnum and assigns it to the NvmeCdcConnectionState field.
func (o *NvmeDiscoveredCdcInstance) SetNvmeCdcConnectionState(v NvmeCdcConnectionStateEnum) {
	o.NvmeCdcConnectionState = &v
}

// GetNvmeCdcConnectionStateL10n returns the NvmeCdcConnectionStateL10n field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcConnectionStateL10n() string {
	if o == nil || IsNil(o.NvmeCdcConnectionStateL10n) {
		var ret string
		return ret
	}
	return *o.NvmeCdcConnectionStateL10n
}

// GetNvmeCdcConnectionStateL10nOk returns a tuple with the NvmeCdcConnectionStateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetNvmeCdcConnectionStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.NvmeCdcConnectionStateL10n) {
		return nil, false
	}
	return o.NvmeCdcConnectionStateL10n, true
}

// HasNvmeCdcConnectionStateL10n returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasNvmeCdcConnectionStateL10n() bool {
	if o != nil && !IsNil(o.NvmeCdcConnectionStateL10n) {
		return true
	}

	return false
}

// SetNvmeCdcConnectionStateL10n gets a reference to the given string and assigns it to the NvmeCdcConnectionStateL10n field.
func (o *NvmeDiscoveredCdcInstance) SetNvmeCdcConnectionStateL10n(v string) {
	o.NvmeCdcConnectionStateL10n = &v
}

// GetIpPoolAddress returns the IpPoolAddress field value if set, zero value otherwise.
func (o *NvmeDiscoveredCdcInstance) GetIpPoolAddress() IpPoolAddressInstance {
	if o == nil || IsNil(o.IpPoolAddress) {
		var ret IpPoolAddressInstance
		return ret
	}
	return *o.IpPoolAddress
}

// GetIpPoolAddressOk returns a tuple with the IpPoolAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NvmeDiscoveredCdcInstance) GetIpPoolAddressOk() (*IpPoolAddressInstance, bool) {
	if o == nil || IsNil(o.IpPoolAddress) {
		return nil, false
	}
	return o.IpPoolAddress, true
}

// HasIpPoolAddress returns a boolean if a field has been set.
func (o *NvmeDiscoveredCdcInstance) HasIpPoolAddress() bool {
	if o != nil && !IsNil(o.IpPoolAddress) {
		return true
	}

	return false
}

// SetIpPoolAddress gets a reference to the given IpPoolAddressInstance and assigns it to the IpPoolAddress field.
func (o *NvmeDiscoveredCdcInstance) SetIpPoolAddress(v IpPoolAddressInstance) {
	o.IpPoolAddress = &v
}

func (o NvmeDiscoveredCdcInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NvmeDiscoveredCdcInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpPoolAddressId) {
		toSerialize["ip_pool_address_id"] = o.IpPoolAddressId
	}
	if !IsNil(o.NvmeCdcAddress) {
		toSerialize["nvme_cdc_address"] = o.NvmeCdcAddress
	}
	if !IsNil(o.NvmeCdcPort) {
		toSerialize["nvme_cdc_port"] = o.NvmeCdcPort
	}
	if !IsNil(o.NvmeCdcNqn) {
		toSerialize["nvme_cdc_nqn"] = o.NvmeCdcNqn
	}
	if !IsNil(o.NvmeCdcConnectionState) {
		toSerialize["nvme_cdc_connection_state"] = o.NvmeCdcConnectionState
	}
	if !IsNil(o.NvmeCdcConnectionStateL10n) {
		toSerialize["nvme_cdc_connection_state_l10n"] = o.NvmeCdcConnectionStateL10n
	}
	if !IsNil(o.IpPoolAddress) {
		toSerialize["ip_pool_address"] = o.IpPoolAddress
	}
	return toSerialize, nil
}

type NullableNvmeDiscoveredCdcInstance struct {
	value *NvmeDiscoveredCdcInstance
	isSet bool
}

func (v NullableNvmeDiscoveredCdcInstance) Get() *NvmeDiscoveredCdcInstance {
	return v.value
}

func (v *NullableNvmeDiscoveredCdcInstance) Set(val *NvmeDiscoveredCdcInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableNvmeDiscoveredCdcInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableNvmeDiscoveredCdcInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNvmeDiscoveredCdcInstance(val *NvmeDiscoveredCdcInstance) *NullableNvmeDiscoveredCdcInstance {
	return &NullableNvmeDiscoveredCdcInstance{value: val, isSet: true}
}

func (v NullableNvmeDiscoveredCdcInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNvmeDiscoveredCdcInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


