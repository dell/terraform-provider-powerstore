/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the VirtualVolumeInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualVolumeInstance{}

// VirtualVolumeInstance A virtual volume. This resource type has queriable associations from appliance, storage_container, replication_group, migration_session, virtual_volume, policy, host_virtual_volume_mapping, virtual_machine
type VirtualVolumeInstance struct {
	// The unique identifier of the virtual volume.
	Id *string `json:"id,omitempty"`
	// The name of the virtual volume, based on metadata provided by vSphere.   This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// The size of the virtual volume in bytes.
	Size *int64 `json:"size,omitempty"`
	Type *VirtualVolumeTypeEnum `json:"type,omitempty"`
	UsageType *VirtualVolumeUsageTypeEnum `json:"usage_type,omitempty"`
	// The appliance where the virtual volume resides.
	ApplianceId *string `json:"appliance_id,omitempty"`
	// The storage container where the virtual volume resides.
	StorageContainerId *string `json:"storage_container_id,omitempty"`
	IoPriority *IoPriorityEnum `json:"io_priority,omitempty"`
	// The ID of the storage profile governing this virtual volume.
	ProfileId *string `json:"profile_id,omitempty"`
	// The unique identifier of the replication group object that this virtual volume belongs to. Was added in version 3.0.0.0.
	ReplicationGroupId *string `json:"replication_group_id,omitempty"`
	CreatorType *StorageCreatorTypeEnum `json:"creator_type,omitempty"`
	// Indicates whether the virtual volume is read-only.
	IsReadonly *bool `json:"is_readonly,omitempty"`
	// If the virtual volume is part of a migration activity, the session ID for that migration.
	MigrationSessionId *string `json:"migration_session_id,omitempty"`
	// UUID of the virtual machine that owns this virtual volume.
	VirtualMachineUuid *string `json:"virtual_machine_uuid,omitempty"`
	// Family id of the virtual volume. This is the id of the primary object at the root of the family tree. For a primary virtual volume this will be the same as the id of the object. For snap-sets and clone vVols it will be set to the source objects family ID. 
	FamilyId *string `json:"family_id,omitempty"`
	// For snapshots and clones, the ID of the parent virtual volume. The parent_id is set when an virtual volume is created and will only change if its parent virtual volume is deleted. 
	ParentId *string `json:"parent_id,omitempty"`
	// Id of the virtual volume from which the content has been sourced. Data is sourced from another virtual volume when a snapshot or clone is created, or when a refresh or restore occurs. Only applies to snap and clones. 
	SourceId *string `json:"source_id,omitempty"`
	// The source data time-stamp of the virtual volume.
	SourceTimestamp *time.Time `json:"source_timestamp,omitempty"`
	// Timestamp of the moment virtual volume was created at.
	CreationTimestamp *time.Time `json:"creation_timestamp,omitempty"`
	// The NAA name used by hosts for I/O.  This is the VASA equivalent of a LUN's WWN. Was added in version 3.0.0.0.
	NaaName *string `json:"naa_name,omitempty"`
	// Indicates whether virtual volume is replication destination or not. Was added in version 3.0.0.0.
	IsReplicationDestination *bool `json:"is_replication_destination,omitempty"`
	// Filtering on the fields of this embedded resource is not supported.
	LocationHistory []LocationHistoryInstance `json:"location_history,omitempty"`
	// The unique identifier of the protection policy applied to this virtual volume. Was added in version 3.0.0.0.
	ProtectionPolicyId *string `json:"protection_policy_id,omitempty"`
	// NVMe Namespace unique identifier in the NVMe subsystem. Was added in version 3.0.0.0.
	Nsid *int32 `json:"nsid,omitempty"`
	// NVMe Namespace globally unique identifier. Was added in version 3.0.0.0.
	Nguid *string `json:"nguid,omitempty"`
	// Localized message string corresponding to type
	TypeL10n *string `json:"type_l10n,omitempty"`
	// Localized message string corresponding to usage_type
	UsageTypeL10n *string `json:"usage_type_l10n,omitempty"`
	// Localized message string corresponding to io_priority
	IoPriorityL10n *string `json:"io_priority_l10n,omitempty"`
	// Localized message string corresponding to creator_type
	CreatorTypeL10n *string `json:"creator_type_l10n,omitempty"`
	Appliance *ApplianceInstance `json:"appliance,omitempty"`
	StorageContainer *StorageContainerInstance `json:"storage_container,omitempty"`
	ReplicationGroup *ReplicationGroupInstance `json:"replication_group,omitempty"`
	MigrationSession *MigrationSessionInstance `json:"migration_session,omitempty"`
	Parent *VirtualVolumeInstance `json:"parent,omitempty"`
	// This is the inverse of the resource type virtual_volume association.
	ChildVirtualVolumes []VirtualVolumeInstance `json:"child_virtual_volumes,omitempty"`
	Source *VirtualVolumeInstance `json:"source,omitempty"`
	// This is the inverse of the resource type virtual_volume association.
	TargetVirtualVolumes []VirtualVolumeInstance `json:"target_virtual_volumes,omitempty"`
	ProtectionPolicy *PolicyInstance `json:"protection_policy,omitempty"`
	// This is the inverse of the resource type host_virtual_volume_mapping association.
	HostVirtualVolumeMappings []HostVirtualVolumeMappingInstance `json:"host_virtual_volume_mappings,omitempty"`
	// List of the virtual_machines that are associated with this virtual_volume.
	VirtualMachines []VirtualMachineInstance `json:"virtual_machines,omitempty"`
}

// NewVirtualVolumeInstance instantiates a new VirtualVolumeInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualVolumeInstance() *VirtualVolumeInstance {
	this := VirtualVolumeInstance{}
	return &this
}

// NewVirtualVolumeInstanceWithDefaults instantiates a new VirtualVolumeInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualVolumeInstanceWithDefaults() *VirtualVolumeInstance {
	this := VirtualVolumeInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualVolumeInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualVolumeInstance) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *VirtualVolumeInstance) SetSize(v int64) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetType() VirtualVolumeTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret VirtualVolumeTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetTypeOk() (*VirtualVolumeTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VirtualVolumeTypeEnum and assigns it to the Type field.
func (o *VirtualVolumeInstance) SetType(v VirtualVolumeTypeEnum) {
	o.Type = &v
}

// GetUsageType returns the UsageType field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetUsageType() VirtualVolumeUsageTypeEnum {
	if o == nil || IsNil(o.UsageType) {
		var ret VirtualVolumeUsageTypeEnum
		return ret
	}
	return *o.UsageType
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetUsageTypeOk() (*VirtualVolumeUsageTypeEnum, bool) {
	if o == nil || IsNil(o.UsageType) {
		return nil, false
	}
	return o.UsageType, true
}

// HasUsageType returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasUsageType() bool {
	if o != nil && !IsNil(o.UsageType) {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given VirtualVolumeUsageTypeEnum and assigns it to the UsageType field.
func (o *VirtualVolumeInstance) SetUsageType(v VirtualVolumeUsageTypeEnum) {
	o.UsageType = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetApplianceId() string {
	if o == nil || IsNil(o.ApplianceId) {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *VirtualVolumeInstance) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetStorageContainerId returns the StorageContainerId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetStorageContainerId() string {
	if o == nil || IsNil(o.StorageContainerId) {
		var ret string
		return ret
	}
	return *o.StorageContainerId
}

// GetStorageContainerIdOk returns a tuple with the StorageContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetStorageContainerIdOk() (*string, bool) {
	if o == nil || IsNil(o.StorageContainerId) {
		return nil, false
	}
	return o.StorageContainerId, true
}

// HasStorageContainerId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasStorageContainerId() bool {
	if o != nil && !IsNil(o.StorageContainerId) {
		return true
	}

	return false
}

// SetStorageContainerId gets a reference to the given string and assigns it to the StorageContainerId field.
func (o *VirtualVolumeInstance) SetStorageContainerId(v string) {
	o.StorageContainerId = &v
}

// GetIoPriority returns the IoPriority field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetIoPriority() IoPriorityEnum {
	if o == nil || IsNil(o.IoPriority) {
		var ret IoPriorityEnum
		return ret
	}
	return *o.IoPriority
}

// GetIoPriorityOk returns a tuple with the IoPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetIoPriorityOk() (*IoPriorityEnum, bool) {
	if o == nil || IsNil(o.IoPriority) {
		return nil, false
	}
	return o.IoPriority, true
}

// HasIoPriority returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasIoPriority() bool {
	if o != nil && !IsNil(o.IoPriority) {
		return true
	}

	return false
}

// SetIoPriority gets a reference to the given IoPriorityEnum and assigns it to the IoPriority field.
func (o *VirtualVolumeInstance) SetIoPriority(v IoPriorityEnum) {
	o.IoPriority = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetProfileId() string {
	if o == nil || IsNil(o.ProfileId) {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *VirtualVolumeInstance) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetReplicationGroupId returns the ReplicationGroupId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetReplicationGroupId() string {
	if o == nil || IsNil(o.ReplicationGroupId) {
		var ret string
		return ret
	}
	return *o.ReplicationGroupId
}

// GetReplicationGroupIdOk returns a tuple with the ReplicationGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetReplicationGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationGroupId) {
		return nil, false
	}
	return o.ReplicationGroupId, true
}

// HasReplicationGroupId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasReplicationGroupId() bool {
	if o != nil && !IsNil(o.ReplicationGroupId) {
		return true
	}

	return false
}

// SetReplicationGroupId gets a reference to the given string and assigns it to the ReplicationGroupId field.
func (o *VirtualVolumeInstance) SetReplicationGroupId(v string) {
	o.ReplicationGroupId = &v
}

// GetCreatorType returns the CreatorType field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetCreatorType() StorageCreatorTypeEnum {
	if o == nil || IsNil(o.CreatorType) {
		var ret StorageCreatorTypeEnum
		return ret
	}
	return *o.CreatorType
}

// GetCreatorTypeOk returns a tuple with the CreatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetCreatorTypeOk() (*StorageCreatorTypeEnum, bool) {
	if o == nil || IsNil(o.CreatorType) {
		return nil, false
	}
	return o.CreatorType, true
}

// HasCreatorType returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasCreatorType() bool {
	if o != nil && !IsNil(o.CreatorType) {
		return true
	}

	return false
}

// SetCreatorType gets a reference to the given StorageCreatorTypeEnum and assigns it to the CreatorType field.
func (o *VirtualVolumeInstance) SetCreatorType(v StorageCreatorTypeEnum) {
	o.CreatorType = &v
}

// GetIsReadonly returns the IsReadonly field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetIsReadonly() bool {
	if o == nil || IsNil(o.IsReadonly) {
		var ret bool
		return ret
	}
	return *o.IsReadonly
}

// GetIsReadonlyOk returns a tuple with the IsReadonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetIsReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadonly) {
		return nil, false
	}
	return o.IsReadonly, true
}

// HasIsReadonly returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasIsReadonly() bool {
	if o != nil && !IsNil(o.IsReadonly) {
		return true
	}

	return false
}

// SetIsReadonly gets a reference to the given bool and assigns it to the IsReadonly field.
func (o *VirtualVolumeInstance) SetIsReadonly(v bool) {
	o.IsReadonly = &v
}

// GetMigrationSessionId returns the MigrationSessionId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetMigrationSessionId() string {
	if o == nil || IsNil(o.MigrationSessionId) {
		var ret string
		return ret
	}
	return *o.MigrationSessionId
}

// GetMigrationSessionIdOk returns a tuple with the MigrationSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetMigrationSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.MigrationSessionId) {
		return nil, false
	}
	return o.MigrationSessionId, true
}

// HasMigrationSessionId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasMigrationSessionId() bool {
	if o != nil && !IsNil(o.MigrationSessionId) {
		return true
	}

	return false
}

// SetMigrationSessionId gets a reference to the given string and assigns it to the MigrationSessionId field.
func (o *VirtualVolumeInstance) SetMigrationSessionId(v string) {
	o.MigrationSessionId = &v
}

// GetVirtualMachineUuid returns the VirtualMachineUuid field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetVirtualMachineUuid() string {
	if o == nil || IsNil(o.VirtualMachineUuid) {
		var ret string
		return ret
	}
	return *o.VirtualMachineUuid
}

// GetVirtualMachineUuidOk returns a tuple with the VirtualMachineUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetVirtualMachineUuidOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualMachineUuid) {
		return nil, false
	}
	return o.VirtualMachineUuid, true
}

// HasVirtualMachineUuid returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasVirtualMachineUuid() bool {
	if o != nil && !IsNil(o.VirtualMachineUuid) {
		return true
	}

	return false
}

// SetVirtualMachineUuid gets a reference to the given string and assigns it to the VirtualMachineUuid field.
func (o *VirtualVolumeInstance) SetVirtualMachineUuid(v string) {
	o.VirtualMachineUuid = &v
}

// GetFamilyId returns the FamilyId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetFamilyId() string {
	if o == nil || IsNil(o.FamilyId) {
		var ret string
		return ret
	}
	return *o.FamilyId
}

// GetFamilyIdOk returns a tuple with the FamilyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetFamilyIdOk() (*string, bool) {
	if o == nil || IsNil(o.FamilyId) {
		return nil, false
	}
	return o.FamilyId, true
}

// HasFamilyId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasFamilyId() bool {
	if o != nil && !IsNil(o.FamilyId) {
		return true
	}

	return false
}

// SetFamilyId gets a reference to the given string and assigns it to the FamilyId field.
func (o *VirtualVolumeInstance) SetFamilyId(v string) {
	o.FamilyId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *VirtualVolumeInstance) SetParentId(v string) {
	o.ParentId = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *VirtualVolumeInstance) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceTimestamp returns the SourceTimestamp field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetSourceTimestamp() time.Time {
	if o == nil || IsNil(o.SourceTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.SourceTimestamp
}

// GetSourceTimestampOk returns a tuple with the SourceTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetSourceTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SourceTimestamp) {
		return nil, false
	}
	return o.SourceTimestamp, true
}

// HasSourceTimestamp returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasSourceTimestamp() bool {
	if o != nil && !IsNil(o.SourceTimestamp) {
		return true
	}

	return false
}

// SetSourceTimestamp gets a reference to the given time.Time and assigns it to the SourceTimestamp field.
func (o *VirtualVolumeInstance) SetSourceTimestamp(v time.Time) {
	o.SourceTimestamp = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetCreationTimestamp() time.Time {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given time.Time and assigns it to the CreationTimestamp field.
func (o *VirtualVolumeInstance) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = &v
}

// GetNaaName returns the NaaName field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetNaaName() string {
	if o == nil || IsNil(o.NaaName) {
		var ret string
		return ret
	}
	return *o.NaaName
}

// GetNaaNameOk returns a tuple with the NaaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetNaaNameOk() (*string, bool) {
	if o == nil || IsNil(o.NaaName) {
		return nil, false
	}
	return o.NaaName, true
}

// HasNaaName returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasNaaName() bool {
	if o != nil && !IsNil(o.NaaName) {
		return true
	}

	return false
}

// SetNaaName gets a reference to the given string and assigns it to the NaaName field.
func (o *VirtualVolumeInstance) SetNaaName(v string) {
	o.NaaName = &v
}

// GetIsReplicationDestination returns the IsReplicationDestination field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetIsReplicationDestination() bool {
	if o == nil || IsNil(o.IsReplicationDestination) {
		var ret bool
		return ret
	}
	return *o.IsReplicationDestination
}

// GetIsReplicationDestinationOk returns a tuple with the IsReplicationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetIsReplicationDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplicationDestination) {
		return nil, false
	}
	return o.IsReplicationDestination, true
}

// HasIsReplicationDestination returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasIsReplicationDestination() bool {
	if o != nil && !IsNil(o.IsReplicationDestination) {
		return true
	}

	return false
}

// SetIsReplicationDestination gets a reference to the given bool and assigns it to the IsReplicationDestination field.
func (o *VirtualVolumeInstance) SetIsReplicationDestination(v bool) {
	o.IsReplicationDestination = &v
}

// GetLocationHistory returns the LocationHistory field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetLocationHistory() []LocationHistoryInstance {
	if o == nil || IsNil(o.LocationHistory) {
		var ret []LocationHistoryInstance
		return ret
	}
	return o.LocationHistory
}

// GetLocationHistoryOk returns a tuple with the LocationHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetLocationHistoryOk() ([]LocationHistoryInstance, bool) {
	if o == nil || IsNil(o.LocationHistory) {
		return nil, false
	}
	return o.LocationHistory, true
}

// HasLocationHistory returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasLocationHistory() bool {
	if o != nil && !IsNil(o.LocationHistory) {
		return true
	}

	return false
}

// SetLocationHistory gets a reference to the given []LocationHistoryInstance and assigns it to the LocationHistory field.
func (o *VirtualVolumeInstance) SetLocationHistory(v []LocationHistoryInstance) {
	o.LocationHistory = v
}

// GetProtectionPolicyId returns the ProtectionPolicyId field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetProtectionPolicyId() string {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyId
}

// GetProtectionPolicyIdOk returns a tuple with the ProtectionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetProtectionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		return nil, false
	}
	return o.ProtectionPolicyId, true
}

// HasProtectionPolicyId returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasProtectionPolicyId() bool {
	if o != nil && !IsNil(o.ProtectionPolicyId) {
		return true
	}

	return false
}

// SetProtectionPolicyId gets a reference to the given string and assigns it to the ProtectionPolicyId field.
func (o *VirtualVolumeInstance) SetProtectionPolicyId(v string) {
	o.ProtectionPolicyId = &v
}

// GetNsid returns the Nsid field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetNsid() int32 {
	if o == nil || IsNil(o.Nsid) {
		var ret int32
		return ret
	}
	return *o.Nsid
}

// GetNsidOk returns a tuple with the Nsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetNsidOk() (*int32, bool) {
	if o == nil || IsNil(o.Nsid) {
		return nil, false
	}
	return o.Nsid, true
}

// HasNsid returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasNsid() bool {
	if o != nil && !IsNil(o.Nsid) {
		return true
	}

	return false
}

// SetNsid gets a reference to the given int32 and assigns it to the Nsid field.
func (o *VirtualVolumeInstance) SetNsid(v int32) {
	o.Nsid = &v
}

// GetNguid returns the Nguid field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetNguid() string {
	if o == nil || IsNil(o.Nguid) {
		var ret string
		return ret
	}
	return *o.Nguid
}

// GetNguidOk returns a tuple with the Nguid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetNguidOk() (*string, bool) {
	if o == nil || IsNil(o.Nguid) {
		return nil, false
	}
	return o.Nguid, true
}

// HasNguid returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasNguid() bool {
	if o != nil && !IsNil(o.Nguid) {
		return true
	}

	return false
}

// SetNguid gets a reference to the given string and assigns it to the Nguid field.
func (o *VirtualVolumeInstance) SetNguid(v string) {
	o.Nguid = &v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *VirtualVolumeInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetUsageTypeL10n returns the UsageTypeL10n field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetUsageTypeL10n() string {
	if o == nil || IsNil(o.UsageTypeL10n) {
		var ret string
		return ret
	}
	return *o.UsageTypeL10n
}

// GetUsageTypeL10nOk returns a tuple with the UsageTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetUsageTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.UsageTypeL10n) {
		return nil, false
	}
	return o.UsageTypeL10n, true
}

// HasUsageTypeL10n returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasUsageTypeL10n() bool {
	if o != nil && !IsNil(o.UsageTypeL10n) {
		return true
	}

	return false
}

// SetUsageTypeL10n gets a reference to the given string and assigns it to the UsageTypeL10n field.
func (o *VirtualVolumeInstance) SetUsageTypeL10n(v string) {
	o.UsageTypeL10n = &v
}

// GetIoPriorityL10n returns the IoPriorityL10n field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetIoPriorityL10n() string {
	if o == nil || IsNil(o.IoPriorityL10n) {
		var ret string
		return ret
	}
	return *o.IoPriorityL10n
}

// GetIoPriorityL10nOk returns a tuple with the IoPriorityL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetIoPriorityL10nOk() (*string, bool) {
	if o == nil || IsNil(o.IoPriorityL10n) {
		return nil, false
	}
	return o.IoPriorityL10n, true
}

// HasIoPriorityL10n returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasIoPriorityL10n() bool {
	if o != nil && !IsNil(o.IoPriorityL10n) {
		return true
	}

	return false
}

// SetIoPriorityL10n gets a reference to the given string and assigns it to the IoPriorityL10n field.
func (o *VirtualVolumeInstance) SetIoPriorityL10n(v string) {
	o.IoPriorityL10n = &v
}

// GetCreatorTypeL10n returns the CreatorTypeL10n field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetCreatorTypeL10n() string {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		var ret string
		return ret
	}
	return *o.CreatorTypeL10n
}

// GetCreatorTypeL10nOk returns a tuple with the CreatorTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetCreatorTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		return nil, false
	}
	return o.CreatorTypeL10n, true
}

// HasCreatorTypeL10n returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasCreatorTypeL10n() bool {
	if o != nil && !IsNil(o.CreatorTypeL10n) {
		return true
	}

	return false
}

// SetCreatorTypeL10n gets a reference to the given string and assigns it to the CreatorTypeL10n field.
func (o *VirtualVolumeInstance) SetCreatorTypeL10n(v string) {
	o.CreatorTypeL10n = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetAppliance() ApplianceInstance {
	if o == nil || IsNil(o.Appliance) {
		var ret ApplianceInstance
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetApplianceOk() (*ApplianceInstance, bool) {
	if o == nil || IsNil(o.Appliance) {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasAppliance() bool {
	if o != nil && !IsNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given ApplianceInstance and assigns it to the Appliance field.
func (o *VirtualVolumeInstance) SetAppliance(v ApplianceInstance) {
	o.Appliance = &v
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetStorageContainer() StorageContainerInstance {
	if o == nil || IsNil(o.StorageContainer) {
		var ret StorageContainerInstance
		return ret
	}
	return *o.StorageContainer
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetStorageContainerOk() (*StorageContainerInstance, bool) {
	if o == nil || IsNil(o.StorageContainer) {
		return nil, false
	}
	return o.StorageContainer, true
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasStorageContainer() bool {
	if o != nil && !IsNil(o.StorageContainer) {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given StorageContainerInstance and assigns it to the StorageContainer field.
func (o *VirtualVolumeInstance) SetStorageContainer(v StorageContainerInstance) {
	o.StorageContainer = &v
}

// GetReplicationGroup returns the ReplicationGroup field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetReplicationGroup() ReplicationGroupInstance {
	if o == nil || IsNil(o.ReplicationGroup) {
		var ret ReplicationGroupInstance
		return ret
	}
	return *o.ReplicationGroup
}

// GetReplicationGroupOk returns a tuple with the ReplicationGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetReplicationGroupOk() (*ReplicationGroupInstance, bool) {
	if o == nil || IsNil(o.ReplicationGroup) {
		return nil, false
	}
	return o.ReplicationGroup, true
}

// HasReplicationGroup returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasReplicationGroup() bool {
	if o != nil && !IsNil(o.ReplicationGroup) {
		return true
	}

	return false
}

// SetReplicationGroup gets a reference to the given ReplicationGroupInstance and assigns it to the ReplicationGroup field.
func (o *VirtualVolumeInstance) SetReplicationGroup(v ReplicationGroupInstance) {
	o.ReplicationGroup = &v
}

// GetMigrationSession returns the MigrationSession field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetMigrationSession() MigrationSessionInstance {
	if o == nil || IsNil(o.MigrationSession) {
		var ret MigrationSessionInstance
		return ret
	}
	return *o.MigrationSession
}

// GetMigrationSessionOk returns a tuple with the MigrationSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetMigrationSessionOk() (*MigrationSessionInstance, bool) {
	if o == nil || IsNil(o.MigrationSession) {
		return nil, false
	}
	return o.MigrationSession, true
}

// HasMigrationSession returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasMigrationSession() bool {
	if o != nil && !IsNil(o.MigrationSession) {
		return true
	}

	return false
}

// SetMigrationSession gets a reference to the given MigrationSessionInstance and assigns it to the MigrationSession field.
func (o *VirtualVolumeInstance) SetMigrationSession(v MigrationSessionInstance) {
	o.MigrationSession = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetParent() VirtualVolumeInstance {
	if o == nil || IsNil(o.Parent) {
		var ret VirtualVolumeInstance
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetParentOk() (*VirtualVolumeInstance, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given VirtualVolumeInstance and assigns it to the Parent field.
func (o *VirtualVolumeInstance) SetParent(v VirtualVolumeInstance) {
	o.Parent = &v
}

// GetChildVirtualVolumes returns the ChildVirtualVolumes field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetChildVirtualVolumes() []VirtualVolumeInstance {
	if o == nil || IsNil(o.ChildVirtualVolumes) {
		var ret []VirtualVolumeInstance
		return ret
	}
	return o.ChildVirtualVolumes
}

// GetChildVirtualVolumesOk returns a tuple with the ChildVirtualVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetChildVirtualVolumesOk() ([]VirtualVolumeInstance, bool) {
	if o == nil || IsNil(o.ChildVirtualVolumes) {
		return nil, false
	}
	return o.ChildVirtualVolumes, true
}

// HasChildVirtualVolumes returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasChildVirtualVolumes() bool {
	if o != nil && !IsNil(o.ChildVirtualVolumes) {
		return true
	}

	return false
}

// SetChildVirtualVolumes gets a reference to the given []VirtualVolumeInstance and assigns it to the ChildVirtualVolumes field.
func (o *VirtualVolumeInstance) SetChildVirtualVolumes(v []VirtualVolumeInstance) {
	o.ChildVirtualVolumes = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetSource() VirtualVolumeInstance {
	if o == nil || IsNil(o.Source) {
		var ret VirtualVolumeInstance
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetSourceOk() (*VirtualVolumeInstance, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given VirtualVolumeInstance and assigns it to the Source field.
func (o *VirtualVolumeInstance) SetSource(v VirtualVolumeInstance) {
	o.Source = &v
}

// GetTargetVirtualVolumes returns the TargetVirtualVolumes field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetTargetVirtualVolumes() []VirtualVolumeInstance {
	if o == nil || IsNil(o.TargetVirtualVolumes) {
		var ret []VirtualVolumeInstance
		return ret
	}
	return o.TargetVirtualVolumes
}

// GetTargetVirtualVolumesOk returns a tuple with the TargetVirtualVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetTargetVirtualVolumesOk() ([]VirtualVolumeInstance, bool) {
	if o == nil || IsNil(o.TargetVirtualVolumes) {
		return nil, false
	}
	return o.TargetVirtualVolumes, true
}

// HasTargetVirtualVolumes returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasTargetVirtualVolumes() bool {
	if o != nil && !IsNil(o.TargetVirtualVolumes) {
		return true
	}

	return false
}

// SetTargetVirtualVolumes gets a reference to the given []VirtualVolumeInstance and assigns it to the TargetVirtualVolumes field.
func (o *VirtualVolumeInstance) SetTargetVirtualVolumes(v []VirtualVolumeInstance) {
	o.TargetVirtualVolumes = v
}

// GetProtectionPolicy returns the ProtectionPolicy field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetProtectionPolicy() PolicyInstance {
	if o == nil || IsNil(o.ProtectionPolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.ProtectionPolicy
}

// GetProtectionPolicyOk returns a tuple with the ProtectionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetProtectionPolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.ProtectionPolicy) {
		return nil, false
	}
	return o.ProtectionPolicy, true
}

// HasProtectionPolicy returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasProtectionPolicy() bool {
	if o != nil && !IsNil(o.ProtectionPolicy) {
		return true
	}

	return false
}

// SetProtectionPolicy gets a reference to the given PolicyInstance and assigns it to the ProtectionPolicy field.
func (o *VirtualVolumeInstance) SetProtectionPolicy(v PolicyInstance) {
	o.ProtectionPolicy = &v
}

// GetHostVirtualVolumeMappings returns the HostVirtualVolumeMappings field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetHostVirtualVolumeMappings() []HostVirtualVolumeMappingInstance {
	if o == nil || IsNil(o.HostVirtualVolumeMappings) {
		var ret []HostVirtualVolumeMappingInstance
		return ret
	}
	return o.HostVirtualVolumeMappings
}

// GetHostVirtualVolumeMappingsOk returns a tuple with the HostVirtualVolumeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetHostVirtualVolumeMappingsOk() ([]HostVirtualVolumeMappingInstance, bool) {
	if o == nil || IsNil(o.HostVirtualVolumeMappings) {
		return nil, false
	}
	return o.HostVirtualVolumeMappings, true
}

// HasHostVirtualVolumeMappings returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasHostVirtualVolumeMappings() bool {
	if o != nil && !IsNil(o.HostVirtualVolumeMappings) {
		return true
	}

	return false
}

// SetHostVirtualVolumeMappings gets a reference to the given []HostVirtualVolumeMappingInstance and assigns it to the HostVirtualVolumeMappings field.
func (o *VirtualVolumeInstance) SetHostVirtualVolumeMappings(v []HostVirtualVolumeMappingInstance) {
	o.HostVirtualVolumeMappings = v
}

// GetVirtualMachines returns the VirtualMachines field value if set, zero value otherwise.
func (o *VirtualVolumeInstance) GetVirtualMachines() []VirtualMachineInstance {
	if o == nil || IsNil(o.VirtualMachines) {
		var ret []VirtualMachineInstance
		return ret
	}
	return o.VirtualMachines
}

// GetVirtualMachinesOk returns a tuple with the VirtualMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualVolumeInstance) GetVirtualMachinesOk() ([]VirtualMachineInstance, bool) {
	if o == nil || IsNil(o.VirtualMachines) {
		return nil, false
	}
	return o.VirtualMachines, true
}

// HasVirtualMachines returns a boolean if a field has been set.
func (o *VirtualVolumeInstance) HasVirtualMachines() bool {
	if o != nil && !IsNil(o.VirtualMachines) {
		return true
	}

	return false
}

// SetVirtualMachines gets a reference to the given []VirtualMachineInstance and assigns it to the VirtualMachines field.
func (o *VirtualVolumeInstance) SetVirtualMachines(v []VirtualMachineInstance) {
	o.VirtualMachines = v
}

func (o VirtualVolumeInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualVolumeInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UsageType) {
		toSerialize["usage_type"] = o.UsageType
	}
	if !IsNil(o.ApplianceId) {
		toSerialize["appliance_id"] = o.ApplianceId
	}
	if !IsNil(o.StorageContainerId) {
		toSerialize["storage_container_id"] = o.StorageContainerId
	}
	if !IsNil(o.IoPriority) {
		toSerialize["io_priority"] = o.IoPriority
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profile_id"] = o.ProfileId
	}
	if !IsNil(o.ReplicationGroupId) {
		toSerialize["replication_group_id"] = o.ReplicationGroupId
	}
	if !IsNil(o.CreatorType) {
		toSerialize["creator_type"] = o.CreatorType
	}
	if !IsNil(o.IsReadonly) {
		toSerialize["is_readonly"] = o.IsReadonly
	}
	if !IsNil(o.MigrationSessionId) {
		toSerialize["migration_session_id"] = o.MigrationSessionId
	}
	if !IsNil(o.VirtualMachineUuid) {
		toSerialize["virtual_machine_uuid"] = o.VirtualMachineUuid
	}
	if !IsNil(o.FamilyId) {
		toSerialize["family_id"] = o.FamilyId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !IsNil(o.SourceTimestamp) {
		toSerialize["source_timestamp"] = o.SourceTimestamp
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.NaaName) {
		toSerialize["naa_name"] = o.NaaName
	}
	if !IsNil(o.IsReplicationDestination) {
		toSerialize["is_replication_destination"] = o.IsReplicationDestination
	}
	if !IsNil(o.LocationHistory) {
		toSerialize["location_history"] = o.LocationHistory
	}
	if !IsNil(o.ProtectionPolicyId) {
		toSerialize["protection_policy_id"] = o.ProtectionPolicyId
	}
	if !IsNil(o.Nsid) {
		toSerialize["nsid"] = o.Nsid
	}
	if !IsNil(o.Nguid) {
		toSerialize["nguid"] = o.Nguid
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.UsageTypeL10n) {
		toSerialize["usage_type_l10n"] = o.UsageTypeL10n
	}
	if !IsNil(o.IoPriorityL10n) {
		toSerialize["io_priority_l10n"] = o.IoPriorityL10n
	}
	if !IsNil(o.CreatorTypeL10n) {
		toSerialize["creator_type_l10n"] = o.CreatorTypeL10n
	}
	if !IsNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	if !IsNil(o.StorageContainer) {
		toSerialize["storage_container"] = o.StorageContainer
	}
	if !IsNil(o.ReplicationGroup) {
		toSerialize["replication_group"] = o.ReplicationGroup
	}
	if !IsNil(o.MigrationSession) {
		toSerialize["migration_session"] = o.MigrationSession
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.ChildVirtualVolumes) {
		toSerialize["child_virtual_volumes"] = o.ChildVirtualVolumes
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.TargetVirtualVolumes) {
		toSerialize["target_virtual_volumes"] = o.TargetVirtualVolumes
	}
	if !IsNil(o.ProtectionPolicy) {
		toSerialize["protection_policy"] = o.ProtectionPolicy
	}
	if !IsNil(o.HostVirtualVolumeMappings) {
		toSerialize["host_virtual_volume_mappings"] = o.HostVirtualVolumeMappings
	}
	if !IsNil(o.VirtualMachines) {
		toSerialize["virtual_machines"] = o.VirtualMachines
	}
	return toSerialize, nil
}

type NullableVirtualVolumeInstance struct {
	value *VirtualVolumeInstance
	isSet bool
}

func (v NullableVirtualVolumeInstance) Get() *VirtualVolumeInstance {
	return v.value
}

func (v *NullableVirtualVolumeInstance) Set(val *VirtualVolumeInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualVolumeInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualVolumeInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualVolumeInstance(val *VirtualVolumeInstance) *NullableVirtualVolumeInstance {
	return &NullableVirtualVolumeInstance{value: val, isSet: true}
}

func (v NullableVirtualVolumeInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualVolumeInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


