/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the IpPortInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpPortInstance{}

// IpPortInstance  Values was added in 3.5.0.0: fsn.name. This resource type has queriable associations from ip_port, fsn, bond, eth_port, veth_port, ip_pool_address, file_interface
type IpPortInstance struct {
	// Unique identifier of the IP port.
	Id *string `json:"id,omitempty"`
	// Identifier of the IP port that is configured on top of physical Ethernet port or virtual Ethernet port or bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.
	PartnerId *string `json:"partner_id,omitempty"`
	// iSCSI qualified name used by the target configured on top of the IP port initially or as a result of network scaling. If the IP port is not used by an iSCSI connection, this attribute should be empty.
	TargetIqn *string `json:"target_iqn,omitempty"`
	// Available IP port usages.
	AvailableUsages []IpPortUsageEnum `json:"available_usages,omitempty"`
	// Current IP port usages.
	CurrentUsages []IpPortUsageEnum `json:"current_usages,omitempty"`
	// Unique identifier of the FSN on top of which the IP port is configured. If the IP port is configured on top of an Ethernet frontend-port or a bond, this attribute should be empty.  Was added in version 3.5.0.0.
	FsnId *string `json:"fsn_id,omitempty"`
	// Unique identifier of the bond on top of which the IP port is configured. If the IP port is configured on top of an Ethernet front-end port or an FSN, this attribute should be empty. 
	BondId *string `json:"bond_id,omitempty"`
	// Unique identifier of the physical Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified appliance. It should be empty if the IP port is used by a Unified+ appliance or if the IP port is configured on top of a bond or an FSN on a Unified appliance. 
	EthPortId *string `json:"eth_port_id,omitempty"`
	// Unique identifier of the virtual Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified+ appliance. For a Unified appliance, the value of veth_port_id should be empty. 
	VethPortId *string `json:"veth_port_id,omitempty"`
	// Localized message array corresponding to available_usages
	AvailableUsagesL10n []string `json:"available_usages_l10n,omitempty"`
	// Localized message array corresponding to current_usages
	CurrentUsagesL10n []string `json:"current_usages_l10n,omitempty"`
	// This is the inverse of the resource type ip_pool_address association.
	IpPoolAddresses []IpPoolAddressInstance `json:"ip_pool_addresses,omitempty"`
	Partner *IpPortInstance `json:"partner,omitempty"`
	Fsn *FsnInstance `json:"fsn,omitempty"`
	Bond *BondInstance `json:"bond,omitempty"`
	EthPort *EthPortInstance `json:"eth_port,omitempty"`
	VethPort *VethPortInstance `json:"veth_port,omitempty"`
	// This is the inverse of the resource type file_interface association.
	FileInterfaces []FileInterfaceInstance `json:"file_interfaces,omitempty"`
}

// NewIpPortInstance instantiates a new IpPortInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpPortInstance() *IpPortInstance {
	this := IpPortInstance{}
	return &this
}

// NewIpPortInstanceWithDefaults instantiates a new IpPortInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpPortInstanceWithDefaults() *IpPortInstance {
	this := IpPortInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpPortInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpPortInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpPortInstance) SetId(v string) {
	o.Id = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *IpPortInstance) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *IpPortInstance) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *IpPortInstance) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetTargetIqn returns the TargetIqn field value if set, zero value otherwise.
func (o *IpPortInstance) GetTargetIqn() string {
	if o == nil || IsNil(o.TargetIqn) {
		var ret string
		return ret
	}
	return *o.TargetIqn
}

// GetTargetIqnOk returns a tuple with the TargetIqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetTargetIqnOk() (*string, bool) {
	if o == nil || IsNil(o.TargetIqn) {
		return nil, false
	}
	return o.TargetIqn, true
}

// HasTargetIqn returns a boolean if a field has been set.
func (o *IpPortInstance) HasTargetIqn() bool {
	if o != nil && !IsNil(o.TargetIqn) {
		return true
	}

	return false
}

// SetTargetIqn gets a reference to the given string and assigns it to the TargetIqn field.
func (o *IpPortInstance) SetTargetIqn(v string) {
	o.TargetIqn = &v
}

// GetAvailableUsages returns the AvailableUsages field value if set, zero value otherwise.
func (o *IpPortInstance) GetAvailableUsages() []IpPortUsageEnum {
	if o == nil || IsNil(o.AvailableUsages) {
		var ret []IpPortUsageEnum
		return ret
	}
	return o.AvailableUsages
}

// GetAvailableUsagesOk returns a tuple with the AvailableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetAvailableUsagesOk() ([]IpPortUsageEnum, bool) {
	if o == nil || IsNil(o.AvailableUsages) {
		return nil, false
	}
	return o.AvailableUsages, true
}

// HasAvailableUsages returns a boolean if a field has been set.
func (o *IpPortInstance) HasAvailableUsages() bool {
	if o != nil && !IsNil(o.AvailableUsages) {
		return true
	}

	return false
}

// SetAvailableUsages gets a reference to the given []IpPortUsageEnum and assigns it to the AvailableUsages field.
func (o *IpPortInstance) SetAvailableUsages(v []IpPortUsageEnum) {
	o.AvailableUsages = v
}

// GetCurrentUsages returns the CurrentUsages field value if set, zero value otherwise.
func (o *IpPortInstance) GetCurrentUsages() []IpPortUsageEnum {
	if o == nil || IsNil(o.CurrentUsages) {
		var ret []IpPortUsageEnum
		return ret
	}
	return o.CurrentUsages
}

// GetCurrentUsagesOk returns a tuple with the CurrentUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetCurrentUsagesOk() ([]IpPortUsageEnum, bool) {
	if o == nil || IsNil(o.CurrentUsages) {
		return nil, false
	}
	return o.CurrentUsages, true
}

// HasCurrentUsages returns a boolean if a field has been set.
func (o *IpPortInstance) HasCurrentUsages() bool {
	if o != nil && !IsNil(o.CurrentUsages) {
		return true
	}

	return false
}

// SetCurrentUsages gets a reference to the given []IpPortUsageEnum and assigns it to the CurrentUsages field.
func (o *IpPortInstance) SetCurrentUsages(v []IpPortUsageEnum) {
	o.CurrentUsages = v
}

// GetFsnId returns the FsnId field value if set, zero value otherwise.
func (o *IpPortInstance) GetFsnId() string {
	if o == nil || IsNil(o.FsnId) {
		var ret string
		return ret
	}
	return *o.FsnId
}

// GetFsnIdOk returns a tuple with the FsnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetFsnIdOk() (*string, bool) {
	if o == nil || IsNil(o.FsnId) {
		return nil, false
	}
	return o.FsnId, true
}

// HasFsnId returns a boolean if a field has been set.
func (o *IpPortInstance) HasFsnId() bool {
	if o != nil && !IsNil(o.FsnId) {
		return true
	}

	return false
}

// SetFsnId gets a reference to the given string and assigns it to the FsnId field.
func (o *IpPortInstance) SetFsnId(v string) {
	o.FsnId = &v
}

// GetBondId returns the BondId field value if set, zero value otherwise.
func (o *IpPortInstance) GetBondId() string {
	if o == nil || IsNil(o.BondId) {
		var ret string
		return ret
	}
	return *o.BondId
}

// GetBondIdOk returns a tuple with the BondId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetBondIdOk() (*string, bool) {
	if o == nil || IsNil(o.BondId) {
		return nil, false
	}
	return o.BondId, true
}

// HasBondId returns a boolean if a field has been set.
func (o *IpPortInstance) HasBondId() bool {
	if o != nil && !IsNil(o.BondId) {
		return true
	}

	return false
}

// SetBondId gets a reference to the given string and assigns it to the BondId field.
func (o *IpPortInstance) SetBondId(v string) {
	o.BondId = &v
}

// GetEthPortId returns the EthPortId field value if set, zero value otherwise.
func (o *IpPortInstance) GetEthPortId() string {
	if o == nil || IsNil(o.EthPortId) {
		var ret string
		return ret
	}
	return *o.EthPortId
}

// GetEthPortIdOk returns a tuple with the EthPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetEthPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.EthPortId) {
		return nil, false
	}
	return o.EthPortId, true
}

// HasEthPortId returns a boolean if a field has been set.
func (o *IpPortInstance) HasEthPortId() bool {
	if o != nil && !IsNil(o.EthPortId) {
		return true
	}

	return false
}

// SetEthPortId gets a reference to the given string and assigns it to the EthPortId field.
func (o *IpPortInstance) SetEthPortId(v string) {
	o.EthPortId = &v
}

// GetVethPortId returns the VethPortId field value if set, zero value otherwise.
func (o *IpPortInstance) GetVethPortId() string {
	if o == nil || IsNil(o.VethPortId) {
		var ret string
		return ret
	}
	return *o.VethPortId
}

// GetVethPortIdOk returns a tuple with the VethPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetVethPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.VethPortId) {
		return nil, false
	}
	return o.VethPortId, true
}

// HasVethPortId returns a boolean if a field has been set.
func (o *IpPortInstance) HasVethPortId() bool {
	if o != nil && !IsNil(o.VethPortId) {
		return true
	}

	return false
}

// SetVethPortId gets a reference to the given string and assigns it to the VethPortId field.
func (o *IpPortInstance) SetVethPortId(v string) {
	o.VethPortId = &v
}

// GetAvailableUsagesL10n returns the AvailableUsagesL10n field value if set, zero value otherwise.
func (o *IpPortInstance) GetAvailableUsagesL10n() []string {
	if o == nil || IsNil(o.AvailableUsagesL10n) {
		var ret []string
		return ret
	}
	return o.AvailableUsagesL10n
}

// GetAvailableUsagesL10nOk returns a tuple with the AvailableUsagesL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetAvailableUsagesL10nOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableUsagesL10n) {
		return nil, false
	}
	return o.AvailableUsagesL10n, true
}

// HasAvailableUsagesL10n returns a boolean if a field has been set.
func (o *IpPortInstance) HasAvailableUsagesL10n() bool {
	if o != nil && !IsNil(o.AvailableUsagesL10n) {
		return true
	}

	return false
}

// SetAvailableUsagesL10n gets a reference to the given []string and assigns it to the AvailableUsagesL10n field.
func (o *IpPortInstance) SetAvailableUsagesL10n(v []string) {
	o.AvailableUsagesL10n = v
}

// GetCurrentUsagesL10n returns the CurrentUsagesL10n field value if set, zero value otherwise.
func (o *IpPortInstance) GetCurrentUsagesL10n() []string {
	if o == nil || IsNil(o.CurrentUsagesL10n) {
		var ret []string
		return ret
	}
	return o.CurrentUsagesL10n
}

// GetCurrentUsagesL10nOk returns a tuple with the CurrentUsagesL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetCurrentUsagesL10nOk() ([]string, bool) {
	if o == nil || IsNil(o.CurrentUsagesL10n) {
		return nil, false
	}
	return o.CurrentUsagesL10n, true
}

// HasCurrentUsagesL10n returns a boolean if a field has been set.
func (o *IpPortInstance) HasCurrentUsagesL10n() bool {
	if o != nil && !IsNil(o.CurrentUsagesL10n) {
		return true
	}

	return false
}

// SetCurrentUsagesL10n gets a reference to the given []string and assigns it to the CurrentUsagesL10n field.
func (o *IpPortInstance) SetCurrentUsagesL10n(v []string) {
	o.CurrentUsagesL10n = v
}

// GetIpPoolAddresses returns the IpPoolAddresses field value if set, zero value otherwise.
func (o *IpPortInstance) GetIpPoolAddresses() []IpPoolAddressInstance {
	if o == nil || IsNil(o.IpPoolAddresses) {
		var ret []IpPoolAddressInstance
		return ret
	}
	return o.IpPoolAddresses
}

// GetIpPoolAddressesOk returns a tuple with the IpPoolAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetIpPoolAddressesOk() ([]IpPoolAddressInstance, bool) {
	if o == nil || IsNil(o.IpPoolAddresses) {
		return nil, false
	}
	return o.IpPoolAddresses, true
}

// HasIpPoolAddresses returns a boolean if a field has been set.
func (o *IpPortInstance) HasIpPoolAddresses() bool {
	if o != nil && !IsNil(o.IpPoolAddresses) {
		return true
	}

	return false
}

// SetIpPoolAddresses gets a reference to the given []IpPoolAddressInstance and assigns it to the IpPoolAddresses field.
func (o *IpPortInstance) SetIpPoolAddresses(v []IpPoolAddressInstance) {
	o.IpPoolAddresses = v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *IpPortInstance) GetPartner() IpPortInstance {
	if o == nil || IsNil(o.Partner) {
		var ret IpPortInstance
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetPartnerOk() (*IpPortInstance, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *IpPortInstance) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given IpPortInstance and assigns it to the Partner field.
func (o *IpPortInstance) SetPartner(v IpPortInstance) {
	o.Partner = &v
}

// GetFsn returns the Fsn field value if set, zero value otherwise.
func (o *IpPortInstance) GetFsn() FsnInstance {
	if o == nil || IsNil(o.Fsn) {
		var ret FsnInstance
		return ret
	}
	return *o.Fsn
}

// GetFsnOk returns a tuple with the Fsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetFsnOk() (*FsnInstance, bool) {
	if o == nil || IsNil(o.Fsn) {
		return nil, false
	}
	return o.Fsn, true
}

// HasFsn returns a boolean if a field has been set.
func (o *IpPortInstance) HasFsn() bool {
	if o != nil && !IsNil(o.Fsn) {
		return true
	}

	return false
}

// SetFsn gets a reference to the given FsnInstance and assigns it to the Fsn field.
func (o *IpPortInstance) SetFsn(v FsnInstance) {
	o.Fsn = &v
}

// GetBond returns the Bond field value if set, zero value otherwise.
func (o *IpPortInstance) GetBond() BondInstance {
	if o == nil || IsNil(o.Bond) {
		var ret BondInstance
		return ret
	}
	return *o.Bond
}

// GetBondOk returns a tuple with the Bond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetBondOk() (*BondInstance, bool) {
	if o == nil || IsNil(o.Bond) {
		return nil, false
	}
	return o.Bond, true
}

// HasBond returns a boolean if a field has been set.
func (o *IpPortInstance) HasBond() bool {
	if o != nil && !IsNil(o.Bond) {
		return true
	}

	return false
}

// SetBond gets a reference to the given BondInstance and assigns it to the Bond field.
func (o *IpPortInstance) SetBond(v BondInstance) {
	o.Bond = &v
}

// GetEthPort returns the EthPort field value if set, zero value otherwise.
func (o *IpPortInstance) GetEthPort() EthPortInstance {
	if o == nil || IsNil(o.EthPort) {
		var ret EthPortInstance
		return ret
	}
	return *o.EthPort
}

// GetEthPortOk returns a tuple with the EthPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetEthPortOk() (*EthPortInstance, bool) {
	if o == nil || IsNil(o.EthPort) {
		return nil, false
	}
	return o.EthPort, true
}

// HasEthPort returns a boolean if a field has been set.
func (o *IpPortInstance) HasEthPort() bool {
	if o != nil && !IsNil(o.EthPort) {
		return true
	}

	return false
}

// SetEthPort gets a reference to the given EthPortInstance and assigns it to the EthPort field.
func (o *IpPortInstance) SetEthPort(v EthPortInstance) {
	o.EthPort = &v
}

// GetVethPort returns the VethPort field value if set, zero value otherwise.
func (o *IpPortInstance) GetVethPort() VethPortInstance {
	if o == nil || IsNil(o.VethPort) {
		var ret VethPortInstance
		return ret
	}
	return *o.VethPort
}

// GetVethPortOk returns a tuple with the VethPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetVethPortOk() (*VethPortInstance, bool) {
	if o == nil || IsNil(o.VethPort) {
		return nil, false
	}
	return o.VethPort, true
}

// HasVethPort returns a boolean if a field has been set.
func (o *IpPortInstance) HasVethPort() bool {
	if o != nil && !IsNil(o.VethPort) {
		return true
	}

	return false
}

// SetVethPort gets a reference to the given VethPortInstance and assigns it to the VethPort field.
func (o *IpPortInstance) SetVethPort(v VethPortInstance) {
	o.VethPort = &v
}

// GetFileInterfaces returns the FileInterfaces field value if set, zero value otherwise.
func (o *IpPortInstance) GetFileInterfaces() []FileInterfaceInstance {
	if o == nil || IsNil(o.FileInterfaces) {
		var ret []FileInterfaceInstance
		return ret
	}
	return o.FileInterfaces
}

// GetFileInterfacesOk returns a tuple with the FileInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPortInstance) GetFileInterfacesOk() ([]FileInterfaceInstance, bool) {
	if o == nil || IsNil(o.FileInterfaces) {
		return nil, false
	}
	return o.FileInterfaces, true
}

// HasFileInterfaces returns a boolean if a field has been set.
func (o *IpPortInstance) HasFileInterfaces() bool {
	if o != nil && !IsNil(o.FileInterfaces) {
		return true
	}

	return false
}

// SetFileInterfaces gets a reference to the given []FileInterfaceInstance and assigns it to the FileInterfaces field.
func (o *IpPortInstance) SetFileInterfaces(v []FileInterfaceInstance) {
	o.FileInterfaces = v
}

func (o IpPortInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpPortInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partner_id"] = o.PartnerId
	}
	if !IsNil(o.TargetIqn) {
		toSerialize["target_iqn"] = o.TargetIqn
	}
	if !IsNil(o.AvailableUsages) {
		toSerialize["available_usages"] = o.AvailableUsages
	}
	if !IsNil(o.CurrentUsages) {
		toSerialize["current_usages"] = o.CurrentUsages
	}
	if !IsNil(o.FsnId) {
		toSerialize["fsn_id"] = o.FsnId
	}
	if !IsNil(o.BondId) {
		toSerialize["bond_id"] = o.BondId
	}
	if !IsNil(o.EthPortId) {
		toSerialize["eth_port_id"] = o.EthPortId
	}
	if !IsNil(o.VethPortId) {
		toSerialize["veth_port_id"] = o.VethPortId
	}
	if !IsNil(o.AvailableUsagesL10n) {
		toSerialize["available_usages_l10n"] = o.AvailableUsagesL10n
	}
	if !IsNil(o.CurrentUsagesL10n) {
		toSerialize["current_usages_l10n"] = o.CurrentUsagesL10n
	}
	if !IsNil(o.IpPoolAddresses) {
		toSerialize["ip_pool_addresses"] = o.IpPoolAddresses
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.Fsn) {
		toSerialize["fsn"] = o.Fsn
	}
	if !IsNil(o.Bond) {
		toSerialize["bond"] = o.Bond
	}
	if !IsNil(o.EthPort) {
		toSerialize["eth_port"] = o.EthPort
	}
	if !IsNil(o.VethPort) {
		toSerialize["veth_port"] = o.VethPort
	}
	if !IsNil(o.FileInterfaces) {
		toSerialize["file_interfaces"] = o.FileInterfaces
	}
	return toSerialize, nil
}

type NullableIpPortInstance struct {
	value *IpPortInstance
	isSet bool
}

func (v NullableIpPortInstance) Get() *IpPortInstance {
	return v.value
}

func (v *NullableIpPortInstance) Set(val *IpPortInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableIpPortInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableIpPortInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpPortInstance(val *IpPortInstance) *NullableIpPortInstance {
	return &NullableIpPortInstance{value: val, isSet: true}
}

func (v NullableIpPortInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpPortInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


