/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// RemoteSnapshotSessionTypeEnum Type of the remote snapshot session:  * Backup - Remote snapshot session to backup the snapshot to remote.  * Retrieve - Remote snapshot session to retrieve the snapshot from the remote.  * Instant_Access - Provides instant access to remote backup snapshot through proxy volume/volume_group without bringing the remote copy on to the PoweStore.  Was added in version 3.5.0.0.
type RemoteSnapshotSessionTypeEnum string

// List of RemoteSnapshotSessionTypeEnum
const (
	REMOTESNAPSHOTSESSIONTYPEENUM_BACKUP RemoteSnapshotSessionTypeEnum = "Backup"
	REMOTESNAPSHOTSESSIONTYPEENUM_RETRIEVE RemoteSnapshotSessionTypeEnum = "Retrieve"
	REMOTESNAPSHOTSESSIONTYPEENUM_INSTANT_ACCESS RemoteSnapshotSessionTypeEnum = "Instant_Access"
)

// All allowed values of RemoteSnapshotSessionTypeEnum enum
var AllowedRemoteSnapshotSessionTypeEnumEnumValues = []RemoteSnapshotSessionTypeEnum{
	"Backup",
	"Retrieve",
	"Instant_Access",
}

func (v *RemoteSnapshotSessionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RemoteSnapshotSessionTypeEnum(value)
	for _, existing := range AllowedRemoteSnapshotSessionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RemoteSnapshotSessionTypeEnum", value)
}

// NewRemoteSnapshotSessionTypeEnumFromValue returns a pointer to a valid RemoteSnapshotSessionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRemoteSnapshotSessionTypeEnumFromValue(v string) (*RemoteSnapshotSessionTypeEnum, error) {
	ev := RemoteSnapshotSessionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RemoteSnapshotSessionTypeEnum: valid values are %v", v, AllowedRemoteSnapshotSessionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RemoteSnapshotSessionTypeEnum) IsValid() bool {
	for _, existing := range AllowedRemoteSnapshotSessionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RemoteSnapshotSessionTypeEnum value
func (v RemoteSnapshotSessionTypeEnum) Ptr() *RemoteSnapshotSessionTypeEnum {
	return &v
}

type NullableRemoteSnapshotSessionTypeEnum struct {
	value *RemoteSnapshotSessionTypeEnum
	isSet bool
}

func (v NullableRemoteSnapshotSessionTypeEnum) Get() *RemoteSnapshotSessionTypeEnum {
	return v.value
}

func (v *NullableRemoteSnapshotSessionTypeEnum) Set(val *RemoteSnapshotSessionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSnapshotSessionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSnapshotSessionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSnapshotSessionTypeEnum(val *RemoteSnapshotSessionTypeEnum) *NullableRemoteSnapshotSessionTypeEnum {
	return &NullableRemoteSnapshotSessionTypeEnum{value: val, isSet: true}
}

func (v NullableRemoteSnapshotSessionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSnapshotSessionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

