/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// FileEventsCategoryEnum The category of the setting determines when and whether events for specific protocol operations are sent to the file events pool, and in the case of Pre_Events category, whether the operation is allowed to proceed. The categories are: * Pre_Events - The NAS server sends notification before such protocol                operations occur, and from the response decides whether                to allow the operation to proceed. * Post_Events - The NAS server sends notification after such protocol                 operations occur. * Post_Error_Events - The NAS server sends notification only when such                       protocol operations generate an error.  Was added in version 3.0.0.0.
type FileEventsCategoryEnum string

// List of FileEventsCategoryEnum
const (
	FILEEVENTSCATEGORYENUM_PRE_EVENTS FileEventsCategoryEnum = "Pre_Events"
	FILEEVENTSCATEGORYENUM_POST_EVENTS FileEventsCategoryEnum = "Post_Events"
	FILEEVENTSCATEGORYENUM_POST_ERROR_EVENTS FileEventsCategoryEnum = "Post_Error_Events"
)

// All allowed values of FileEventsCategoryEnum enum
var AllowedFileEventsCategoryEnumEnumValues = []FileEventsCategoryEnum{
	"Pre_Events",
	"Post_Events",
	"Post_Error_Events",
}

func (v *FileEventsCategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileEventsCategoryEnum(value)
	for _, existing := range AllowedFileEventsCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileEventsCategoryEnum", value)
}

// NewFileEventsCategoryEnumFromValue returns a pointer to a valid FileEventsCategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileEventsCategoryEnumFromValue(v string) (*FileEventsCategoryEnum, error) {
	ev := FileEventsCategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileEventsCategoryEnum: valid values are %v", v, AllowedFileEventsCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileEventsCategoryEnum) IsValid() bool {
	for _, existing := range AllowedFileEventsCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileEventsCategoryEnum value
func (v FileEventsCategoryEnum) Ptr() *FileEventsCategoryEnum {
	return &v
}

type NullableFileEventsCategoryEnum struct {
	value *FileEventsCategoryEnum
	isSet bool
}

func (v NullableFileEventsCategoryEnum) Get() *FileEventsCategoryEnum {
	return v.value
}

func (v *NullableFileEventsCategoryEnum) Set(val *FileEventsCategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFileEventsCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFileEventsCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileEventsCategoryEnum(val *FileEventsCategoryEnum) *NullableFileEventsCategoryEnum {
	return &NullableFileEventsCategoryEnum{value: val, isSet: true}
}

func (v NullableFileEventsCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileEventsCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

