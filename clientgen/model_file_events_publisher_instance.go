/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileEventsPublisherInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileEventsPublisherInstance{}

// FileEventsPublisherInstance  Was added in version 3.0.0.0. This resource type has queriable associations from file_events_pool, nas_server
type FileEventsPublisherInstance struct {
	// Unique identifier of the file events publisher.
	Id *string `json:"id,omitempty"`
	// Unique name of the file events publisher.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Whether or not the event publisher will publish events.
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// Time interval to scan each CEPA server (in seconds) for online/offline status. 
	Heartbeat *int32 `json:"heartbeat,omitempty"`
	// Timeout in milliseconds while attempting to send event to a CEPA server to determine that is offline. 
	ConnectionTimeout *int32 `json:"connection_timeout,omitempty"`
	PostEventPolicy *PostEventPolicyEnum `json:"post_event_policy,omitempty"`
	// Behavior when no configured file events servers respond. Values are: false - allow I/O to the file system to continue. true - deny I/O to the filesystem when an event cannot be published to any server. 
	DenyAccessWhenAllServersOffline *bool `json:"deny_access_when_all_servers_offline,omitempty"`
	// Name of a Windows user allowing Events Publishing to connect to CEPA servers. To ensure that a secure connection (via Microsoft RPC protocol) is used disable HTTP by setting http_port to 0. 
	Username *string `json:"username,omitempty"`
	// TCP port number used but the service to connect to the CEPA server(s) with HTTP. Default port number is 12228. Set this value to 0 to disable HTTP. When enabled, connection via HTTP is attempted first. If HTTP connection is disabled, or the connection fails, then connection through MSRPC is attempted if all CEPP server(s) are defined by FQDN. The SMB account of the NAS server in the AD Domain is used to make the connection via MSRPC. Note that HTTP connections should only be used on secure networks, as it is neither SSL nor authenticated. 
	HttpPort *int32 `json:"http_port,omitempty"`
	// Flag indicates if the file events publisher is a replicated publisher. 
	IsReplica *bool `json:"is_replica,omitempty"`
	// Localized message string corresponding to post_event_policy Was added in version 3.0.0.0.
	PostEventPolicyL10n *string `json:"post_event_policy_l10n,omitempty"`
	// List of the file_events_pools that are associated with this file_events_publisher.
	FileEventsPools []FileEventsPoolInstance `json:"file_events_pools,omitempty"`
	// List of the nas_servers that are associated with this file_events_publisher.
	NasServers []NasServerInstance `json:"nas_servers,omitempty"`
}

// NewFileEventsPublisherInstance instantiates a new FileEventsPublisherInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileEventsPublisherInstance() *FileEventsPublisherInstance {
	this := FileEventsPublisherInstance{}
	var heartbeat int32 = 10
	this.Heartbeat = &heartbeat
	var connectionTimeout int32 = 1000
	this.ConnectionTimeout = &connectionTimeout
	var postEventPolicy PostEventPolicyEnum = POSTEVENTPOLICYENUM_ACCUMULATE
	this.PostEventPolicy = &postEventPolicy
	var denyAccessWhenAllServersOffline bool = false
	this.DenyAccessWhenAllServersOffline = &denyAccessWhenAllServersOffline
	var httpPort int32 = 12228
	this.HttpPort = &httpPort
	var isReplica bool = false
	this.IsReplica = &isReplica
	return &this
}

// NewFileEventsPublisherInstanceWithDefaults instantiates a new FileEventsPublisherInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileEventsPublisherInstanceWithDefaults() *FileEventsPublisherInstance {
	this := FileEventsPublisherInstance{}
	var heartbeat int32 = 10
	this.Heartbeat = &heartbeat
	var connectionTimeout int32 = 1000
	this.ConnectionTimeout = &connectionTimeout
	var postEventPolicy PostEventPolicyEnum = POSTEVENTPOLICYENUM_ACCUMULATE
	this.PostEventPolicy = &postEventPolicy
	var denyAccessWhenAllServersOffline bool = false
	this.DenyAccessWhenAllServersOffline = &denyAccessWhenAllServersOffline
	var httpPort int32 = 12228
	this.HttpPort = &httpPort
	var isReplica bool = false
	this.IsReplica = &isReplica
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileEventsPublisherInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileEventsPublisherInstance) SetName(v string) {
	o.Name = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *FileEventsPublisherInstance) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetHeartbeat returns the Heartbeat field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetHeartbeat() int32 {
	if o == nil || IsNil(o.Heartbeat) {
		var ret int32
		return ret
	}
	return *o.Heartbeat
}

// GetHeartbeatOk returns a tuple with the Heartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetHeartbeatOk() (*int32, bool) {
	if o == nil || IsNil(o.Heartbeat) {
		return nil, false
	}
	return o.Heartbeat, true
}

// HasHeartbeat returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasHeartbeat() bool {
	if o != nil && !IsNil(o.Heartbeat) {
		return true
	}

	return false
}

// SetHeartbeat gets a reference to the given int32 and assigns it to the Heartbeat field.
func (o *FileEventsPublisherInstance) SetHeartbeat(v int32) {
	o.Heartbeat = &v
}

// GetConnectionTimeout returns the ConnectionTimeout field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetConnectionTimeout() int32 {
	if o == nil || IsNil(o.ConnectionTimeout) {
		var ret int32
		return ret
	}
	return *o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetConnectionTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ConnectionTimeout) {
		return nil, false
	}
	return o.ConnectionTimeout, true
}

// HasConnectionTimeout returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasConnectionTimeout() bool {
	if o != nil && !IsNil(o.ConnectionTimeout) {
		return true
	}

	return false
}

// SetConnectionTimeout gets a reference to the given int32 and assigns it to the ConnectionTimeout field.
func (o *FileEventsPublisherInstance) SetConnectionTimeout(v int32) {
	o.ConnectionTimeout = &v
}

// GetPostEventPolicy returns the PostEventPolicy field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetPostEventPolicy() PostEventPolicyEnum {
	if o == nil || IsNil(o.PostEventPolicy) {
		var ret PostEventPolicyEnum
		return ret
	}
	return *o.PostEventPolicy
}

// GetPostEventPolicyOk returns a tuple with the PostEventPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetPostEventPolicyOk() (*PostEventPolicyEnum, bool) {
	if o == nil || IsNil(o.PostEventPolicy) {
		return nil, false
	}
	return o.PostEventPolicy, true
}

// HasPostEventPolicy returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasPostEventPolicy() bool {
	if o != nil && !IsNil(o.PostEventPolicy) {
		return true
	}

	return false
}

// SetPostEventPolicy gets a reference to the given PostEventPolicyEnum and assigns it to the PostEventPolicy field.
func (o *FileEventsPublisherInstance) SetPostEventPolicy(v PostEventPolicyEnum) {
	o.PostEventPolicy = &v
}

// GetDenyAccessWhenAllServersOffline returns the DenyAccessWhenAllServersOffline field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetDenyAccessWhenAllServersOffline() bool {
	if o == nil || IsNil(o.DenyAccessWhenAllServersOffline) {
		var ret bool
		return ret
	}
	return *o.DenyAccessWhenAllServersOffline
}

// GetDenyAccessWhenAllServersOfflineOk returns a tuple with the DenyAccessWhenAllServersOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetDenyAccessWhenAllServersOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyAccessWhenAllServersOffline) {
		return nil, false
	}
	return o.DenyAccessWhenAllServersOffline, true
}

// HasDenyAccessWhenAllServersOffline returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasDenyAccessWhenAllServersOffline() bool {
	if o != nil && !IsNil(o.DenyAccessWhenAllServersOffline) {
		return true
	}

	return false
}

// SetDenyAccessWhenAllServersOffline gets a reference to the given bool and assigns it to the DenyAccessWhenAllServersOffline field.
func (o *FileEventsPublisherInstance) SetDenyAccessWhenAllServersOffline(v bool) {
	o.DenyAccessWhenAllServersOffline = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *FileEventsPublisherInstance) SetUsername(v string) {
	o.Username = &v
}

// GetHttpPort returns the HttpPort field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetHttpPort() int32 {
	if o == nil || IsNil(o.HttpPort) {
		var ret int32
		return ret
	}
	return *o.HttpPort
}

// GetHttpPortOk returns a tuple with the HttpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetHttpPortOk() (*int32, bool) {
	if o == nil || IsNil(o.HttpPort) {
		return nil, false
	}
	return o.HttpPort, true
}

// HasHttpPort returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasHttpPort() bool {
	if o != nil && !IsNil(o.HttpPort) {
		return true
	}

	return false
}

// SetHttpPort gets a reference to the given int32 and assigns it to the HttpPort field.
func (o *FileEventsPublisherInstance) SetHttpPort(v int32) {
	o.HttpPort = &v
}

// GetIsReplica returns the IsReplica field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetIsReplica() bool {
	if o == nil || IsNil(o.IsReplica) {
		var ret bool
		return ret
	}
	return *o.IsReplica
}

// GetIsReplicaOk returns a tuple with the IsReplica field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetIsReplicaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplica) {
		return nil, false
	}
	return o.IsReplica, true
}

// HasIsReplica returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasIsReplica() bool {
	if o != nil && !IsNil(o.IsReplica) {
		return true
	}

	return false
}

// SetIsReplica gets a reference to the given bool and assigns it to the IsReplica field.
func (o *FileEventsPublisherInstance) SetIsReplica(v bool) {
	o.IsReplica = &v
}

// GetPostEventPolicyL10n returns the PostEventPolicyL10n field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetPostEventPolicyL10n() string {
	if o == nil || IsNil(o.PostEventPolicyL10n) {
		var ret string
		return ret
	}
	return *o.PostEventPolicyL10n
}

// GetPostEventPolicyL10nOk returns a tuple with the PostEventPolicyL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetPostEventPolicyL10nOk() (*string, bool) {
	if o == nil || IsNil(o.PostEventPolicyL10n) {
		return nil, false
	}
	return o.PostEventPolicyL10n, true
}

// HasPostEventPolicyL10n returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasPostEventPolicyL10n() bool {
	if o != nil && !IsNil(o.PostEventPolicyL10n) {
		return true
	}

	return false
}

// SetPostEventPolicyL10n gets a reference to the given string and assigns it to the PostEventPolicyL10n field.
func (o *FileEventsPublisherInstance) SetPostEventPolicyL10n(v string) {
	o.PostEventPolicyL10n = &v
}

// GetFileEventsPools returns the FileEventsPools field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetFileEventsPools() []FileEventsPoolInstance {
	if o == nil || IsNil(o.FileEventsPools) {
		var ret []FileEventsPoolInstance
		return ret
	}
	return o.FileEventsPools
}

// GetFileEventsPoolsOk returns a tuple with the FileEventsPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetFileEventsPoolsOk() ([]FileEventsPoolInstance, bool) {
	if o == nil || IsNil(o.FileEventsPools) {
		return nil, false
	}
	return o.FileEventsPools, true
}

// HasFileEventsPools returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasFileEventsPools() bool {
	if o != nil && !IsNil(o.FileEventsPools) {
		return true
	}

	return false
}

// SetFileEventsPools gets a reference to the given []FileEventsPoolInstance and assigns it to the FileEventsPools field.
func (o *FileEventsPublisherInstance) SetFileEventsPools(v []FileEventsPoolInstance) {
	o.FileEventsPools = v
}

// GetNasServers returns the NasServers field value if set, zero value otherwise.
func (o *FileEventsPublisherInstance) GetNasServers() []NasServerInstance {
	if o == nil || IsNil(o.NasServers) {
		var ret []NasServerInstance
		return ret
	}
	return o.NasServers
}

// GetNasServersOk returns a tuple with the NasServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPublisherInstance) GetNasServersOk() ([]NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServers) {
		return nil, false
	}
	return o.NasServers, true
}

// HasNasServers returns a boolean if a field has been set.
func (o *FileEventsPublisherInstance) HasNasServers() bool {
	if o != nil && !IsNil(o.NasServers) {
		return true
	}

	return false
}

// SetNasServers gets a reference to the given []NasServerInstance and assigns it to the NasServers field.
func (o *FileEventsPublisherInstance) SetNasServers(v []NasServerInstance) {
	o.NasServers = v
}

func (o FileEventsPublisherInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileEventsPublisherInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.Heartbeat) {
		toSerialize["heartbeat"] = o.Heartbeat
	}
	if !IsNil(o.ConnectionTimeout) {
		toSerialize["connection_timeout"] = o.ConnectionTimeout
	}
	if !IsNil(o.PostEventPolicy) {
		toSerialize["post_event_policy"] = o.PostEventPolicy
	}
	if !IsNil(o.DenyAccessWhenAllServersOffline) {
		toSerialize["deny_access_when_all_servers_offline"] = o.DenyAccessWhenAllServersOffline
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.HttpPort) {
		toSerialize["http_port"] = o.HttpPort
	}
	if !IsNil(o.IsReplica) {
		toSerialize["is_replica"] = o.IsReplica
	}
	if !IsNil(o.PostEventPolicyL10n) {
		toSerialize["post_event_policy_l10n"] = o.PostEventPolicyL10n
	}
	if !IsNil(o.FileEventsPools) {
		toSerialize["file_events_pools"] = o.FileEventsPools
	}
	if !IsNil(o.NasServers) {
		toSerialize["nas_servers"] = o.NasServers
	}
	return toSerialize, nil
}

type NullableFileEventsPublisherInstance struct {
	value *FileEventsPublisherInstance
	isSet bool
}

func (v NullableFileEventsPublisherInstance) Get() *FileEventsPublisherInstance {
	return v.value
}

func (v *NullableFileEventsPublisherInstance) Set(val *FileEventsPublisherInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileEventsPublisherInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileEventsPublisherInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileEventsPublisherInstance(val *FileEventsPublisherInstance) *NullableFileEventsPublisherInstance {
	return &NullableFileEventsPublisherInstance{value: val, isSet: true}
}

func (v NullableFileEventsPublisherInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileEventsPublisherInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


