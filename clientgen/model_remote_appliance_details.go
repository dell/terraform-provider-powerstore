/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the RemoteApplianceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteApplianceDetails{}

// RemoteApplianceDetails Appliance information.  Was added in version 3.0.0.0.
type RemoteApplianceDetails struct {
	// Unique identifier of the appliance. 
	ApplianceId *string `json:"appliance_id,omitempty"`
	// Serial number of the appliance. 
	ApplianceSerial *string `json:"appliance_serial,omitempty"`
}

// NewRemoteApplianceDetails instantiates a new RemoteApplianceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteApplianceDetails() *RemoteApplianceDetails {
	this := RemoteApplianceDetails{}
	return &this
}

// NewRemoteApplianceDetailsWithDefaults instantiates a new RemoteApplianceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteApplianceDetailsWithDefaults() *RemoteApplianceDetails {
	this := RemoteApplianceDetails{}
	return &this
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *RemoteApplianceDetails) GetApplianceId() string {
	if o == nil || IsNil(o.ApplianceId) {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteApplianceDetails) GetApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *RemoteApplianceDetails) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *RemoteApplianceDetails) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetApplianceSerial returns the ApplianceSerial field value if set, zero value otherwise.
func (o *RemoteApplianceDetails) GetApplianceSerial() string {
	if o == nil || IsNil(o.ApplianceSerial) {
		var ret string
		return ret
	}
	return *o.ApplianceSerial
}

// GetApplianceSerialOk returns a tuple with the ApplianceSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteApplianceDetails) GetApplianceSerialOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceSerial) {
		return nil, false
	}
	return o.ApplianceSerial, true
}

// HasApplianceSerial returns a boolean if a field has been set.
func (o *RemoteApplianceDetails) HasApplianceSerial() bool {
	if o != nil && !IsNil(o.ApplianceSerial) {
		return true
	}

	return false
}

// SetApplianceSerial gets a reference to the given string and assigns it to the ApplianceSerial field.
func (o *RemoteApplianceDetails) SetApplianceSerial(v string) {
	o.ApplianceSerial = &v
}

func (o RemoteApplianceDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteApplianceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplianceId) {
		toSerialize["appliance_id"] = o.ApplianceId
	}
	if !IsNil(o.ApplianceSerial) {
		toSerialize["appliance_serial"] = o.ApplianceSerial
	}
	return toSerialize, nil
}

type NullableRemoteApplianceDetails struct {
	value *RemoteApplianceDetails
	isSet bool
}

func (v NullableRemoteApplianceDetails) Get() *RemoteApplianceDetails {
	return v.value
}

func (v *NullableRemoteApplianceDetails) Set(val *RemoteApplianceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteApplianceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteApplianceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteApplianceDetails(val *RemoteApplianceDetails) *NullableRemoteApplianceDetails {
	return &NullableRemoteApplianceDetails{value: val, isSet: true}
}

func (v NullableRemoteApplianceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteApplianceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


