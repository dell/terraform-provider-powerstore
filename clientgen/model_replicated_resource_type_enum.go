/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// ReplicatedResourceTypeEnum Storage resource types eligible for replication protection: * volume          - Replication session created on a volume. * volume_group    - Replication session created on a volume group. * replication_group - Replication session created on a replication group. * nas_server        - Replication session created on a NAS server. * file_system       - Replication session created on a File system.  Values was added in 3.0.0.0: replication_group, nas_server. Values was added in 3.6.0.0: file_system.
type ReplicatedResourceTypeEnum string

// List of ReplicatedResourceTypeEnum
const (
	REPLICATEDRESOURCETYPEENUM_FILE_SYSTEM ReplicatedResourceTypeEnum = "file_system"
	REPLICATEDRESOURCETYPEENUM_NAS_SERVER ReplicatedResourceTypeEnum = "nas_server"
	REPLICATEDRESOURCETYPEENUM_REPLICATION_GROUP ReplicatedResourceTypeEnum = "replication_group"
	REPLICATEDRESOURCETYPEENUM_VOLUME ReplicatedResourceTypeEnum = "volume"
	REPLICATEDRESOURCETYPEENUM_VOLUME_GROUP ReplicatedResourceTypeEnum = "volume_group"
)

// All allowed values of ReplicatedResourceTypeEnum enum
var AllowedReplicatedResourceTypeEnumEnumValues = []ReplicatedResourceTypeEnum{
	"file_system",
	"nas_server",
	"replication_group",
	"volume",
	"volume_group",
}

func (v *ReplicatedResourceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicatedResourceTypeEnum(value)
	for _, existing := range AllowedReplicatedResourceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicatedResourceTypeEnum", value)
}

// NewReplicatedResourceTypeEnumFromValue returns a pointer to a valid ReplicatedResourceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicatedResourceTypeEnumFromValue(v string) (*ReplicatedResourceTypeEnum, error) {
	ev := ReplicatedResourceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicatedResourceTypeEnum: valid values are %v", v, AllowedReplicatedResourceTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicatedResourceTypeEnum) IsValid() bool {
	for _, existing := range AllowedReplicatedResourceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicatedResourceTypeEnum value
func (v ReplicatedResourceTypeEnum) Ptr() *ReplicatedResourceTypeEnum {
	return &v
}

type NullableReplicatedResourceTypeEnum struct {
	value *ReplicatedResourceTypeEnum
	isSet bool
}

func (v NullableReplicatedResourceTypeEnum) Get() *ReplicatedResourceTypeEnum {
	return v.value
}

func (v *NullableReplicatedResourceTypeEnum) Set(val *ReplicatedResourceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicatedResourceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicatedResourceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicatedResourceTypeEnum(val *ReplicatedResourceTypeEnum) *NullableReplicatedResourceTypeEnum {
	return &NullableReplicatedResourceTypeEnum{value: val, isSet: true}
}

func (v NullableReplicatedResourceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicatedResourceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

