/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// RemoteSystemStateEnum Possible remote system states:  * OK                             - Normal conditions.  * Update_Needed                  - Verify and update needed to handle network configuration changes on the systems.  * Management_Connection_Lost     - Management connection to the remote peer is lost.  * Partial_Delete                 - Remote System is partially deleted. Either the data connections from the PowerStore to remote system is not destroyed completely or the file capability of remote system has been deleted but the block deletion has failed.  Values was added in 3.0.0.0: Partial_Delete.
type RemoteSystemStateEnum string

// List of RemoteSystemStateEnum
const (
	REMOTESYSTEMSTATEENUM_OK RemoteSystemStateEnum = "OK"
	REMOTESYSTEMSTATEENUM_UPDATE_NEEDED RemoteSystemStateEnum = "Update_Needed"
	REMOTESYSTEMSTATEENUM_MANAGEMENT_CONNECTION_LOST RemoteSystemStateEnum = "Management_Connection_Lost"
	REMOTESYSTEMSTATEENUM_PARTIAL_DELETE RemoteSystemStateEnum = "Partial_Delete"
)

// All allowed values of RemoteSystemStateEnum enum
var AllowedRemoteSystemStateEnumEnumValues = []RemoteSystemStateEnum{
	"OK",
	"Update_Needed",
	"Management_Connection_Lost",
	"Partial_Delete",
}

func (v *RemoteSystemStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RemoteSystemStateEnum(value)
	for _, existing := range AllowedRemoteSystemStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RemoteSystemStateEnum", value)
}

// NewRemoteSystemStateEnumFromValue returns a pointer to a valid RemoteSystemStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRemoteSystemStateEnumFromValue(v string) (*RemoteSystemStateEnum, error) {
	ev := RemoteSystemStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RemoteSystemStateEnum: valid values are %v", v, AllowedRemoteSystemStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RemoteSystemStateEnum) IsValid() bool {
	for _, existing := range AllowedRemoteSystemStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RemoteSystemStateEnum value
func (v RemoteSystemStateEnum) Ptr() *RemoteSystemStateEnum {
	return &v
}

type NullableRemoteSystemStateEnum struct {
	value *RemoteSystemStateEnum
	isSet bool
}

func (v NullableRemoteSystemStateEnum) Get() *RemoteSystemStateEnum {
	return v.value
}

func (v *NullableRemoteSystemStateEnum) Set(val *RemoteSystemStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSystemStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSystemStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSystemStateEnum(val *RemoteSystemStateEnum) *NullableRemoteSystemStateEnum {
	return &NullableRemoteSystemStateEnum{value: val, isSet: true}
}

func (v NullableRemoteSystemStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSystemStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

