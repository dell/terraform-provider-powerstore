/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the LocationHistoryInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationHistoryInstance{}

// LocationHistoryInstance Storage resource location history. All entries are kept indefinitely and are removed when the resource object is deleted. 
type LocationHistoryInstance struct {
	// Unique identifier of the appliance from which the volume was relocated. 
	FromApplianceId *string `json:"from_appliance_id,omitempty"`
	// Unique identifier of the appliance to which the volume was relocated.
	ToApplianceId *string `json:"to_appliance_id,omitempty"`
	Reason *LocationHistoryReasonEnum `json:"reason,omitempty"`
	// Time when the storage resource location changed.
	MigratedOn *time.Time `json:"migrated_on,omitempty"`
	// Localized message string corresponding to reason
	ReasonL10n *string `json:"reason_l10n,omitempty"`
}

// NewLocationHistoryInstance instantiates a new LocationHistoryInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationHistoryInstance() *LocationHistoryInstance {
	this := LocationHistoryInstance{}
	return &this
}

// NewLocationHistoryInstanceWithDefaults instantiates a new LocationHistoryInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationHistoryInstanceWithDefaults() *LocationHistoryInstance {
	this := LocationHistoryInstance{}
	return &this
}

// GetFromApplianceId returns the FromApplianceId field value if set, zero value otherwise.
func (o *LocationHistoryInstance) GetFromApplianceId() string {
	if o == nil || IsNil(o.FromApplianceId) {
		var ret string
		return ret
	}
	return *o.FromApplianceId
}

// GetFromApplianceIdOk returns a tuple with the FromApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationHistoryInstance) GetFromApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.FromApplianceId) {
		return nil, false
	}
	return o.FromApplianceId, true
}

// HasFromApplianceId returns a boolean if a field has been set.
func (o *LocationHistoryInstance) HasFromApplianceId() bool {
	if o != nil && !IsNil(o.FromApplianceId) {
		return true
	}

	return false
}

// SetFromApplianceId gets a reference to the given string and assigns it to the FromApplianceId field.
func (o *LocationHistoryInstance) SetFromApplianceId(v string) {
	o.FromApplianceId = &v
}

// GetToApplianceId returns the ToApplianceId field value if set, zero value otherwise.
func (o *LocationHistoryInstance) GetToApplianceId() string {
	if o == nil || IsNil(o.ToApplianceId) {
		var ret string
		return ret
	}
	return *o.ToApplianceId
}

// GetToApplianceIdOk returns a tuple with the ToApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationHistoryInstance) GetToApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ToApplianceId) {
		return nil, false
	}
	return o.ToApplianceId, true
}

// HasToApplianceId returns a boolean if a field has been set.
func (o *LocationHistoryInstance) HasToApplianceId() bool {
	if o != nil && !IsNil(o.ToApplianceId) {
		return true
	}

	return false
}

// SetToApplianceId gets a reference to the given string and assigns it to the ToApplianceId field.
func (o *LocationHistoryInstance) SetToApplianceId(v string) {
	o.ToApplianceId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *LocationHistoryInstance) GetReason() LocationHistoryReasonEnum {
	if o == nil || IsNil(o.Reason) {
		var ret LocationHistoryReasonEnum
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationHistoryInstance) GetReasonOk() (*LocationHistoryReasonEnum, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *LocationHistoryInstance) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given LocationHistoryReasonEnum and assigns it to the Reason field.
func (o *LocationHistoryInstance) SetReason(v LocationHistoryReasonEnum) {
	o.Reason = &v
}

// GetMigratedOn returns the MigratedOn field value if set, zero value otherwise.
func (o *LocationHistoryInstance) GetMigratedOn() time.Time {
	if o == nil || IsNil(o.MigratedOn) {
		var ret time.Time
		return ret
	}
	return *o.MigratedOn
}

// GetMigratedOnOk returns a tuple with the MigratedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationHistoryInstance) GetMigratedOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MigratedOn) {
		return nil, false
	}
	return o.MigratedOn, true
}

// HasMigratedOn returns a boolean if a field has been set.
func (o *LocationHistoryInstance) HasMigratedOn() bool {
	if o != nil && !IsNil(o.MigratedOn) {
		return true
	}

	return false
}

// SetMigratedOn gets a reference to the given time.Time and assigns it to the MigratedOn field.
func (o *LocationHistoryInstance) SetMigratedOn(v time.Time) {
	o.MigratedOn = &v
}

// GetReasonL10n returns the ReasonL10n field value if set, zero value otherwise.
func (o *LocationHistoryInstance) GetReasonL10n() string {
	if o == nil || IsNil(o.ReasonL10n) {
		var ret string
		return ret
	}
	return *o.ReasonL10n
}

// GetReasonL10nOk returns a tuple with the ReasonL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationHistoryInstance) GetReasonL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonL10n) {
		return nil, false
	}
	return o.ReasonL10n, true
}

// HasReasonL10n returns a boolean if a field has been set.
func (o *LocationHistoryInstance) HasReasonL10n() bool {
	if o != nil && !IsNil(o.ReasonL10n) {
		return true
	}

	return false
}

// SetReasonL10n gets a reference to the given string and assigns it to the ReasonL10n field.
func (o *LocationHistoryInstance) SetReasonL10n(v string) {
	o.ReasonL10n = &v
}

func (o LocationHistoryInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationHistoryInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromApplianceId) {
		toSerialize["from_appliance_id"] = o.FromApplianceId
	}
	if !IsNil(o.ToApplianceId) {
		toSerialize["to_appliance_id"] = o.ToApplianceId
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.MigratedOn) {
		toSerialize["migrated_on"] = o.MigratedOn
	}
	if !IsNil(o.ReasonL10n) {
		toSerialize["reason_l10n"] = o.ReasonL10n
	}
	return toSerialize, nil
}

type NullableLocationHistoryInstance struct {
	value *LocationHistoryInstance
	isSet bool
}

func (v NullableLocationHistoryInstance) Get() *LocationHistoryInstance {
	return v.value
}

func (v *NullableLocationHistoryInstance) Set(val *LocationHistoryInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationHistoryInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationHistoryInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationHistoryInstance(val *LocationHistoryInstance) *NullableLocationHistoryInstance {
	return &NullableLocationHistoryInstance{value: val, isSet: true}
}

func (v NullableLocationHistoryInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationHistoryInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


