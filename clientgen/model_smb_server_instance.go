/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the SmbServerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmbServerInstance{}

// SmbServerInstance This resource type has queriable association from nas_server
type SmbServerInstance struct {
	// Unique identifier of the SMB server.
	Id *string `json:"id,omitempty"`
	// Unique identifier of the NAS server.
	NasServerId *string `json:"nas_server_id,omitempty"`
	// DNS name of the associated computer account when the SMB server is joined to an Active Directory domain. This name's minimum length is 2 characters, it is limited to 63 bytes and must not contain the following characters -   - comma (.)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&)   - apostrophe (')   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - underscore (_)   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) 
	ComputerName *string `json:"computer_name,omitempty"`
	// Domain name where SMB server is registered in Active Directory, if applicable.
	Domain *string `json:"domain,omitempty"`
	// NetBIOS name is the network name of the standalone SMB server. SMB server joined to Active Directory also have NetBIOS Name, defaulted to the 15 first characters of the computerName attribute. Administrators can specify a custom NetBIOS Name for a SMB server using this attribute. NetBIOS Name are limited to 15 characters and cannot contain the following characters -   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\"\")   - less than sign (<)   - greater than sign (>)   - vertical bar (|) as definied by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/) 
	NetbiosName *string `json:"netbios_name,omitempty"`
	// Applies to stand-alone SMB servers only. Windows network workgroup for the SMB server. Workgroup names are limited to 15 alphanumeric ASCII characters. 
	Workgroup *string `json:"workgroup,omitempty"`
	// Description of the SMB server.
	Description *string `json:"description,omitempty"`
	// Indicates whether the SMB server is standalone. Values are: - true - SMB server is standalone. - false - SMB server is a domain SMB server to be joined to the Active Directory. 
	IsStandalone *bool `json:"is_standalone,omitempty"`
	// Indicates whether the SMB server is joined to the Active Directory. Always false for standalone SMB servers.
	IsJoined *bool `json:"is_joined,omitempty"`
	NasServer *NasServerInstance `json:"nas_server,omitempty"`
}

// NewSmbServerInstance instantiates a new SmbServerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbServerInstance() *SmbServerInstance {
	this := SmbServerInstance{}
	return &this
}

// NewSmbServerInstanceWithDefaults instantiates a new SmbServerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbServerInstanceWithDefaults() *SmbServerInstance {
	this := SmbServerInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SmbServerInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SmbServerInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SmbServerInstance) SetId(v string) {
	o.Id = &v
}

// GetNasServerId returns the NasServerId field value if set, zero value otherwise.
func (o *SmbServerInstance) GetNasServerId() string {
	if o == nil || IsNil(o.NasServerId) {
		var ret string
		return ret
	}
	return *o.NasServerId
}

// GetNasServerIdOk returns a tuple with the NasServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetNasServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NasServerId) {
		return nil, false
	}
	return o.NasServerId, true
}

// HasNasServerId returns a boolean if a field has been set.
func (o *SmbServerInstance) HasNasServerId() bool {
	if o != nil && !IsNil(o.NasServerId) {
		return true
	}

	return false
}

// SetNasServerId gets a reference to the given string and assigns it to the NasServerId field.
func (o *SmbServerInstance) SetNasServerId(v string) {
	o.NasServerId = &v
}

// GetComputerName returns the ComputerName field value if set, zero value otherwise.
func (o *SmbServerInstance) GetComputerName() string {
	if o == nil || IsNil(o.ComputerName) {
		var ret string
		return ret
	}
	return *o.ComputerName
}

// GetComputerNameOk returns a tuple with the ComputerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetComputerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ComputerName) {
		return nil, false
	}
	return o.ComputerName, true
}

// HasComputerName returns a boolean if a field has been set.
func (o *SmbServerInstance) HasComputerName() bool {
	if o != nil && !IsNil(o.ComputerName) {
		return true
	}

	return false
}

// SetComputerName gets a reference to the given string and assigns it to the ComputerName field.
func (o *SmbServerInstance) SetComputerName(v string) {
	o.ComputerName = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *SmbServerInstance) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *SmbServerInstance) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *SmbServerInstance) SetDomain(v string) {
	o.Domain = &v
}

// GetNetbiosName returns the NetbiosName field value if set, zero value otherwise.
func (o *SmbServerInstance) GetNetbiosName() string {
	if o == nil || IsNil(o.NetbiosName) {
		var ret string
		return ret
	}
	return *o.NetbiosName
}

// GetNetbiosNameOk returns a tuple with the NetbiosName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetNetbiosNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetbiosName) {
		return nil, false
	}
	return o.NetbiosName, true
}

// HasNetbiosName returns a boolean if a field has been set.
func (o *SmbServerInstance) HasNetbiosName() bool {
	if o != nil && !IsNil(o.NetbiosName) {
		return true
	}

	return false
}

// SetNetbiosName gets a reference to the given string and assigns it to the NetbiosName field.
func (o *SmbServerInstance) SetNetbiosName(v string) {
	o.NetbiosName = &v
}

// GetWorkgroup returns the Workgroup field value if set, zero value otherwise.
func (o *SmbServerInstance) GetWorkgroup() string {
	if o == nil || IsNil(o.Workgroup) {
		var ret string
		return ret
	}
	return *o.Workgroup
}

// GetWorkgroupOk returns a tuple with the Workgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetWorkgroupOk() (*string, bool) {
	if o == nil || IsNil(o.Workgroup) {
		return nil, false
	}
	return o.Workgroup, true
}

// HasWorkgroup returns a boolean if a field has been set.
func (o *SmbServerInstance) HasWorkgroup() bool {
	if o != nil && !IsNil(o.Workgroup) {
		return true
	}

	return false
}

// SetWorkgroup gets a reference to the given string and assigns it to the Workgroup field.
func (o *SmbServerInstance) SetWorkgroup(v string) {
	o.Workgroup = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SmbServerInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SmbServerInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SmbServerInstance) SetDescription(v string) {
	o.Description = &v
}

// GetIsStandalone returns the IsStandalone field value if set, zero value otherwise.
func (o *SmbServerInstance) GetIsStandalone() bool {
	if o == nil || IsNil(o.IsStandalone) {
		var ret bool
		return ret
	}
	return *o.IsStandalone
}

// GetIsStandaloneOk returns a tuple with the IsStandalone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetIsStandaloneOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStandalone) {
		return nil, false
	}
	return o.IsStandalone, true
}

// HasIsStandalone returns a boolean if a field has been set.
func (o *SmbServerInstance) HasIsStandalone() bool {
	if o != nil && !IsNil(o.IsStandalone) {
		return true
	}

	return false
}

// SetIsStandalone gets a reference to the given bool and assigns it to the IsStandalone field.
func (o *SmbServerInstance) SetIsStandalone(v bool) {
	o.IsStandalone = &v
}

// GetIsJoined returns the IsJoined field value if set, zero value otherwise.
func (o *SmbServerInstance) GetIsJoined() bool {
	if o == nil || IsNil(o.IsJoined) {
		var ret bool
		return ret
	}
	return *o.IsJoined
}

// GetIsJoinedOk returns a tuple with the IsJoined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetIsJoinedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsJoined) {
		return nil, false
	}
	return o.IsJoined, true
}

// HasIsJoined returns a boolean if a field has been set.
func (o *SmbServerInstance) HasIsJoined() bool {
	if o != nil && !IsNil(o.IsJoined) {
		return true
	}

	return false
}

// SetIsJoined gets a reference to the given bool and assigns it to the IsJoined field.
func (o *SmbServerInstance) SetIsJoined(v bool) {
	o.IsJoined = &v
}

// GetNasServer returns the NasServer field value if set, zero value otherwise.
func (o *SmbServerInstance) GetNasServer() NasServerInstance {
	if o == nil || IsNil(o.NasServer) {
		var ret NasServerInstance
		return ret
	}
	return *o.NasServer
}

// GetNasServerOk returns a tuple with the NasServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbServerInstance) GetNasServerOk() (*NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServer) {
		return nil, false
	}
	return o.NasServer, true
}

// HasNasServer returns a boolean if a field has been set.
func (o *SmbServerInstance) HasNasServer() bool {
	if o != nil && !IsNil(o.NasServer) {
		return true
	}

	return false
}

// SetNasServer gets a reference to the given NasServerInstance and assigns it to the NasServer field.
func (o *SmbServerInstance) SetNasServer(v NasServerInstance) {
	o.NasServer = &v
}

func (o SmbServerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmbServerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NasServerId) {
		toSerialize["nas_server_id"] = o.NasServerId
	}
	if !IsNil(o.ComputerName) {
		toSerialize["computer_name"] = o.ComputerName
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.NetbiosName) {
		toSerialize["netbios_name"] = o.NetbiosName
	}
	if !IsNil(o.Workgroup) {
		toSerialize["workgroup"] = o.Workgroup
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsStandalone) {
		toSerialize["is_standalone"] = o.IsStandalone
	}
	if !IsNil(o.IsJoined) {
		toSerialize["is_joined"] = o.IsJoined
	}
	if !IsNil(o.NasServer) {
		toSerialize["nas_server"] = o.NasServer
	}
	return toSerialize, nil
}

type NullableSmbServerInstance struct {
	value *SmbServerInstance
	isSet bool
}

func (v NullableSmbServerInstance) Get() *SmbServerInstance {
	return v.value
}

func (v *NullableSmbServerInstance) Set(val *SmbServerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbServerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbServerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbServerInstance(val *SmbServerInstance) *NullableSmbServerInstance {
	return &NullableSmbServerInstance{value: val, isSet: true}
}

func (v NullableSmbServerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbServerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


