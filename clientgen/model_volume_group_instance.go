/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the VolumeGroupInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeGroupInstance{}

// VolumeGroupInstance Information about a volume group. This resource type has queriable associations from policy, migration_session, remote_snapshot_session, remote_snapshot, volume, replication_session
type VolumeGroupInstance struct {
	// Unique identifier of the volume group.
	Id *string `json:"id,omitempty"`
	// Name of the volume group.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Description for the volume group.
	Description *string `json:"description,omitempty"`
	// The time at which the volume group was created.
	CreationTimestamp *time.Time `json:"creation_timestamp,omitempty"`
	// This is a derived field that is set internally. It enables/disables the following functionality:  * Whether a protection_policy can be applied to the group.  * Whether manual snapshots can be taken.  * Whether clones of the group can be created. 
	IsProtectable *bool `json:"is_protectable,omitempty"`
	// Unique identifier of the protection policy assigned to the volume group. This attribute is only applicable to primary and clone volume groups. 
	ProtectionPolicyId *string `json:"protection_policy_id,omitempty"`
	// Unique identifier of the optional performance policy assigned to this volume group. Was added in version 4.0.0.0.
	QosPerformancePolicyId *string `json:"qos_performance_policy_id,omitempty"`
	// Unique identifier of the migration session assigned to the volume group when it is part of a migration activity. 
	MigrationSessionId *string `json:"migration_session_id,omitempty"`
	// For a primary or a clone volume group, this property determines whether snapshot sets of the group will be write order consistent.   For a snapshot set, this property indicates whether the snapshot set is write-order consistent. 
	IsWriteOrderConsistent *bool `json:"is_write_order_consistent,omitempty"`
	PlacementRule *VGPlacementRule `json:"placement_rule,omitempty"`
	Type *VolumeTypeEnum `json:"type,omitempty"`
	// Indicates whether this volume group is a replication destination. A replication destination will be created by the system when a replication session is created. When there is an active replication session, all the user operations are restricted including modification, deletion, host operation, snapshot, clone, etc. After the replication session is deleted, the replication destination will remain as it is until the end user changes it to be a non-replication destination. After the change, it becomes a primary volume group. If the end user keeps it as a replication destination, when the replication session is recreated, the replication destination could potentially be reused in the new session to avoid a time-consuming full sync. This property is only valid for primary and clone volume groups. 
	IsReplicationDestination *bool `json:"is_replication_destination,omitempty"`
	// Unique identifier of the replication session assigned to the volume group if it has been configured as a metro volume group between two PowerStore clusters. The volume group can only be modified, refreshed, or restored when the metro_replication_session is in the paused state.  Was added in version 4.0.0.0.
	MetroReplicationSessionId *string `json:"metro_replication_session_id,omitempty"`
	// This field is true when the volume group is visible from a host perspective. This will always be true UNLESS a metro session is associated with the volume group and that session has made this instance unavailable.  Was added in version 4.0.0.0.
	IsHostAccessAvailable *bool `json:"is_host_access_available,omitempty"`
	ProtectionData *ProtectionDataInstance `json:"protection_data,omitempty"`
	// Indicates whether the volume group is being imported.
	IsImporting *bool `json:"is_importing,omitempty"`
	// A list of locations. The list of locations includes the move to the current appliance.   Filtering on the fields of this embedded resource is not supported.
	LocationHistory []LocationHistoryInstance `json:"location_history,omitempty"`
	// Localized message string corresponding to type
	TypeL10n *string `json:"type_l10n,omitempty"`
	ProtectionPolicy *PolicyInstance `json:"protection_policy,omitempty"`
	QosPerformancePolicy *PolicyInstance `json:"qos_performance_policy,omitempty"`
	MigrationSession *MigrationSessionInstance `json:"migration_session,omitempty"`
	// This is the inverse of the resource type remote_snapshot_session association.
	RemoteSnapshotSessions []RemoteSnapshotSessionInstance `json:"remote_snapshot_sessions,omitempty"`
	// This is the inverse of the resource type remote_snapshot_session association.
	CurrentRemoteSnapshotSessions []RemoteSnapshotSessionInstance `json:"current_remote_snapshot_sessions,omitempty"`
	// This is the inverse of the resource type remote_snapshot association.
	RemoteSnapshots []RemoteSnapshotInstance `json:"remote_snapshots,omitempty"`
	// List of the volumes that are associated with this volume_group.
	Volumes []VolumeInstance `json:"volumes,omitempty"`
	// List of the replication_sessions that are associated with this volume_group.
	ReplicationSessions []ReplicationSessionInstance `json:"replication_sessions,omitempty"`
}

// NewVolumeGroupInstance instantiates a new VolumeGroupInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeGroupInstance() *VolumeGroupInstance {
	this := VolumeGroupInstance{}
	var isReplicationDestination bool = false
	this.IsReplicationDestination = &isReplicationDestination
	return &this
}

// NewVolumeGroupInstanceWithDefaults instantiates a new VolumeGroupInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeGroupInstanceWithDefaults() *VolumeGroupInstance {
	this := VolumeGroupInstance{}
	var isReplicationDestination bool = false
	this.IsReplicationDestination = &isReplicationDestination
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VolumeGroupInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VolumeGroupInstance) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VolumeGroupInstance) SetDescription(v string) {
	o.Description = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetCreationTimestamp() time.Time {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given time.Time and assigns it to the CreationTimestamp field.
func (o *VolumeGroupInstance) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = &v
}

// GetIsProtectable returns the IsProtectable field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetIsProtectable() bool {
	if o == nil || IsNil(o.IsProtectable) {
		var ret bool
		return ret
	}
	return *o.IsProtectable
}

// GetIsProtectableOk returns a tuple with the IsProtectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetIsProtectableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProtectable) {
		return nil, false
	}
	return o.IsProtectable, true
}

// HasIsProtectable returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasIsProtectable() bool {
	if o != nil && !IsNil(o.IsProtectable) {
		return true
	}

	return false
}

// SetIsProtectable gets a reference to the given bool and assigns it to the IsProtectable field.
func (o *VolumeGroupInstance) SetIsProtectable(v bool) {
	o.IsProtectable = &v
}

// GetProtectionPolicyId returns the ProtectionPolicyId field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetProtectionPolicyId() string {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyId
}

// GetProtectionPolicyIdOk returns a tuple with the ProtectionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetProtectionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		return nil, false
	}
	return o.ProtectionPolicyId, true
}

// HasProtectionPolicyId returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasProtectionPolicyId() bool {
	if o != nil && !IsNil(o.ProtectionPolicyId) {
		return true
	}

	return false
}

// SetProtectionPolicyId gets a reference to the given string and assigns it to the ProtectionPolicyId field.
func (o *VolumeGroupInstance) SetProtectionPolicyId(v string) {
	o.ProtectionPolicyId = &v
}

// GetQosPerformancePolicyId returns the QosPerformancePolicyId field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetQosPerformancePolicyId() string {
	if o == nil || IsNil(o.QosPerformancePolicyId) {
		var ret string
		return ret
	}
	return *o.QosPerformancePolicyId
}

// GetQosPerformancePolicyIdOk returns a tuple with the QosPerformancePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetQosPerformancePolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.QosPerformancePolicyId) {
		return nil, false
	}
	return o.QosPerformancePolicyId, true
}

// HasQosPerformancePolicyId returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasQosPerformancePolicyId() bool {
	if o != nil && !IsNil(o.QosPerformancePolicyId) {
		return true
	}

	return false
}

// SetQosPerformancePolicyId gets a reference to the given string and assigns it to the QosPerformancePolicyId field.
func (o *VolumeGroupInstance) SetQosPerformancePolicyId(v string) {
	o.QosPerformancePolicyId = &v
}

// GetMigrationSessionId returns the MigrationSessionId field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetMigrationSessionId() string {
	if o == nil || IsNil(o.MigrationSessionId) {
		var ret string
		return ret
	}
	return *o.MigrationSessionId
}

// GetMigrationSessionIdOk returns a tuple with the MigrationSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetMigrationSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.MigrationSessionId) {
		return nil, false
	}
	return o.MigrationSessionId, true
}

// HasMigrationSessionId returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasMigrationSessionId() bool {
	if o != nil && !IsNil(o.MigrationSessionId) {
		return true
	}

	return false
}

// SetMigrationSessionId gets a reference to the given string and assigns it to the MigrationSessionId field.
func (o *VolumeGroupInstance) SetMigrationSessionId(v string) {
	o.MigrationSessionId = &v
}

// GetIsWriteOrderConsistent returns the IsWriteOrderConsistent field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetIsWriteOrderConsistent() bool {
	if o == nil || IsNil(o.IsWriteOrderConsistent) {
		var ret bool
		return ret
	}
	return *o.IsWriteOrderConsistent
}

// GetIsWriteOrderConsistentOk returns a tuple with the IsWriteOrderConsistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetIsWriteOrderConsistentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWriteOrderConsistent) {
		return nil, false
	}
	return o.IsWriteOrderConsistent, true
}

// HasIsWriteOrderConsistent returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasIsWriteOrderConsistent() bool {
	if o != nil && !IsNil(o.IsWriteOrderConsistent) {
		return true
	}

	return false
}

// SetIsWriteOrderConsistent gets a reference to the given bool and assigns it to the IsWriteOrderConsistent field.
func (o *VolumeGroupInstance) SetIsWriteOrderConsistent(v bool) {
	o.IsWriteOrderConsistent = &v
}

// GetPlacementRule returns the PlacementRule field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetPlacementRule() VGPlacementRule {
	if o == nil || IsNil(o.PlacementRule) {
		var ret VGPlacementRule
		return ret
	}
	return *o.PlacementRule
}

// GetPlacementRuleOk returns a tuple with the PlacementRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetPlacementRuleOk() (*VGPlacementRule, bool) {
	if o == nil || IsNil(o.PlacementRule) {
		return nil, false
	}
	return o.PlacementRule, true
}

// HasPlacementRule returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasPlacementRule() bool {
	if o != nil && !IsNil(o.PlacementRule) {
		return true
	}

	return false
}

// SetPlacementRule gets a reference to the given VGPlacementRule and assigns it to the PlacementRule field.
func (o *VolumeGroupInstance) SetPlacementRule(v VGPlacementRule) {
	o.PlacementRule = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetType() VolumeTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret VolumeTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetTypeOk() (*VolumeTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VolumeTypeEnum and assigns it to the Type field.
func (o *VolumeGroupInstance) SetType(v VolumeTypeEnum) {
	o.Type = &v
}

// GetIsReplicationDestination returns the IsReplicationDestination field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetIsReplicationDestination() bool {
	if o == nil || IsNil(o.IsReplicationDestination) {
		var ret bool
		return ret
	}
	return *o.IsReplicationDestination
}

// GetIsReplicationDestinationOk returns a tuple with the IsReplicationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetIsReplicationDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplicationDestination) {
		return nil, false
	}
	return o.IsReplicationDestination, true
}

// HasIsReplicationDestination returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasIsReplicationDestination() bool {
	if o != nil && !IsNil(o.IsReplicationDestination) {
		return true
	}

	return false
}

// SetIsReplicationDestination gets a reference to the given bool and assigns it to the IsReplicationDestination field.
func (o *VolumeGroupInstance) SetIsReplicationDestination(v bool) {
	o.IsReplicationDestination = &v
}

// GetMetroReplicationSessionId returns the MetroReplicationSessionId field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetMetroReplicationSessionId() string {
	if o == nil || IsNil(o.MetroReplicationSessionId) {
		var ret string
		return ret
	}
	return *o.MetroReplicationSessionId
}

// GetMetroReplicationSessionIdOk returns a tuple with the MetroReplicationSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetMetroReplicationSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.MetroReplicationSessionId) {
		return nil, false
	}
	return o.MetroReplicationSessionId, true
}

// HasMetroReplicationSessionId returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasMetroReplicationSessionId() bool {
	if o != nil && !IsNil(o.MetroReplicationSessionId) {
		return true
	}

	return false
}

// SetMetroReplicationSessionId gets a reference to the given string and assigns it to the MetroReplicationSessionId field.
func (o *VolumeGroupInstance) SetMetroReplicationSessionId(v string) {
	o.MetroReplicationSessionId = &v
}

// GetIsHostAccessAvailable returns the IsHostAccessAvailable field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetIsHostAccessAvailable() bool {
	if o == nil || IsNil(o.IsHostAccessAvailable) {
		var ret bool
		return ret
	}
	return *o.IsHostAccessAvailable
}

// GetIsHostAccessAvailableOk returns a tuple with the IsHostAccessAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetIsHostAccessAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHostAccessAvailable) {
		return nil, false
	}
	return o.IsHostAccessAvailable, true
}

// HasIsHostAccessAvailable returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasIsHostAccessAvailable() bool {
	if o != nil && !IsNil(o.IsHostAccessAvailable) {
		return true
	}

	return false
}

// SetIsHostAccessAvailable gets a reference to the given bool and assigns it to the IsHostAccessAvailable field.
func (o *VolumeGroupInstance) SetIsHostAccessAvailable(v bool) {
	o.IsHostAccessAvailable = &v
}

// GetProtectionData returns the ProtectionData field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetProtectionData() ProtectionDataInstance {
	if o == nil || IsNil(o.ProtectionData) {
		var ret ProtectionDataInstance
		return ret
	}
	return *o.ProtectionData
}

// GetProtectionDataOk returns a tuple with the ProtectionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetProtectionDataOk() (*ProtectionDataInstance, bool) {
	if o == nil || IsNil(o.ProtectionData) {
		return nil, false
	}
	return o.ProtectionData, true
}

// HasProtectionData returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasProtectionData() bool {
	if o != nil && !IsNil(o.ProtectionData) {
		return true
	}

	return false
}

// SetProtectionData gets a reference to the given ProtectionDataInstance and assigns it to the ProtectionData field.
func (o *VolumeGroupInstance) SetProtectionData(v ProtectionDataInstance) {
	o.ProtectionData = &v
}

// GetIsImporting returns the IsImporting field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetIsImporting() bool {
	if o == nil || IsNil(o.IsImporting) {
		var ret bool
		return ret
	}
	return *o.IsImporting
}

// GetIsImportingOk returns a tuple with the IsImporting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetIsImportingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsImporting) {
		return nil, false
	}
	return o.IsImporting, true
}

// HasIsImporting returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasIsImporting() bool {
	if o != nil && !IsNil(o.IsImporting) {
		return true
	}

	return false
}

// SetIsImporting gets a reference to the given bool and assigns it to the IsImporting field.
func (o *VolumeGroupInstance) SetIsImporting(v bool) {
	o.IsImporting = &v
}

// GetLocationHistory returns the LocationHistory field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetLocationHistory() []LocationHistoryInstance {
	if o == nil || IsNil(o.LocationHistory) {
		var ret []LocationHistoryInstance
		return ret
	}
	return o.LocationHistory
}

// GetLocationHistoryOk returns a tuple with the LocationHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetLocationHistoryOk() ([]LocationHistoryInstance, bool) {
	if o == nil || IsNil(o.LocationHistory) {
		return nil, false
	}
	return o.LocationHistory, true
}

// HasLocationHistory returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasLocationHistory() bool {
	if o != nil && !IsNil(o.LocationHistory) {
		return true
	}

	return false
}

// SetLocationHistory gets a reference to the given []LocationHistoryInstance and assigns it to the LocationHistory field.
func (o *VolumeGroupInstance) SetLocationHistory(v []LocationHistoryInstance) {
	o.LocationHistory = v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *VolumeGroupInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetProtectionPolicy returns the ProtectionPolicy field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetProtectionPolicy() PolicyInstance {
	if o == nil || IsNil(o.ProtectionPolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.ProtectionPolicy
}

// GetProtectionPolicyOk returns a tuple with the ProtectionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetProtectionPolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.ProtectionPolicy) {
		return nil, false
	}
	return o.ProtectionPolicy, true
}

// HasProtectionPolicy returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasProtectionPolicy() bool {
	if o != nil && !IsNil(o.ProtectionPolicy) {
		return true
	}

	return false
}

// SetProtectionPolicy gets a reference to the given PolicyInstance and assigns it to the ProtectionPolicy field.
func (o *VolumeGroupInstance) SetProtectionPolicy(v PolicyInstance) {
	o.ProtectionPolicy = &v
}

// GetQosPerformancePolicy returns the QosPerformancePolicy field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetQosPerformancePolicy() PolicyInstance {
	if o == nil || IsNil(o.QosPerformancePolicy) {
		var ret PolicyInstance
		return ret
	}
	return *o.QosPerformancePolicy
}

// GetQosPerformancePolicyOk returns a tuple with the QosPerformancePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetQosPerformancePolicyOk() (*PolicyInstance, bool) {
	if o == nil || IsNil(o.QosPerformancePolicy) {
		return nil, false
	}
	return o.QosPerformancePolicy, true
}

// HasQosPerformancePolicy returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasQosPerformancePolicy() bool {
	if o != nil && !IsNil(o.QosPerformancePolicy) {
		return true
	}

	return false
}

// SetQosPerformancePolicy gets a reference to the given PolicyInstance and assigns it to the QosPerformancePolicy field.
func (o *VolumeGroupInstance) SetQosPerformancePolicy(v PolicyInstance) {
	o.QosPerformancePolicy = &v
}

// GetMigrationSession returns the MigrationSession field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetMigrationSession() MigrationSessionInstance {
	if o == nil || IsNil(o.MigrationSession) {
		var ret MigrationSessionInstance
		return ret
	}
	return *o.MigrationSession
}

// GetMigrationSessionOk returns a tuple with the MigrationSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetMigrationSessionOk() (*MigrationSessionInstance, bool) {
	if o == nil || IsNil(o.MigrationSession) {
		return nil, false
	}
	return o.MigrationSession, true
}

// HasMigrationSession returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasMigrationSession() bool {
	if o != nil && !IsNil(o.MigrationSession) {
		return true
	}

	return false
}

// SetMigrationSession gets a reference to the given MigrationSessionInstance and assigns it to the MigrationSession field.
func (o *VolumeGroupInstance) SetMigrationSession(v MigrationSessionInstance) {
	o.MigrationSession = &v
}

// GetRemoteSnapshotSessions returns the RemoteSnapshotSessions field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetRemoteSnapshotSessions() []RemoteSnapshotSessionInstance {
	if o == nil || IsNil(o.RemoteSnapshotSessions) {
		var ret []RemoteSnapshotSessionInstance
		return ret
	}
	return o.RemoteSnapshotSessions
}

// GetRemoteSnapshotSessionsOk returns a tuple with the RemoteSnapshotSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetRemoteSnapshotSessionsOk() ([]RemoteSnapshotSessionInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshotSessions) {
		return nil, false
	}
	return o.RemoteSnapshotSessions, true
}

// HasRemoteSnapshotSessions returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasRemoteSnapshotSessions() bool {
	if o != nil && !IsNil(o.RemoteSnapshotSessions) {
		return true
	}

	return false
}

// SetRemoteSnapshotSessions gets a reference to the given []RemoteSnapshotSessionInstance and assigns it to the RemoteSnapshotSessions field.
func (o *VolumeGroupInstance) SetRemoteSnapshotSessions(v []RemoteSnapshotSessionInstance) {
	o.RemoteSnapshotSessions = v
}

// GetCurrentRemoteSnapshotSessions returns the CurrentRemoteSnapshotSessions field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetCurrentRemoteSnapshotSessions() []RemoteSnapshotSessionInstance {
	if o == nil || IsNil(o.CurrentRemoteSnapshotSessions) {
		var ret []RemoteSnapshotSessionInstance
		return ret
	}
	return o.CurrentRemoteSnapshotSessions
}

// GetCurrentRemoteSnapshotSessionsOk returns a tuple with the CurrentRemoteSnapshotSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetCurrentRemoteSnapshotSessionsOk() ([]RemoteSnapshotSessionInstance, bool) {
	if o == nil || IsNil(o.CurrentRemoteSnapshotSessions) {
		return nil, false
	}
	return o.CurrentRemoteSnapshotSessions, true
}

// HasCurrentRemoteSnapshotSessions returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasCurrentRemoteSnapshotSessions() bool {
	if o != nil && !IsNil(o.CurrentRemoteSnapshotSessions) {
		return true
	}

	return false
}

// SetCurrentRemoteSnapshotSessions gets a reference to the given []RemoteSnapshotSessionInstance and assigns it to the CurrentRemoteSnapshotSessions field.
func (o *VolumeGroupInstance) SetCurrentRemoteSnapshotSessions(v []RemoteSnapshotSessionInstance) {
	o.CurrentRemoteSnapshotSessions = v
}

// GetRemoteSnapshots returns the RemoteSnapshots field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetRemoteSnapshots() []RemoteSnapshotInstance {
	if o == nil || IsNil(o.RemoteSnapshots) {
		var ret []RemoteSnapshotInstance
		return ret
	}
	return o.RemoteSnapshots
}

// GetRemoteSnapshotsOk returns a tuple with the RemoteSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetRemoteSnapshotsOk() ([]RemoteSnapshotInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshots) {
		return nil, false
	}
	return o.RemoteSnapshots, true
}

// HasRemoteSnapshots returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasRemoteSnapshots() bool {
	if o != nil && !IsNil(o.RemoteSnapshots) {
		return true
	}

	return false
}

// SetRemoteSnapshots gets a reference to the given []RemoteSnapshotInstance and assigns it to the RemoteSnapshots field.
func (o *VolumeGroupInstance) SetRemoteSnapshots(v []RemoteSnapshotInstance) {
	o.RemoteSnapshots = v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetVolumes() []VolumeInstance {
	if o == nil || IsNil(o.Volumes) {
		var ret []VolumeInstance
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetVolumesOk() ([]VolumeInstance, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []VolumeInstance and assigns it to the Volumes field.
func (o *VolumeGroupInstance) SetVolumes(v []VolumeInstance) {
	o.Volumes = v
}

// GetReplicationSessions returns the ReplicationSessions field value if set, zero value otherwise.
func (o *VolumeGroupInstance) GetReplicationSessions() []ReplicationSessionInstance {
	if o == nil || IsNil(o.ReplicationSessions) {
		var ret []ReplicationSessionInstance
		return ret
	}
	return o.ReplicationSessions
}

// GetReplicationSessionsOk returns a tuple with the ReplicationSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupInstance) GetReplicationSessionsOk() ([]ReplicationSessionInstance, bool) {
	if o == nil || IsNil(o.ReplicationSessions) {
		return nil, false
	}
	return o.ReplicationSessions, true
}

// HasReplicationSessions returns a boolean if a field has been set.
func (o *VolumeGroupInstance) HasReplicationSessions() bool {
	if o != nil && !IsNil(o.ReplicationSessions) {
		return true
	}

	return false
}

// SetReplicationSessions gets a reference to the given []ReplicationSessionInstance and assigns it to the ReplicationSessions field.
func (o *VolumeGroupInstance) SetReplicationSessions(v []ReplicationSessionInstance) {
	o.ReplicationSessions = v
}

func (o VolumeGroupInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeGroupInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.IsProtectable) {
		toSerialize["is_protectable"] = o.IsProtectable
	}
	if !IsNil(o.ProtectionPolicyId) {
		toSerialize["protection_policy_id"] = o.ProtectionPolicyId
	}
	if !IsNil(o.QosPerformancePolicyId) {
		toSerialize["qos_performance_policy_id"] = o.QosPerformancePolicyId
	}
	if !IsNil(o.MigrationSessionId) {
		toSerialize["migration_session_id"] = o.MigrationSessionId
	}
	if !IsNil(o.IsWriteOrderConsistent) {
		toSerialize["is_write_order_consistent"] = o.IsWriteOrderConsistent
	}
	if !IsNil(o.PlacementRule) {
		toSerialize["placement_rule"] = o.PlacementRule
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsReplicationDestination) {
		toSerialize["is_replication_destination"] = o.IsReplicationDestination
	}
	if !IsNil(o.MetroReplicationSessionId) {
		toSerialize["metro_replication_session_id"] = o.MetroReplicationSessionId
	}
	if !IsNil(o.IsHostAccessAvailable) {
		toSerialize["is_host_access_available"] = o.IsHostAccessAvailable
	}
	if !IsNil(o.ProtectionData) {
		toSerialize["protection_data"] = o.ProtectionData
	}
	if !IsNil(o.IsImporting) {
		toSerialize["is_importing"] = o.IsImporting
	}
	if !IsNil(o.LocationHistory) {
		toSerialize["location_history"] = o.LocationHistory
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.ProtectionPolicy) {
		toSerialize["protection_policy"] = o.ProtectionPolicy
	}
	if !IsNil(o.QosPerformancePolicy) {
		toSerialize["qos_performance_policy"] = o.QosPerformancePolicy
	}
	if !IsNil(o.MigrationSession) {
		toSerialize["migration_session"] = o.MigrationSession
	}
	if !IsNil(o.RemoteSnapshotSessions) {
		toSerialize["remote_snapshot_sessions"] = o.RemoteSnapshotSessions
	}
	if !IsNil(o.CurrentRemoteSnapshotSessions) {
		toSerialize["current_remote_snapshot_sessions"] = o.CurrentRemoteSnapshotSessions
	}
	if !IsNil(o.RemoteSnapshots) {
		toSerialize["remote_snapshots"] = o.RemoteSnapshots
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	if !IsNil(o.ReplicationSessions) {
		toSerialize["replication_sessions"] = o.ReplicationSessions
	}
	return toSerialize, nil
}

type NullableVolumeGroupInstance struct {
	value *VolumeGroupInstance
	isSet bool
}

func (v NullableVolumeGroupInstance) Get() *VolumeGroupInstance {
	return v.value
}

func (v *NullableVolumeGroupInstance) Set(val *VolumeGroupInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeGroupInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeGroupInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeGroupInstance(val *VolumeGroupInstance) *NullableVolumeGroupInstance {
	return &NullableVolumeGroupInstance{value: val, isSet: true}
}

func (v NullableVolumeGroupInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeGroupInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


