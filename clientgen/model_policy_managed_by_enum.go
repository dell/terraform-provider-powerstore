/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// PolicyManagedByEnum Entity that owns and manages this instance. The possible values are:   * User - This instance is managed by the end user.   * Metro - This instance is managed by the peer system where the policy was assigned, in a Metro Cluster configuration.   * Replication - This destination instance is managed by the source system in a Replication configuration.   * VMware_vSphere - This instance is managed by the system through VMware vSphere/vCenter.  Was added in version 3.0.0.0.
type PolicyManagedByEnum string

// List of PolicyManagedByEnum
const (
	POLICYMANAGEDBYENUM_USER PolicyManagedByEnum = "User"
	POLICYMANAGEDBYENUM_METRO PolicyManagedByEnum = "Metro"
	POLICYMANAGEDBYENUM_REPLICATION PolicyManagedByEnum = "Replication"
	POLICYMANAGEDBYENUM_V_MWARE_V_SPHERE PolicyManagedByEnum = "VMware_vSphere"
)

// All allowed values of PolicyManagedByEnum enum
var AllowedPolicyManagedByEnumEnumValues = []PolicyManagedByEnum{
	"User",
	"Metro",
	"Replication",
	"VMware_vSphere",
}

func (v *PolicyManagedByEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyManagedByEnum(value)
	for _, existing := range AllowedPolicyManagedByEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyManagedByEnum", value)
}

// NewPolicyManagedByEnumFromValue returns a pointer to a valid PolicyManagedByEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyManagedByEnumFromValue(v string) (*PolicyManagedByEnum, error) {
	ev := PolicyManagedByEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyManagedByEnum: valid values are %v", v, AllowedPolicyManagedByEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyManagedByEnum) IsValid() bool {
	for _, existing := range AllowedPolicyManagedByEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyManagedByEnum value
func (v PolicyManagedByEnum) Ptr() *PolicyManagedByEnum {
	return &v
}

type NullablePolicyManagedByEnum struct {
	value *PolicyManagedByEnum
	isSet bool
}

func (v NullablePolicyManagedByEnum) Get() *PolicyManagedByEnum {
	return v.value
}

func (v *NullablePolicyManagedByEnum) Set(val *PolicyManagedByEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyManagedByEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyManagedByEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyManagedByEnum(val *PolicyManagedByEnum) *NullablePolicyManagedByEnum {
	return &NullablePolicyManagedByEnum{value: val, isSet: true}
}

func (v NullablePolicyManagedByEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyManagedByEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

