/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// RemoteSystemChapModeEnum Challenge Handshake Authentication Protocol (CHAP) status: * Disabled      * Single       - Enabled for initiator authentication. * Mutual       - Enabled for initiator and target authentication. 
type RemoteSystemChapModeEnum string

// List of RemoteSystemChapModeEnum
const (
	REMOTESYSTEMCHAPMODEENUM_DISABLED RemoteSystemChapModeEnum = "Disabled"
	REMOTESYSTEMCHAPMODEENUM_SINGLE RemoteSystemChapModeEnum = "Single"
	REMOTESYSTEMCHAPMODEENUM_MUTUAL RemoteSystemChapModeEnum = "Mutual"
)

// All allowed values of RemoteSystemChapModeEnum enum
var AllowedRemoteSystemChapModeEnumEnumValues = []RemoteSystemChapModeEnum{
	"Disabled",
	"Single",
	"Mutual",
}

func (v *RemoteSystemChapModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RemoteSystemChapModeEnum(value)
	for _, existing := range AllowedRemoteSystemChapModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RemoteSystemChapModeEnum", value)
}

// NewRemoteSystemChapModeEnumFromValue returns a pointer to a valid RemoteSystemChapModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRemoteSystemChapModeEnumFromValue(v string) (*RemoteSystemChapModeEnum, error) {
	ev := RemoteSystemChapModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RemoteSystemChapModeEnum: valid values are %v", v, AllowedRemoteSystemChapModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RemoteSystemChapModeEnum) IsValid() bool {
	for _, existing := range AllowedRemoteSystemChapModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RemoteSystemChapModeEnum value
func (v RemoteSystemChapModeEnum) Ptr() *RemoteSystemChapModeEnum {
	return &v
}

type NullableRemoteSystemChapModeEnum struct {
	value *RemoteSystemChapModeEnum
	isSet bool
}

func (v NullableRemoteSystemChapModeEnum) Get() *RemoteSystemChapModeEnum {
	return v.value
}

func (v *NullableRemoteSystemChapModeEnum) Set(val *RemoteSystemChapModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSystemChapModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSystemChapModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSystemChapModeEnum(val *RemoteSystemChapModeEnum) *NullableRemoteSystemChapModeEnum {
	return &NullableRemoteSystemChapModeEnum{value: val, isSet: true}
}

func (v NullableRemoteSystemChapModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSystemChapModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

