/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the HostInitiatorInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostInitiatorInstance{}

// HostInitiatorInstance Properties of a host initiator.
type HostInitiatorInstance struct {
	// IQN name aka address for iSCSI or WWN name for FC (SCSI) or NQN name for all NVMe-oF port types.
	PortName *string `json:"port_name,omitempty"`
	PortType *InitiatorProtocolTypeEnum `json:"port_type,omitempty"`
	// Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is single authentication. 
	ChapSingleUsername *string `json:"chap_single_username,omitempty"`
	// Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication. 
	ChapMutualUsername *string `json:"chap_mutual_username,omitempty"`
	// Array of active login sessions between an initiator and a target port.
	ActiveSessions []ActiveSessionInstance `json:"active_sessions,omitempty"`
	// Localized message string corresponding to port_type Was deprecated in version 3.0.0.0.
	PortTypeL10n *string `json:"port_type_l10n,omitempty"`
}

// NewHostInitiatorInstance instantiates a new HostInitiatorInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostInitiatorInstance() *HostInitiatorInstance {
	this := HostInitiatorInstance{}
	return &this
}

// NewHostInitiatorInstanceWithDefaults instantiates a new HostInitiatorInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostInitiatorInstanceWithDefaults() *HostInitiatorInstance {
	this := HostInitiatorInstance{}
	return &this
}

// GetPortName returns the PortName field value if set, zero value otherwise.
func (o *HostInitiatorInstance) GetPortName() string {
	if o == nil || IsNil(o.PortName) {
		var ret string
		return ret
	}
	return *o.PortName
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostInitiatorInstance) GetPortNameOk() (*string, bool) {
	if o == nil || IsNil(o.PortName) {
		return nil, false
	}
	return o.PortName, true
}

// HasPortName returns a boolean if a field has been set.
func (o *HostInitiatorInstance) HasPortName() bool {
	if o != nil && !IsNil(o.PortName) {
		return true
	}

	return false
}

// SetPortName gets a reference to the given string and assigns it to the PortName field.
func (o *HostInitiatorInstance) SetPortName(v string) {
	o.PortName = &v
}

// GetPortType returns the PortType field value if set, zero value otherwise.
func (o *HostInitiatorInstance) GetPortType() InitiatorProtocolTypeEnum {
	if o == nil || IsNil(o.PortType) {
		var ret InitiatorProtocolTypeEnum
		return ret
	}
	return *o.PortType
}

// GetPortTypeOk returns a tuple with the PortType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostInitiatorInstance) GetPortTypeOk() (*InitiatorProtocolTypeEnum, bool) {
	if o == nil || IsNil(o.PortType) {
		return nil, false
	}
	return o.PortType, true
}

// HasPortType returns a boolean if a field has been set.
func (o *HostInitiatorInstance) HasPortType() bool {
	if o != nil && !IsNil(o.PortType) {
		return true
	}

	return false
}

// SetPortType gets a reference to the given InitiatorProtocolTypeEnum and assigns it to the PortType field.
func (o *HostInitiatorInstance) SetPortType(v InitiatorProtocolTypeEnum) {
	o.PortType = &v
}

// GetChapSingleUsername returns the ChapSingleUsername field value if set, zero value otherwise.
func (o *HostInitiatorInstance) GetChapSingleUsername() string {
	if o == nil || IsNil(o.ChapSingleUsername) {
		var ret string
		return ret
	}
	return *o.ChapSingleUsername
}

// GetChapSingleUsernameOk returns a tuple with the ChapSingleUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostInitiatorInstance) GetChapSingleUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ChapSingleUsername) {
		return nil, false
	}
	return o.ChapSingleUsername, true
}

// HasChapSingleUsername returns a boolean if a field has been set.
func (o *HostInitiatorInstance) HasChapSingleUsername() bool {
	if o != nil && !IsNil(o.ChapSingleUsername) {
		return true
	}

	return false
}

// SetChapSingleUsername gets a reference to the given string and assigns it to the ChapSingleUsername field.
func (o *HostInitiatorInstance) SetChapSingleUsername(v string) {
	o.ChapSingleUsername = &v
}

// GetChapMutualUsername returns the ChapMutualUsername field value if set, zero value otherwise.
func (o *HostInitiatorInstance) GetChapMutualUsername() string {
	if o == nil || IsNil(o.ChapMutualUsername) {
		var ret string
		return ret
	}
	return *o.ChapMutualUsername
}

// GetChapMutualUsernameOk returns a tuple with the ChapMutualUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostInitiatorInstance) GetChapMutualUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ChapMutualUsername) {
		return nil, false
	}
	return o.ChapMutualUsername, true
}

// HasChapMutualUsername returns a boolean if a field has been set.
func (o *HostInitiatorInstance) HasChapMutualUsername() bool {
	if o != nil && !IsNil(o.ChapMutualUsername) {
		return true
	}

	return false
}

// SetChapMutualUsername gets a reference to the given string and assigns it to the ChapMutualUsername field.
func (o *HostInitiatorInstance) SetChapMutualUsername(v string) {
	o.ChapMutualUsername = &v
}

// GetActiveSessions returns the ActiveSessions field value if set, zero value otherwise.
func (o *HostInitiatorInstance) GetActiveSessions() []ActiveSessionInstance {
	if o == nil || IsNil(o.ActiveSessions) {
		var ret []ActiveSessionInstance
		return ret
	}
	return o.ActiveSessions
}

// GetActiveSessionsOk returns a tuple with the ActiveSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostInitiatorInstance) GetActiveSessionsOk() ([]ActiveSessionInstance, bool) {
	if o == nil || IsNil(o.ActiveSessions) {
		return nil, false
	}
	return o.ActiveSessions, true
}

// HasActiveSessions returns a boolean if a field has been set.
func (o *HostInitiatorInstance) HasActiveSessions() bool {
	if o != nil && !IsNil(o.ActiveSessions) {
		return true
	}

	return false
}

// SetActiveSessions gets a reference to the given []ActiveSessionInstance and assigns it to the ActiveSessions field.
func (o *HostInitiatorInstance) SetActiveSessions(v []ActiveSessionInstance) {
	o.ActiveSessions = v
}

// GetPortTypeL10n returns the PortTypeL10n field value if set, zero value otherwise.
func (o *HostInitiatorInstance) GetPortTypeL10n() string {
	if o == nil || IsNil(o.PortTypeL10n) {
		var ret string
		return ret
	}
	return *o.PortTypeL10n
}

// GetPortTypeL10nOk returns a tuple with the PortTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostInitiatorInstance) GetPortTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.PortTypeL10n) {
		return nil, false
	}
	return o.PortTypeL10n, true
}

// HasPortTypeL10n returns a boolean if a field has been set.
func (o *HostInitiatorInstance) HasPortTypeL10n() bool {
	if o != nil && !IsNil(o.PortTypeL10n) {
		return true
	}

	return false
}

// SetPortTypeL10n gets a reference to the given string and assigns it to the PortTypeL10n field.
func (o *HostInitiatorInstance) SetPortTypeL10n(v string) {
	o.PortTypeL10n = &v
}

func (o HostInitiatorInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostInitiatorInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PortName) {
		toSerialize["port_name"] = o.PortName
	}
	if !IsNil(o.PortType) {
		toSerialize["port_type"] = o.PortType
	}
	if !IsNil(o.ChapSingleUsername) {
		toSerialize["chap_single_username"] = o.ChapSingleUsername
	}
	if !IsNil(o.ChapMutualUsername) {
		toSerialize["chap_mutual_username"] = o.ChapMutualUsername
	}
	if !IsNil(o.ActiveSessions) {
		toSerialize["active_sessions"] = o.ActiveSessions
	}
	if !IsNil(o.PortTypeL10n) {
		toSerialize["port_type_l10n"] = o.PortTypeL10n
	}
	return toSerialize, nil
}

type NullableHostInitiatorInstance struct {
	value *HostInitiatorInstance
	isSet bool
}

func (v NullableHostInitiatorInstance) Get() *HostInitiatorInstance {
	return v.value
}

func (v *NullableHostInitiatorInstance) Set(val *HostInitiatorInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableHostInitiatorInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableHostInitiatorInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostInitiatorInstance(val *HostInitiatorInstance) *NullableHostInitiatorInstance {
	return &NullableHostInitiatorInstance{value: val, isSet: true}
}

func (v NullableHostInitiatorInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostInitiatorInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


