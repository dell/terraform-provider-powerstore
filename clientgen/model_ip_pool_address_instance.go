/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the IpPoolAddressInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpPoolAddressInstance{}

// IpPoolAddressInstance Properties of the IP pool address. This resource type has queriable associations from network, ip_port, appliance, node, nvme_discovered_cdc
type IpPoolAddressInstance struct {
	// Unique identifier of the IP address.
	Id *string `json:"id,omitempty"`
	// Name of the IP address.  This property supports case-insensitive filtering. Was added in version 2.0.0.0.
	Name *string `json:"name,omitempty"`
	// Unique identifier of the network to which the IP address belongs.
	NetworkId *string `json:"network_id,omitempty"`
	// Unique identifier of the port that uses this IP address to provide access to storage network services, such as iSCSI. This attribute can be set only for an IP address used by networks of type Storage.
	IpPortId *string `json:"ip_port_id,omitempty"`
	// Unique identifier of the appliance to which the IP address belongs.
	ApplianceId *string `json:"appliance_id,omitempty"`
	// Unique identifier of the cluster node to which the IP address belongs.
	NodeId *string `json:"node_id,omitempty"`
	// IP address value, in IPv4 or IPv6 format.
	Address *string `json:"address,omitempty"`
	// IP address purposes.
	Purposes []IpPurposeTypeEnum `json:"purposes,omitempty"`
	// Localized message array corresponding to purposes
	PurposesL10n []string `json:"purposes_l10n,omitempty"`
	// This is the inverse of the resource type nvme_discovered_cdc association.
	NvmeDiscoveredCdcs []NvmeDiscoveredCdcInstance `json:"nvme_discovered_cdcs,omitempty"`
	Network *NetworkInstance `json:"network,omitempty"`
	IpPort *IpPortInstance `json:"ip_port,omitempty"`
	Appliance *ApplianceInstance `json:"appliance,omitempty"`
	Node *NodeInstance `json:"node,omitempty"`
}

// NewIpPoolAddressInstance instantiates a new IpPoolAddressInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpPoolAddressInstance() *IpPoolAddressInstance {
	this := IpPoolAddressInstance{}
	return &this
}

// NewIpPoolAddressInstanceWithDefaults instantiates a new IpPoolAddressInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpPoolAddressInstanceWithDefaults() *IpPoolAddressInstance {
	this := IpPoolAddressInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpPoolAddressInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IpPoolAddressInstance) SetName(v string) {
	o.Name = &v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetNetworkId() string {
	if o == nil || IsNil(o.NetworkId) {
		var ret string
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetNetworkIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given string and assigns it to the NetworkId field.
func (o *IpPoolAddressInstance) SetNetworkId(v string) {
	o.NetworkId = &v
}

// GetIpPortId returns the IpPortId field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetIpPortId() string {
	if o == nil || IsNil(o.IpPortId) {
		var ret string
		return ret
	}
	return *o.IpPortId
}

// GetIpPortIdOk returns a tuple with the IpPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetIpPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.IpPortId) {
		return nil, false
	}
	return o.IpPortId, true
}

// HasIpPortId returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasIpPortId() bool {
	if o != nil && !IsNil(o.IpPortId) {
		return true
	}

	return false
}

// SetIpPortId gets a reference to the given string and assigns it to the IpPortId field.
func (o *IpPoolAddressInstance) SetIpPortId(v string) {
	o.IpPortId = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetApplianceId() string {
	if o == nil || IsNil(o.ApplianceId) {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *IpPoolAddressInstance) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *IpPoolAddressInstance) SetNodeId(v string) {
	o.NodeId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *IpPoolAddressInstance) SetAddress(v string) {
	o.Address = &v
}

// GetPurposes returns the Purposes field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetPurposes() []IpPurposeTypeEnum {
	if o == nil || IsNil(o.Purposes) {
		var ret []IpPurposeTypeEnum
		return ret
	}
	return o.Purposes
}

// GetPurposesOk returns a tuple with the Purposes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetPurposesOk() ([]IpPurposeTypeEnum, bool) {
	if o == nil || IsNil(o.Purposes) {
		return nil, false
	}
	return o.Purposes, true
}

// HasPurposes returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasPurposes() bool {
	if o != nil && !IsNil(o.Purposes) {
		return true
	}

	return false
}

// SetPurposes gets a reference to the given []IpPurposeTypeEnum and assigns it to the Purposes field.
func (o *IpPoolAddressInstance) SetPurposes(v []IpPurposeTypeEnum) {
	o.Purposes = v
}

// GetPurposesL10n returns the PurposesL10n field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetPurposesL10n() []string {
	if o == nil || IsNil(o.PurposesL10n) {
		var ret []string
		return ret
	}
	return o.PurposesL10n
}

// GetPurposesL10nOk returns a tuple with the PurposesL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetPurposesL10nOk() ([]string, bool) {
	if o == nil || IsNil(o.PurposesL10n) {
		return nil, false
	}
	return o.PurposesL10n, true
}

// HasPurposesL10n returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasPurposesL10n() bool {
	if o != nil && !IsNil(o.PurposesL10n) {
		return true
	}

	return false
}

// SetPurposesL10n gets a reference to the given []string and assigns it to the PurposesL10n field.
func (o *IpPoolAddressInstance) SetPurposesL10n(v []string) {
	o.PurposesL10n = v
}

// GetNvmeDiscoveredCdcs returns the NvmeDiscoveredCdcs field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetNvmeDiscoveredCdcs() []NvmeDiscoveredCdcInstance {
	if o == nil || IsNil(o.NvmeDiscoveredCdcs) {
		var ret []NvmeDiscoveredCdcInstance
		return ret
	}
	return o.NvmeDiscoveredCdcs
}

// GetNvmeDiscoveredCdcsOk returns a tuple with the NvmeDiscoveredCdcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetNvmeDiscoveredCdcsOk() ([]NvmeDiscoveredCdcInstance, bool) {
	if o == nil || IsNil(o.NvmeDiscoveredCdcs) {
		return nil, false
	}
	return o.NvmeDiscoveredCdcs, true
}

// HasNvmeDiscoveredCdcs returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasNvmeDiscoveredCdcs() bool {
	if o != nil && !IsNil(o.NvmeDiscoveredCdcs) {
		return true
	}

	return false
}

// SetNvmeDiscoveredCdcs gets a reference to the given []NvmeDiscoveredCdcInstance and assigns it to the NvmeDiscoveredCdcs field.
func (o *IpPoolAddressInstance) SetNvmeDiscoveredCdcs(v []NvmeDiscoveredCdcInstance) {
	o.NvmeDiscoveredCdcs = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetNetwork() NetworkInstance {
	if o == nil || IsNil(o.Network) {
		var ret NetworkInstance
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetNetworkOk() (*NetworkInstance, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given NetworkInstance and assigns it to the Network field.
func (o *IpPoolAddressInstance) SetNetwork(v NetworkInstance) {
	o.Network = &v
}

// GetIpPort returns the IpPort field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetIpPort() IpPortInstance {
	if o == nil || IsNil(o.IpPort) {
		var ret IpPortInstance
		return ret
	}
	return *o.IpPort
}

// GetIpPortOk returns a tuple with the IpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetIpPortOk() (*IpPortInstance, bool) {
	if o == nil || IsNil(o.IpPort) {
		return nil, false
	}
	return o.IpPort, true
}

// HasIpPort returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasIpPort() bool {
	if o != nil && !IsNil(o.IpPort) {
		return true
	}

	return false
}

// SetIpPort gets a reference to the given IpPortInstance and assigns it to the IpPort field.
func (o *IpPoolAddressInstance) SetIpPort(v IpPortInstance) {
	o.IpPort = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetAppliance() ApplianceInstance {
	if o == nil || IsNil(o.Appliance) {
		var ret ApplianceInstance
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetApplianceOk() (*ApplianceInstance, bool) {
	if o == nil || IsNil(o.Appliance) {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasAppliance() bool {
	if o != nil && !IsNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given ApplianceInstance and assigns it to the Appliance field.
func (o *IpPoolAddressInstance) SetAppliance(v ApplianceInstance) {
	o.Appliance = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *IpPoolAddressInstance) GetNode() NodeInstance {
	if o == nil || IsNil(o.Node) {
		var ret NodeInstance
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPoolAddressInstance) GetNodeOk() (*NodeInstance, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *IpPoolAddressInstance) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given NodeInstance and assigns it to the Node field.
func (o *IpPoolAddressInstance) SetNode(v NodeInstance) {
	o.Node = &v
}

func (o IpPoolAddressInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpPoolAddressInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkId) {
		toSerialize["network_id"] = o.NetworkId
	}
	if !IsNil(o.IpPortId) {
		toSerialize["ip_port_id"] = o.IpPortId
	}
	if !IsNil(o.ApplianceId) {
		toSerialize["appliance_id"] = o.ApplianceId
	}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Purposes) {
		toSerialize["purposes"] = o.Purposes
	}
	if !IsNil(o.PurposesL10n) {
		toSerialize["purposes_l10n"] = o.PurposesL10n
	}
	if !IsNil(o.NvmeDiscoveredCdcs) {
		toSerialize["nvme_discovered_cdcs"] = o.NvmeDiscoveredCdcs
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.IpPort) {
		toSerialize["ip_port"] = o.IpPort
	}
	if !IsNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	return toSerialize, nil
}

type NullableIpPoolAddressInstance struct {
	value *IpPoolAddressInstance
	isSet bool
}

func (v NullableIpPoolAddressInstance) Get() *IpPoolAddressInstance {
	return v.value
}

func (v *NullableIpPoolAddressInstance) Set(val *IpPoolAddressInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableIpPoolAddressInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableIpPoolAddressInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpPoolAddressInstance(val *IpPoolAddressInstance) *NullableIpPoolAddressInstance {
	return &NullableIpPoolAddressInstance{value: val, isSet: true}
}

func (v NullableIpPoolAddressInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpPoolAddressInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


