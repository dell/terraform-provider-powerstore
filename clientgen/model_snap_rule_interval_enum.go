/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// SnapRuleIntervalEnum Interval between snapshots taken by a snapshot rule. Values are: * Five_Minutes * Fifteen_Minutes * Thirty_Minutes * One_Hour * Two_Hours * Three_Hours * Four_Hours * Six_Hours * Eight_Hours * Twelve_Hours * One_Day 
type SnapRuleIntervalEnum string

// List of SnapRuleIntervalEnum
const (
	SNAPRULEINTERVALENUM_FIVE_MINUTES SnapRuleIntervalEnum = "Five_Minutes"
	SNAPRULEINTERVALENUM_FIFTEEN_MINUTES SnapRuleIntervalEnum = "Fifteen_Minutes"
	SNAPRULEINTERVALENUM_THIRTY_MINUTES SnapRuleIntervalEnum = "Thirty_Minutes"
	SNAPRULEINTERVALENUM_ONE_HOUR SnapRuleIntervalEnum = "One_Hour"
	SNAPRULEINTERVALENUM_TWO_HOURS SnapRuleIntervalEnum = "Two_Hours"
	SNAPRULEINTERVALENUM_THREE_HOURS SnapRuleIntervalEnum = "Three_Hours"
	SNAPRULEINTERVALENUM_FOUR_HOURS SnapRuleIntervalEnum = "Four_Hours"
	SNAPRULEINTERVALENUM_SIX_HOURS SnapRuleIntervalEnum = "Six_Hours"
	SNAPRULEINTERVALENUM_EIGHT_HOURS SnapRuleIntervalEnum = "Eight_Hours"
	SNAPRULEINTERVALENUM_TWELVE_HOURS SnapRuleIntervalEnum = "Twelve_Hours"
	SNAPRULEINTERVALENUM_ONE_DAY SnapRuleIntervalEnum = "One_Day"
)

// All allowed values of SnapRuleIntervalEnum enum
var AllowedSnapRuleIntervalEnumEnumValues = []SnapRuleIntervalEnum{
	"Five_Minutes",
	"Fifteen_Minutes",
	"Thirty_Minutes",
	"One_Hour",
	"Two_Hours",
	"Three_Hours",
	"Four_Hours",
	"Six_Hours",
	"Eight_Hours",
	"Twelve_Hours",
	"One_Day",
}

func (v *SnapRuleIntervalEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SnapRuleIntervalEnum(value)
	for _, existing := range AllowedSnapRuleIntervalEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SnapRuleIntervalEnum", value)
}

// NewSnapRuleIntervalEnumFromValue returns a pointer to a valid SnapRuleIntervalEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSnapRuleIntervalEnumFromValue(v string) (*SnapRuleIntervalEnum, error) {
	ev := SnapRuleIntervalEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SnapRuleIntervalEnum: valid values are %v", v, AllowedSnapRuleIntervalEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SnapRuleIntervalEnum) IsValid() bool {
	for _, existing := range AllowedSnapRuleIntervalEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SnapRuleIntervalEnum value
func (v SnapRuleIntervalEnum) Ptr() *SnapRuleIntervalEnum {
	return &v
}

type NullableSnapRuleIntervalEnum struct {
	value *SnapRuleIntervalEnum
	isSet bool
}

func (v NullableSnapRuleIntervalEnum) Get() *SnapRuleIntervalEnum {
	return v.value
}

func (v *NullableSnapRuleIntervalEnum) Set(val *SnapRuleIntervalEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapRuleIntervalEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapRuleIntervalEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapRuleIntervalEnum(val *SnapRuleIntervalEnum) *NullableSnapRuleIntervalEnum {
	return &NullableSnapRuleIntervalEnum{value: val, isSet: true}
}

func (v NullableSnapRuleIntervalEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapRuleIntervalEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

