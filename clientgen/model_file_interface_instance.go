/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileInterfaceInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileInterfaceInstance{}

// FileInterfaceInstance This resource type has queriable associations from nas_server, ip_port, file_interface_route
type FileInterfaceInstance struct {
	// Unique identifier of the file interface.
	Id *string `json:"id,omitempty"`
	// Unique identifier of the NAS server.
	NasServerId *string `json:"nas_server_id,omitempty"`
	// IP address of the network interface. IPv4 and IPv6 are supported.
	IpAddress *string `json:"ip_address,omitempty"`
	// Prefix length for the interface. IPv4 and IPv6 are supported.
	PrefixLength *int32 `json:"prefix_length,omitempty"`
	// Gateway address for the network interface. IPv4 and IPv6 are supported.
	Gateway *string `json:"gateway,omitempty"`
	// Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.
	VlanId *int32 `json:"vlan_id,omitempty"`
	// Name of the network interface.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	Role *FileInterfaceRoleEnum `json:"role,omitempty"`
	// Indicates whether the network interface is disabled.
	IsDisabled *bool `json:"is_disabled,omitempty"`
	// Used in replication context when the user wants to override the settings on the destination. Was added in version 3.0.0.0.
	IsDestinationOverrideEnabled *bool `json:"is_destination_override_enabled,omitempty"`
	// Unique Identifier of the IP Port that is associated with the file interface. Was added in version 3.0.0.0.
	IpPortId *string `json:"ip_port_id,omitempty"`
	SourceParameters *FileInterfaceSourceParameters `json:"source_parameters,omitempty"`
	// True when the associated nas_server has been created as a clone with the is_dr_test option set to true. Disaster Recovery Testing provides following functionalities   1. The ability to create a DR Test (DRT) enabled nas_server by cloning a replicated nas_server on destination PowerStore.   2. The ability to create the necessary isolated networking environment on the destination PowerStore.   3. With isolated network, DRT-enabled nas_server can operate with same IP address(es) as the the production      nas_server on the source PowerStore.   4. DRT-enabled nas_servers can run without IP address conflicts even if failover/failback of the replication occurs.   5. If isolated network is configured, do not configure production nas_servers with isolated network interfaces      on destination PowerStore.  Was added in version 3.6.0.0.
	IsDrTest *bool `json:"is_dr_test,omitempty"`
	// Localized message string corresponding to role
	RoleL10n *string `json:"role_l10n,omitempty"`
	NasServer *NasServerInstance `json:"nas_server,omitempty"`
	IpPort *IpPortInstance `json:"ip_port,omitempty"`
	// This is the inverse of the resource type file_interface_route association.
	FileInterfaceRoutes []FileInterfaceRouteInstance `json:"file_interface_routes,omitempty"`
}

// NewFileInterfaceInstance instantiates a new FileInterfaceInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileInterfaceInstance() *FileInterfaceInstance {
	this := FileInterfaceInstance{}
	var vlanId int32 = 0
	this.VlanId = &vlanId
	var isDisabled bool = false
	this.IsDisabled = &isDisabled
	var isDestinationOverrideEnabled bool = false
	this.IsDestinationOverrideEnabled = &isDestinationOverrideEnabled
	return &this
}

// NewFileInterfaceInstanceWithDefaults instantiates a new FileInterfaceInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileInterfaceInstanceWithDefaults() *FileInterfaceInstance {
	this := FileInterfaceInstance{}
	var vlanId int32 = 0
	this.VlanId = &vlanId
	var isDisabled bool = false
	this.IsDisabled = &isDisabled
	var isDestinationOverrideEnabled bool = false
	this.IsDestinationOverrideEnabled = &isDestinationOverrideEnabled
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileInterfaceInstance) SetId(v string) {
	o.Id = &v
}

// GetNasServerId returns the NasServerId field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetNasServerId() string {
	if o == nil || IsNil(o.NasServerId) {
		var ret string
		return ret
	}
	return *o.NasServerId
}

// GetNasServerIdOk returns a tuple with the NasServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetNasServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NasServerId) {
		return nil, false
	}
	return o.NasServerId, true
}

// HasNasServerId returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasNasServerId() bool {
	if o != nil && !IsNil(o.NasServerId) {
		return true
	}

	return false
}

// SetNasServerId gets a reference to the given string and assigns it to the NasServerId field.
func (o *FileInterfaceInstance) SetNasServerId(v string) {
	o.NasServerId = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *FileInterfaceInstance) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetPrefixLength returns the PrefixLength field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetPrefixLength() int32 {
	if o == nil || IsNil(o.PrefixLength) {
		var ret int32
		return ret
	}
	return *o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetPrefixLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.PrefixLength) {
		return nil, false
	}
	return o.PrefixLength, true
}

// HasPrefixLength returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasPrefixLength() bool {
	if o != nil && !IsNil(o.PrefixLength) {
		return true
	}

	return false
}

// SetPrefixLength gets a reference to the given int32 and assigns it to the PrefixLength field.
func (o *FileInterfaceInstance) SetPrefixLength(v int32) {
	o.PrefixLength = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *FileInterfaceInstance) SetGateway(v string) {
	o.Gateway = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *FileInterfaceInstance) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileInterfaceInstance) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetRole() FileInterfaceRoleEnum {
	if o == nil || IsNil(o.Role) {
		var ret FileInterfaceRoleEnum
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetRoleOk() (*FileInterfaceRoleEnum, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given FileInterfaceRoleEnum and assigns it to the Role field.
func (o *FileInterfaceInstance) SetRole(v FileInterfaceRoleEnum) {
	o.Role = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *FileInterfaceInstance) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetIsDestinationOverrideEnabled returns the IsDestinationOverrideEnabled field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetIsDestinationOverrideEnabled() bool {
	if o == nil || IsNil(o.IsDestinationOverrideEnabled) {
		var ret bool
		return ret
	}
	return *o.IsDestinationOverrideEnabled
}

// GetIsDestinationOverrideEnabledOk returns a tuple with the IsDestinationOverrideEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetIsDestinationOverrideEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDestinationOverrideEnabled) {
		return nil, false
	}
	return o.IsDestinationOverrideEnabled, true
}

// HasIsDestinationOverrideEnabled returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasIsDestinationOverrideEnabled() bool {
	if o != nil && !IsNil(o.IsDestinationOverrideEnabled) {
		return true
	}

	return false
}

// SetIsDestinationOverrideEnabled gets a reference to the given bool and assigns it to the IsDestinationOverrideEnabled field.
func (o *FileInterfaceInstance) SetIsDestinationOverrideEnabled(v bool) {
	o.IsDestinationOverrideEnabled = &v
}

// GetIpPortId returns the IpPortId field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetIpPortId() string {
	if o == nil || IsNil(o.IpPortId) {
		var ret string
		return ret
	}
	return *o.IpPortId
}

// GetIpPortIdOk returns a tuple with the IpPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetIpPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.IpPortId) {
		return nil, false
	}
	return o.IpPortId, true
}

// HasIpPortId returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasIpPortId() bool {
	if o != nil && !IsNil(o.IpPortId) {
		return true
	}

	return false
}

// SetIpPortId gets a reference to the given string and assigns it to the IpPortId field.
func (o *FileInterfaceInstance) SetIpPortId(v string) {
	o.IpPortId = &v
}

// GetSourceParameters returns the SourceParameters field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetSourceParameters() FileInterfaceSourceParameters {
	if o == nil || IsNil(o.SourceParameters) {
		var ret FileInterfaceSourceParameters
		return ret
	}
	return *o.SourceParameters
}

// GetSourceParametersOk returns a tuple with the SourceParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetSourceParametersOk() (*FileInterfaceSourceParameters, bool) {
	if o == nil || IsNil(o.SourceParameters) {
		return nil, false
	}
	return o.SourceParameters, true
}

// HasSourceParameters returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasSourceParameters() bool {
	if o != nil && !IsNil(o.SourceParameters) {
		return true
	}

	return false
}

// SetSourceParameters gets a reference to the given FileInterfaceSourceParameters and assigns it to the SourceParameters field.
func (o *FileInterfaceInstance) SetSourceParameters(v FileInterfaceSourceParameters) {
	o.SourceParameters = &v
}

// GetIsDrTest returns the IsDrTest field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetIsDrTest() bool {
	if o == nil || IsNil(o.IsDrTest) {
		var ret bool
		return ret
	}
	return *o.IsDrTest
}

// GetIsDrTestOk returns a tuple with the IsDrTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetIsDrTestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDrTest) {
		return nil, false
	}
	return o.IsDrTest, true
}

// HasIsDrTest returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasIsDrTest() bool {
	if o != nil && !IsNil(o.IsDrTest) {
		return true
	}

	return false
}

// SetIsDrTest gets a reference to the given bool and assigns it to the IsDrTest field.
func (o *FileInterfaceInstance) SetIsDrTest(v bool) {
	o.IsDrTest = &v
}

// GetRoleL10n returns the RoleL10n field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetRoleL10n() string {
	if o == nil || IsNil(o.RoleL10n) {
		var ret string
		return ret
	}
	return *o.RoleL10n
}

// GetRoleL10nOk returns a tuple with the RoleL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetRoleL10nOk() (*string, bool) {
	if o == nil || IsNil(o.RoleL10n) {
		return nil, false
	}
	return o.RoleL10n, true
}

// HasRoleL10n returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasRoleL10n() bool {
	if o != nil && !IsNil(o.RoleL10n) {
		return true
	}

	return false
}

// SetRoleL10n gets a reference to the given string and assigns it to the RoleL10n field.
func (o *FileInterfaceInstance) SetRoleL10n(v string) {
	o.RoleL10n = &v
}

// GetNasServer returns the NasServer field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetNasServer() NasServerInstance {
	if o == nil || IsNil(o.NasServer) {
		var ret NasServerInstance
		return ret
	}
	return *o.NasServer
}

// GetNasServerOk returns a tuple with the NasServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetNasServerOk() (*NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServer) {
		return nil, false
	}
	return o.NasServer, true
}

// HasNasServer returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasNasServer() bool {
	if o != nil && !IsNil(o.NasServer) {
		return true
	}

	return false
}

// SetNasServer gets a reference to the given NasServerInstance and assigns it to the NasServer field.
func (o *FileInterfaceInstance) SetNasServer(v NasServerInstance) {
	o.NasServer = &v
}

// GetIpPort returns the IpPort field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetIpPort() IpPortInstance {
	if o == nil || IsNil(o.IpPort) {
		var ret IpPortInstance
		return ret
	}
	return *o.IpPort
}

// GetIpPortOk returns a tuple with the IpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetIpPortOk() (*IpPortInstance, bool) {
	if o == nil || IsNil(o.IpPort) {
		return nil, false
	}
	return o.IpPort, true
}

// HasIpPort returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasIpPort() bool {
	if o != nil && !IsNil(o.IpPort) {
		return true
	}

	return false
}

// SetIpPort gets a reference to the given IpPortInstance and assigns it to the IpPort field.
func (o *FileInterfaceInstance) SetIpPort(v IpPortInstance) {
	o.IpPort = &v
}

// GetFileInterfaceRoutes returns the FileInterfaceRoutes field value if set, zero value otherwise.
func (o *FileInterfaceInstance) GetFileInterfaceRoutes() []FileInterfaceRouteInstance {
	if o == nil || IsNil(o.FileInterfaceRoutes) {
		var ret []FileInterfaceRouteInstance
		return ret
	}
	return o.FileInterfaceRoutes
}

// GetFileInterfaceRoutesOk returns a tuple with the FileInterfaceRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInterfaceInstance) GetFileInterfaceRoutesOk() ([]FileInterfaceRouteInstance, bool) {
	if o == nil || IsNil(o.FileInterfaceRoutes) {
		return nil, false
	}
	return o.FileInterfaceRoutes, true
}

// HasFileInterfaceRoutes returns a boolean if a field has been set.
func (o *FileInterfaceInstance) HasFileInterfaceRoutes() bool {
	if o != nil && !IsNil(o.FileInterfaceRoutes) {
		return true
	}

	return false
}

// SetFileInterfaceRoutes gets a reference to the given []FileInterfaceRouteInstance and assigns it to the FileInterfaceRoutes field.
func (o *FileInterfaceInstance) SetFileInterfaceRoutes(v []FileInterfaceRouteInstance) {
	o.FileInterfaceRoutes = v
}

func (o FileInterfaceInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileInterfaceInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NasServerId) {
		toSerialize["nas_server_id"] = o.NasServerId
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.PrefixLength) {
		toSerialize["prefix_length"] = o.PrefixLength
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["is_disabled"] = o.IsDisabled
	}
	if !IsNil(o.IsDestinationOverrideEnabled) {
		toSerialize["is_destination_override_enabled"] = o.IsDestinationOverrideEnabled
	}
	if !IsNil(o.IpPortId) {
		toSerialize["ip_port_id"] = o.IpPortId
	}
	if !IsNil(o.SourceParameters) {
		toSerialize["source_parameters"] = o.SourceParameters
	}
	if !IsNil(o.IsDrTest) {
		toSerialize["is_dr_test"] = o.IsDrTest
	}
	if !IsNil(o.RoleL10n) {
		toSerialize["role_l10n"] = o.RoleL10n
	}
	if !IsNil(o.NasServer) {
		toSerialize["nas_server"] = o.NasServer
	}
	if !IsNil(o.IpPort) {
		toSerialize["ip_port"] = o.IpPort
	}
	if !IsNil(o.FileInterfaceRoutes) {
		toSerialize["file_interface_routes"] = o.FileInterfaceRoutes
	}
	return toSerialize, nil
}

type NullableFileInterfaceInstance struct {
	value *FileInterfaceInstance
	isSet bool
}

func (v NullableFileInterfaceInstance) Get() *FileInterfaceInstance {
	return v.value
}

func (v *NullableFileInterfaceInstance) Set(val *FileInterfaceInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileInterfaceInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileInterfaceInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileInterfaceInstance(val *FileInterfaceInstance) *NullableFileInterfaceInstance {
	return &NullableFileInterfaceInstance{value: val, isSet: true}
}

func (v NullableFileInterfaceInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileInterfaceInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


