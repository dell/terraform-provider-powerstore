/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the InitiatorInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitiatorInstance{}

// InitiatorInstance  Was added in version 3.0.0.0. This resource type has queriable association from host
type InitiatorInstance struct {
	// Unique id of the initiator.
	Id *string `json:"id,omitempty"`
	// Unique id of a host instance.
	HostId *string `json:"host_id,omitempty"`
	// The port name, one of: IQN, WWN, or NQN. 
	PortName *string `json:"port_name,omitempty"`
	PortType *InitiatorProtocolTypeEnum `json:"port_type,omitempty"`
	// Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication. 
	ChapSingleUsername *string `json:"chap_single_username,omitempty"`
	// Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication. 
	ChapMutualUsername *string `json:"chap_mutual_username,omitempty"`
	// Array of active login sessions between an initiator and a target port.  Filtering on the fields of this embedded resource is not supported.
	ActiveSessions []ActiveSessionInstance `json:"active_sessions,omitempty"`
	Host *HostInstance `json:"host,omitempty"`
}

// NewInitiatorInstance instantiates a new InitiatorInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitiatorInstance() *InitiatorInstance {
	this := InitiatorInstance{}
	return &this
}

// NewInitiatorInstanceWithDefaults instantiates a new InitiatorInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitiatorInstanceWithDefaults() *InitiatorInstance {
	this := InitiatorInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InitiatorInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InitiatorInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InitiatorInstance) SetId(v string) {
	o.Id = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *InitiatorInstance) GetHostId() string {
	if o == nil || IsNil(o.HostId) {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetHostIdOk() (*string, bool) {
	if o == nil || IsNil(o.HostId) {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *InitiatorInstance) HasHostId() bool {
	if o != nil && !IsNil(o.HostId) {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *InitiatorInstance) SetHostId(v string) {
	o.HostId = &v
}

// GetPortName returns the PortName field value if set, zero value otherwise.
func (o *InitiatorInstance) GetPortName() string {
	if o == nil || IsNil(o.PortName) {
		var ret string
		return ret
	}
	return *o.PortName
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetPortNameOk() (*string, bool) {
	if o == nil || IsNil(o.PortName) {
		return nil, false
	}
	return o.PortName, true
}

// HasPortName returns a boolean if a field has been set.
func (o *InitiatorInstance) HasPortName() bool {
	if o != nil && !IsNil(o.PortName) {
		return true
	}

	return false
}

// SetPortName gets a reference to the given string and assigns it to the PortName field.
func (o *InitiatorInstance) SetPortName(v string) {
	o.PortName = &v
}

// GetPortType returns the PortType field value if set, zero value otherwise.
func (o *InitiatorInstance) GetPortType() InitiatorProtocolTypeEnum {
	if o == nil || IsNil(o.PortType) {
		var ret InitiatorProtocolTypeEnum
		return ret
	}
	return *o.PortType
}

// GetPortTypeOk returns a tuple with the PortType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetPortTypeOk() (*InitiatorProtocolTypeEnum, bool) {
	if o == nil || IsNil(o.PortType) {
		return nil, false
	}
	return o.PortType, true
}

// HasPortType returns a boolean if a field has been set.
func (o *InitiatorInstance) HasPortType() bool {
	if o != nil && !IsNil(o.PortType) {
		return true
	}

	return false
}

// SetPortType gets a reference to the given InitiatorProtocolTypeEnum and assigns it to the PortType field.
func (o *InitiatorInstance) SetPortType(v InitiatorProtocolTypeEnum) {
	o.PortType = &v
}

// GetChapSingleUsername returns the ChapSingleUsername field value if set, zero value otherwise.
func (o *InitiatorInstance) GetChapSingleUsername() string {
	if o == nil || IsNil(o.ChapSingleUsername) {
		var ret string
		return ret
	}
	return *o.ChapSingleUsername
}

// GetChapSingleUsernameOk returns a tuple with the ChapSingleUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetChapSingleUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ChapSingleUsername) {
		return nil, false
	}
	return o.ChapSingleUsername, true
}

// HasChapSingleUsername returns a boolean if a field has been set.
func (o *InitiatorInstance) HasChapSingleUsername() bool {
	if o != nil && !IsNil(o.ChapSingleUsername) {
		return true
	}

	return false
}

// SetChapSingleUsername gets a reference to the given string and assigns it to the ChapSingleUsername field.
func (o *InitiatorInstance) SetChapSingleUsername(v string) {
	o.ChapSingleUsername = &v
}

// GetChapMutualUsername returns the ChapMutualUsername field value if set, zero value otherwise.
func (o *InitiatorInstance) GetChapMutualUsername() string {
	if o == nil || IsNil(o.ChapMutualUsername) {
		var ret string
		return ret
	}
	return *o.ChapMutualUsername
}

// GetChapMutualUsernameOk returns a tuple with the ChapMutualUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetChapMutualUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ChapMutualUsername) {
		return nil, false
	}
	return o.ChapMutualUsername, true
}

// HasChapMutualUsername returns a boolean if a field has been set.
func (o *InitiatorInstance) HasChapMutualUsername() bool {
	if o != nil && !IsNil(o.ChapMutualUsername) {
		return true
	}

	return false
}

// SetChapMutualUsername gets a reference to the given string and assigns it to the ChapMutualUsername field.
func (o *InitiatorInstance) SetChapMutualUsername(v string) {
	o.ChapMutualUsername = &v
}

// GetActiveSessions returns the ActiveSessions field value if set, zero value otherwise.
func (o *InitiatorInstance) GetActiveSessions() []ActiveSessionInstance {
	if o == nil || IsNil(o.ActiveSessions) {
		var ret []ActiveSessionInstance
		return ret
	}
	return o.ActiveSessions
}

// GetActiveSessionsOk returns a tuple with the ActiveSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetActiveSessionsOk() ([]ActiveSessionInstance, bool) {
	if o == nil || IsNil(o.ActiveSessions) {
		return nil, false
	}
	return o.ActiveSessions, true
}

// HasActiveSessions returns a boolean if a field has been set.
func (o *InitiatorInstance) HasActiveSessions() bool {
	if o != nil && !IsNil(o.ActiveSessions) {
		return true
	}

	return false
}

// SetActiveSessions gets a reference to the given []ActiveSessionInstance and assigns it to the ActiveSessions field.
func (o *InitiatorInstance) SetActiveSessions(v []ActiveSessionInstance) {
	o.ActiveSessions = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *InitiatorInstance) GetHost() HostInstance {
	if o == nil || IsNil(o.Host) {
		var ret HostInstance
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorInstance) GetHostOk() (*HostInstance, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *InitiatorInstance) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostInstance and assigns it to the Host field.
func (o *InitiatorInstance) SetHost(v HostInstance) {
	o.Host = &v
}

func (o InitiatorInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitiatorInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.HostId) {
		toSerialize["host_id"] = o.HostId
	}
	if !IsNil(o.PortName) {
		toSerialize["port_name"] = o.PortName
	}
	if !IsNil(o.PortType) {
		toSerialize["port_type"] = o.PortType
	}
	if !IsNil(o.ChapSingleUsername) {
		toSerialize["chap_single_username"] = o.ChapSingleUsername
	}
	if !IsNil(o.ChapMutualUsername) {
		toSerialize["chap_mutual_username"] = o.ChapMutualUsername
	}
	if !IsNil(o.ActiveSessions) {
		toSerialize["active_sessions"] = o.ActiveSessions
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	return toSerialize, nil
}

type NullableInitiatorInstance struct {
	value *InitiatorInstance
	isSet bool
}

func (v NullableInitiatorInstance) Get() *InitiatorInstance {
	return v.value
}

func (v *NullableInitiatorInstance) Set(val *InitiatorInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableInitiatorInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInitiatorInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitiatorInstance(val *InitiatorInstance) *NullableInitiatorInstance {
	return &NullableInitiatorInstance{value: val, isSet: true}
}

func (v NullableInitiatorInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitiatorInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


