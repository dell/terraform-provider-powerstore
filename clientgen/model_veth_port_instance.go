/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the VethPortInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VethPortInstance{}

// VethPortInstance Properties of a virtual Ethernet port. Values was added in 2.0.0.0: partner_id. This resource type has queriable associations from veth_port, appliance, node, ip_port
type VethPortInstance struct {
	// Unique identifier of the virtual Ethernet port instance.
	Id *string `json:"id,omitempty"`
	// Identifier of the virtual Ethernet port with the same logical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance. Was added in version 2.0.0.0.
	PartnerId *string `json:"partner_id,omitempty"`
	// Unique identifier of the appliance containing the virtual Ethernet port.
	ApplianceId *string `json:"appliance_id,omitempty"`
	// Unique identifier of the node containing the virtual Ethernet port.
	NodeId *string `json:"node_id,omitempty"`
	// Virtual Ethernet port name.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Virtual Ethernet port MAC address.
	MacAddress *string `json:"mac_address,omitempty"`
	// Indicates whether the virtual Ethernet port's link is up. Values are: * true - Link is up. * false - Link is down. 
	IsLinkUp *bool `json:"is_link_up,omitempty"`
	// Virtual Ethernet port transmission speed, in bits/sec (bps).
	CurrentSpeed *int64 `json:"current_speed,omitempty"`
	// Maximum Transmission Unit (MTU) packet size that the virtual Ethernet port can transmit.
	CurrentMtu *int32 `json:"current_mtu,omitempty"`
	// Name of the virtual switch that holds the virtual Ethernet port. Only applies to PowerStoreX deployments. 
	VswitchName *string `json:"vswitch_name,omitempty"`
	// Name of the virtual switch port group to which the virtual Ethernet port is assigned. Only applies to PowerStoreX deployments. 
	VswitchPortGroupName *string `json:"vswitch_port_group_name,omitempty"`
	// Unique identifier of the virtual switch port associated with the virtual Ethernet port. Only applies to PowerStoreX deployments. 
	VswitchPortId *int32 `json:"vswitch_port_id,omitempty"`
	// Name of the virtual switch port associated with the virtual Ethernet port. Only applies to PowerStoreX deployments.   This property supports case-insensitive filtering.
	VswitchPortName *string `json:"vswitch_port_name,omitempty"`
	// This is the inverse of the resource type ip_port association.
	IpPorts []IpPortInstance `json:"ip_ports,omitempty"`
	Partner *VethPortInstance `json:"partner,omitempty"`
	Appliance *ApplianceInstance `json:"appliance,omitempty"`
	Node *NodeInstance `json:"node,omitempty"`
}

// NewVethPortInstance instantiates a new VethPortInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVethPortInstance() *VethPortInstance {
	this := VethPortInstance{}
	return &this
}

// NewVethPortInstanceWithDefaults instantiates a new VethPortInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVethPortInstanceWithDefaults() *VethPortInstance {
	this := VethPortInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VethPortInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VethPortInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VethPortInstance) SetId(v string) {
	o.Id = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *VethPortInstance) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *VethPortInstance) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *VethPortInstance) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *VethPortInstance) GetApplianceId() string {
	if o == nil || IsNil(o.ApplianceId) {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *VethPortInstance) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *VethPortInstance) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *VethPortInstance) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *VethPortInstance) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *VethPortInstance) SetNodeId(v string) {
	o.NodeId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VethPortInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VethPortInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VethPortInstance) SetName(v string) {
	o.Name = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *VethPortInstance) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *VethPortInstance) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *VethPortInstance) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetIsLinkUp returns the IsLinkUp field value if set, zero value otherwise.
func (o *VethPortInstance) GetIsLinkUp() bool {
	if o == nil || IsNil(o.IsLinkUp) {
		var ret bool
		return ret
	}
	return *o.IsLinkUp
}

// GetIsLinkUpOk returns a tuple with the IsLinkUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetIsLinkUpOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLinkUp) {
		return nil, false
	}
	return o.IsLinkUp, true
}

// HasIsLinkUp returns a boolean if a field has been set.
func (o *VethPortInstance) HasIsLinkUp() bool {
	if o != nil && !IsNil(o.IsLinkUp) {
		return true
	}

	return false
}

// SetIsLinkUp gets a reference to the given bool and assigns it to the IsLinkUp field.
func (o *VethPortInstance) SetIsLinkUp(v bool) {
	o.IsLinkUp = &v
}

// GetCurrentSpeed returns the CurrentSpeed field value if set, zero value otherwise.
func (o *VethPortInstance) GetCurrentSpeed() int64 {
	if o == nil || IsNil(o.CurrentSpeed) {
		var ret int64
		return ret
	}
	return *o.CurrentSpeed
}

// GetCurrentSpeedOk returns a tuple with the CurrentSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetCurrentSpeedOk() (*int64, bool) {
	if o == nil || IsNil(o.CurrentSpeed) {
		return nil, false
	}
	return o.CurrentSpeed, true
}

// HasCurrentSpeed returns a boolean if a field has been set.
func (o *VethPortInstance) HasCurrentSpeed() bool {
	if o != nil && !IsNil(o.CurrentSpeed) {
		return true
	}

	return false
}

// SetCurrentSpeed gets a reference to the given int64 and assigns it to the CurrentSpeed field.
func (o *VethPortInstance) SetCurrentSpeed(v int64) {
	o.CurrentSpeed = &v
}

// GetCurrentMtu returns the CurrentMtu field value if set, zero value otherwise.
func (o *VethPortInstance) GetCurrentMtu() int32 {
	if o == nil || IsNil(o.CurrentMtu) {
		var ret int32
		return ret
	}
	return *o.CurrentMtu
}

// GetCurrentMtuOk returns a tuple with the CurrentMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetCurrentMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrentMtu) {
		return nil, false
	}
	return o.CurrentMtu, true
}

// HasCurrentMtu returns a boolean if a field has been set.
func (o *VethPortInstance) HasCurrentMtu() bool {
	if o != nil && !IsNil(o.CurrentMtu) {
		return true
	}

	return false
}

// SetCurrentMtu gets a reference to the given int32 and assigns it to the CurrentMtu field.
func (o *VethPortInstance) SetCurrentMtu(v int32) {
	o.CurrentMtu = &v
}

// GetVswitchName returns the VswitchName field value if set, zero value otherwise.
func (o *VethPortInstance) GetVswitchName() string {
	if o == nil || IsNil(o.VswitchName) {
		var ret string
		return ret
	}
	return *o.VswitchName
}

// GetVswitchNameOk returns a tuple with the VswitchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetVswitchNameOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchName) {
		return nil, false
	}
	return o.VswitchName, true
}

// HasVswitchName returns a boolean if a field has been set.
func (o *VethPortInstance) HasVswitchName() bool {
	if o != nil && !IsNil(o.VswitchName) {
		return true
	}

	return false
}

// SetVswitchName gets a reference to the given string and assigns it to the VswitchName field.
func (o *VethPortInstance) SetVswitchName(v string) {
	o.VswitchName = &v
}

// GetVswitchPortGroupName returns the VswitchPortGroupName field value if set, zero value otherwise.
func (o *VethPortInstance) GetVswitchPortGroupName() string {
	if o == nil || IsNil(o.VswitchPortGroupName) {
		var ret string
		return ret
	}
	return *o.VswitchPortGroupName
}

// GetVswitchPortGroupNameOk returns a tuple with the VswitchPortGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetVswitchPortGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchPortGroupName) {
		return nil, false
	}
	return o.VswitchPortGroupName, true
}

// HasVswitchPortGroupName returns a boolean if a field has been set.
func (o *VethPortInstance) HasVswitchPortGroupName() bool {
	if o != nil && !IsNil(o.VswitchPortGroupName) {
		return true
	}

	return false
}

// SetVswitchPortGroupName gets a reference to the given string and assigns it to the VswitchPortGroupName field.
func (o *VethPortInstance) SetVswitchPortGroupName(v string) {
	o.VswitchPortGroupName = &v
}

// GetVswitchPortId returns the VswitchPortId field value if set, zero value otherwise.
func (o *VethPortInstance) GetVswitchPortId() int32 {
	if o == nil || IsNil(o.VswitchPortId) {
		var ret int32
		return ret
	}
	return *o.VswitchPortId
}

// GetVswitchPortIdOk returns a tuple with the VswitchPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetVswitchPortIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VswitchPortId) {
		return nil, false
	}
	return o.VswitchPortId, true
}

// HasVswitchPortId returns a boolean if a field has been set.
func (o *VethPortInstance) HasVswitchPortId() bool {
	if o != nil && !IsNil(o.VswitchPortId) {
		return true
	}

	return false
}

// SetVswitchPortId gets a reference to the given int32 and assigns it to the VswitchPortId field.
func (o *VethPortInstance) SetVswitchPortId(v int32) {
	o.VswitchPortId = &v
}

// GetVswitchPortName returns the VswitchPortName field value if set, zero value otherwise.
func (o *VethPortInstance) GetVswitchPortName() string {
	if o == nil || IsNil(o.VswitchPortName) {
		var ret string
		return ret
	}
	return *o.VswitchPortName
}

// GetVswitchPortNameOk returns a tuple with the VswitchPortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetVswitchPortNameOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchPortName) {
		return nil, false
	}
	return o.VswitchPortName, true
}

// HasVswitchPortName returns a boolean if a field has been set.
func (o *VethPortInstance) HasVswitchPortName() bool {
	if o != nil && !IsNil(o.VswitchPortName) {
		return true
	}

	return false
}

// SetVswitchPortName gets a reference to the given string and assigns it to the VswitchPortName field.
func (o *VethPortInstance) SetVswitchPortName(v string) {
	o.VswitchPortName = &v
}

// GetIpPorts returns the IpPorts field value if set, zero value otherwise.
func (o *VethPortInstance) GetIpPorts() []IpPortInstance {
	if o == nil || IsNil(o.IpPorts) {
		var ret []IpPortInstance
		return ret
	}
	return o.IpPorts
}

// GetIpPortsOk returns a tuple with the IpPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetIpPortsOk() ([]IpPortInstance, bool) {
	if o == nil || IsNil(o.IpPorts) {
		return nil, false
	}
	return o.IpPorts, true
}

// HasIpPorts returns a boolean if a field has been set.
func (o *VethPortInstance) HasIpPorts() bool {
	if o != nil && !IsNil(o.IpPorts) {
		return true
	}

	return false
}

// SetIpPorts gets a reference to the given []IpPortInstance and assigns it to the IpPorts field.
func (o *VethPortInstance) SetIpPorts(v []IpPortInstance) {
	o.IpPorts = v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *VethPortInstance) GetPartner() VethPortInstance {
	if o == nil || IsNil(o.Partner) {
		var ret VethPortInstance
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetPartnerOk() (*VethPortInstance, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *VethPortInstance) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given VethPortInstance and assigns it to the Partner field.
func (o *VethPortInstance) SetPartner(v VethPortInstance) {
	o.Partner = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *VethPortInstance) GetAppliance() ApplianceInstance {
	if o == nil || IsNil(o.Appliance) {
		var ret ApplianceInstance
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetApplianceOk() (*ApplianceInstance, bool) {
	if o == nil || IsNil(o.Appliance) {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *VethPortInstance) HasAppliance() bool {
	if o != nil && !IsNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given ApplianceInstance and assigns it to the Appliance field.
func (o *VethPortInstance) SetAppliance(v ApplianceInstance) {
	o.Appliance = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *VethPortInstance) GetNode() NodeInstance {
	if o == nil || IsNil(o.Node) {
		var ret NodeInstance
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VethPortInstance) GetNodeOk() (*NodeInstance, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *VethPortInstance) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given NodeInstance and assigns it to the Node field.
func (o *VethPortInstance) SetNode(v NodeInstance) {
	o.Node = &v
}

func (o VethPortInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VethPortInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partner_id"] = o.PartnerId
	}
	if !IsNil(o.ApplianceId) {
		toSerialize["appliance_id"] = o.ApplianceId
	}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.IsLinkUp) {
		toSerialize["is_link_up"] = o.IsLinkUp
	}
	if !IsNil(o.CurrentSpeed) {
		toSerialize["current_speed"] = o.CurrentSpeed
	}
	if !IsNil(o.CurrentMtu) {
		toSerialize["current_mtu"] = o.CurrentMtu
	}
	if !IsNil(o.VswitchName) {
		toSerialize["vswitch_name"] = o.VswitchName
	}
	if !IsNil(o.VswitchPortGroupName) {
		toSerialize["vswitch_port_group_name"] = o.VswitchPortGroupName
	}
	if !IsNil(o.VswitchPortId) {
		toSerialize["vswitch_port_id"] = o.VswitchPortId
	}
	if !IsNil(o.VswitchPortName) {
		toSerialize["vswitch_port_name"] = o.VswitchPortName
	}
	if !IsNil(o.IpPorts) {
		toSerialize["ip_ports"] = o.IpPorts
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	return toSerialize, nil
}

type NullableVethPortInstance struct {
	value *VethPortInstance
	isSet bool
}

func (v NullableVethPortInstance) Get() *VethPortInstance {
	return v.value
}

func (v *NullableVethPortInstance) Set(val *VethPortInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVethPortInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVethPortInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVethPortInstance(val *VethPortInstance) *NullableVethPortInstance {
	return &NullableVethPortInstance{value: val, isSet: true}
}

func (v NullableVethPortInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVethPortInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


