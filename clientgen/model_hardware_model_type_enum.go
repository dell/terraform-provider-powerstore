/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// HardwareModelTypeEnum Desired model to which the appliance should be upgraded.  * 1200T  * 3200T  * 5200T  * 9200T  Was added in version 3.6.0.0.
type HardwareModelTypeEnum string

// List of HardwareModelTypeEnum
const (
	HARDWAREMODELTYPEENUM__1200_T HardwareModelTypeEnum = "1200T"
	HARDWAREMODELTYPEENUM__3200_T HardwareModelTypeEnum = "3200T"
	HARDWAREMODELTYPEENUM__5200_T HardwareModelTypeEnum = "5200T"
	HARDWAREMODELTYPEENUM__9200_T HardwareModelTypeEnum = "9200T"
)

// All allowed values of HardwareModelTypeEnum enum
var AllowedHardwareModelTypeEnumEnumValues = []HardwareModelTypeEnum{
	"1200T",
	"3200T",
	"5200T",
	"9200T",
}

func (v *HardwareModelTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HardwareModelTypeEnum(value)
	for _, existing := range AllowedHardwareModelTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HardwareModelTypeEnum", value)
}

// NewHardwareModelTypeEnumFromValue returns a pointer to a valid HardwareModelTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHardwareModelTypeEnumFromValue(v string) (*HardwareModelTypeEnum, error) {
	ev := HardwareModelTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HardwareModelTypeEnum: valid values are %v", v, AllowedHardwareModelTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HardwareModelTypeEnum) IsValid() bool {
	for _, existing := range AllowedHardwareModelTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HardwareModelTypeEnum value
func (v HardwareModelTypeEnum) Ptr() *HardwareModelTypeEnum {
	return &v
}

type NullableHardwareModelTypeEnum struct {
	value *HardwareModelTypeEnum
	isSet bool
}

func (v NullableHardwareModelTypeEnum) Get() *HardwareModelTypeEnum {
	return v.value
}

func (v *NullableHardwareModelTypeEnum) Set(val *HardwareModelTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareModelTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareModelTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareModelTypeEnum(val *HardwareModelTypeEnum) *NullableHardwareModelTypeEnum {
	return &NullableHardwareModelTypeEnum{value: val, isSet: true}
}

func (v NullableHardwareModelTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareModelTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

