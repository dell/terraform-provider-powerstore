/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the VolumeGroupCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeGroupCreate{}

// VolumeGroupCreate Create volume group request.
type VolumeGroupCreate struct {
	// Unique name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. 
	Name string `json:"name"`
	// Description for the volume group. The description should not be more than 256  characters long and should not have any unprintable characters.   If description is not specified, the description for the volume group will not be set. 
	Description *string `json:"description,omitempty"`
	// A list of identifiers of existing volumes that should be added to the volume group.    All the volumes must be on the same Cyclone appliance and should not be part of another volume group.   If a list of volumes is not specified or if the specified list is empty, an  empty volume group of type Volume will be created. 
	VolumeIds []string `json:"volume_ids,omitempty"`
	// A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.   This parameter defaults to true, if not specified. 
	IsWriteOrderConsistent *bool `json:"is_write_order_consistent,omitempty"`
	// Unique identifier of an optional protection policy to assign to the volume group.  name:{name} can be used instead of {id}. For example: 'protection_policy_id':'name:policy_name'
	ProtectionPolicyId *string `json:"protection_policy_id,omitempty"`
	// Unique identifier of an optional QoS performance policy to assign to the volume group. name:{name} can be used instead of {id}. For example: 'qos_performance_policy_id':'name:policy_name' Was added in version 4.0.0.0.
	QosPerformancePolicyId *string `json:"qos_performance_policy_id,omitempty"`
}

// NewVolumeGroupCreate instantiates a new VolumeGroupCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeGroupCreate(name string) *VolumeGroupCreate {
	this := VolumeGroupCreate{}
	this.Name = name
	var isWriteOrderConsistent bool = true
	this.IsWriteOrderConsistent = &isWriteOrderConsistent
	return &this
}

// NewVolumeGroupCreateWithDefaults instantiates a new VolumeGroupCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeGroupCreateWithDefaults() *VolumeGroupCreate {
	this := VolumeGroupCreate{}
	var isWriteOrderConsistent bool = true
	this.IsWriteOrderConsistent = &isWriteOrderConsistent
	return &this
}

// GetName returns the Name field value
func (o *VolumeGroupCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VolumeGroupCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VolumeGroupCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VolumeGroupCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VolumeGroupCreate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VolumeGroupCreate) SetDescription(v string) {
	o.Description = &v
}

// GetVolumeIds returns the VolumeIds field value if set, zero value otherwise.
func (o *VolumeGroupCreate) GetVolumeIds() []string {
	if o == nil || IsNil(o.VolumeIds) {
		var ret []string
		return ret
	}
	return o.VolumeIds
}

// GetVolumeIdsOk returns a tuple with the VolumeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupCreate) GetVolumeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VolumeIds) {
		return nil, false
	}
	return o.VolumeIds, true
}

// HasVolumeIds returns a boolean if a field has been set.
func (o *VolumeGroupCreate) HasVolumeIds() bool {
	if o != nil && !IsNil(o.VolumeIds) {
		return true
	}

	return false
}

// SetVolumeIds gets a reference to the given []string and assigns it to the VolumeIds field.
func (o *VolumeGroupCreate) SetVolumeIds(v []string) {
	o.VolumeIds = v
}

// GetIsWriteOrderConsistent returns the IsWriteOrderConsistent field value if set, zero value otherwise.
func (o *VolumeGroupCreate) GetIsWriteOrderConsistent() bool {
	if o == nil || IsNil(o.IsWriteOrderConsistent) {
		var ret bool
		return ret
	}
	return *o.IsWriteOrderConsistent
}

// GetIsWriteOrderConsistentOk returns a tuple with the IsWriteOrderConsistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupCreate) GetIsWriteOrderConsistentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWriteOrderConsistent) {
		return nil, false
	}
	return o.IsWriteOrderConsistent, true
}

// HasIsWriteOrderConsistent returns a boolean if a field has been set.
func (o *VolumeGroupCreate) HasIsWriteOrderConsistent() bool {
	if o != nil && !IsNil(o.IsWriteOrderConsistent) {
		return true
	}

	return false
}

// SetIsWriteOrderConsistent gets a reference to the given bool and assigns it to the IsWriteOrderConsistent field.
func (o *VolumeGroupCreate) SetIsWriteOrderConsistent(v bool) {
	o.IsWriteOrderConsistent = &v
}

// GetProtectionPolicyId returns the ProtectionPolicyId field value if set, zero value otherwise.
func (o *VolumeGroupCreate) GetProtectionPolicyId() string {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyId
}

// GetProtectionPolicyIdOk returns a tuple with the ProtectionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupCreate) GetProtectionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionPolicyId) {
		return nil, false
	}
	return o.ProtectionPolicyId, true
}

// HasProtectionPolicyId returns a boolean if a field has been set.
func (o *VolumeGroupCreate) HasProtectionPolicyId() bool {
	if o != nil && !IsNil(o.ProtectionPolicyId) {
		return true
	}

	return false
}

// SetProtectionPolicyId gets a reference to the given string and assigns it to the ProtectionPolicyId field.
func (o *VolumeGroupCreate) SetProtectionPolicyId(v string) {
	o.ProtectionPolicyId = &v
}

// GetQosPerformancePolicyId returns the QosPerformancePolicyId field value if set, zero value otherwise.
func (o *VolumeGroupCreate) GetQosPerformancePolicyId() string {
	if o == nil || IsNil(o.QosPerformancePolicyId) {
		var ret string
		return ret
	}
	return *o.QosPerformancePolicyId
}

// GetQosPerformancePolicyIdOk returns a tuple with the QosPerformancePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupCreate) GetQosPerformancePolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.QosPerformancePolicyId) {
		return nil, false
	}
	return o.QosPerformancePolicyId, true
}

// HasQosPerformancePolicyId returns a boolean if a field has been set.
func (o *VolumeGroupCreate) HasQosPerformancePolicyId() bool {
	if o != nil && !IsNil(o.QosPerformancePolicyId) {
		return true
	}

	return false
}

// SetQosPerformancePolicyId gets a reference to the given string and assigns it to the QosPerformancePolicyId field.
func (o *VolumeGroupCreate) SetQosPerformancePolicyId(v string) {
	o.QosPerformancePolicyId = &v
}

func (o VolumeGroupCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeGroupCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.VolumeIds) {
		toSerialize["volume_ids"] = o.VolumeIds
	}
	if !IsNil(o.IsWriteOrderConsistent) {
		toSerialize["is_write_order_consistent"] = o.IsWriteOrderConsistent
	}
	if !IsNil(o.ProtectionPolicyId) {
		toSerialize["protection_policy_id"] = o.ProtectionPolicyId
	}
	if !IsNil(o.QosPerformancePolicyId) {
		toSerialize["qos_performance_policy_id"] = o.QosPerformancePolicyId
	}
	return toSerialize, nil
}

type NullableVolumeGroupCreate struct {
	value *VolumeGroupCreate
	isSet bool
}

func (v NullableVolumeGroupCreate) Get() *VolumeGroupCreate {
	return v.value
}

func (v *NullableVolumeGroupCreate) Set(val *VolumeGroupCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeGroupCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeGroupCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeGroupCreate(val *VolumeGroupCreate) *NullableVolumeGroupCreate {
	return &NullableVolumeGroupCreate{value: val, isSet: true}
}

func (v NullableVolumeGroupCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeGroupCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


