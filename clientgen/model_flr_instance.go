/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the FlrInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlrInstance{}

// FlrInstance  Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.
type FlrInstance struct {
	Mode *FileSystemFLRModeEnum `json:"mode,omitempty"`
	// The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. The default value for the minimum retention period is 1 day. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted.  This setting is significant only when flr mode is not None. 
	MinimumRetention *string `json:"minimum_retention,omitempty"`
	// The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite, which means that the files can never be deleted.  This setting is significant only when flr mode is not None. 
	DefaultRetention *string `json:"default_retention,omitempty"`
	// The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. The default value for the maximum retention period is infinite, which means that the files can never be deleted.  This setting is significant only when flr mode is not None. 
	MaximumRetention *string `json:"maximum_retention,omitempty"`
	// Indicates whether to automatically lock files in an FLR-enabled file system. When true files are locked automatically after modification based on the policy_interval. When enabled, auto-locked files are set with the default retention period value.  This setting is significant only when flr mode is not None. 
	AutoLock *bool `json:"auto_lock,omitempty"`
	// Indicates whether locked files will be automatically delete from an FLR-enabled file system once their retention periods have expired.  This setting is significant only when flr mode is not None. 
	AutoDelete *bool `json:"auto_delete,omitempty"`
	// Indicates how long to wait (in seconds) after files are modified before the files are automatically locked. The default value is 3600 seconds (1 hour).  This setting is significant only when flr mode is not None. 
	PolicyInterval *int32 `json:"policy_interval,omitempty"`
	// Indicates whether FLR file system has protected files.  This setting is significant only when flr mode is not None. 
	HasProtectedFiles *bool `json:"has_protected_files,omitempty"`
	// Per file system clock used to track the retention date. It is initialized when an FLR-enabled file system is first mounted on a NAS Server. It does not advance when a file system is not mounted.  This setting is significant only when flr mode is not None. 
	ClockTime *time.Time `json:"clock_time,omitempty"`
	// Maximum date and time that has been set on any locked file in an FLR-enabled file system, which means that the file system itself will be protected until this date and time. This value is compared to the FLR Clock Time to determine whether the date and time have passed. Value is null if the maximum locked date is infinite, or a specific time.  This setting is significant only when flr mode is not None. 
	MaximumRetentionDate *time.Time `json:"maximum_retention_date,omitempty"`
	// Localized message string corresponding to mode Was added in version 3.0.0.0.
	ModeL10n *string `json:"mode_l10n,omitempty"`
}

// NewFlrInstance instantiates a new FlrInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlrInstance() *FlrInstance {
	this := FlrInstance{}
	var mode FileSystemFLRModeEnum = FILESYSTEMFLRMODEENUM_ENTERPRISE
	this.Mode = &mode
	return &this
}

// NewFlrInstanceWithDefaults instantiates a new FlrInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlrInstanceWithDefaults() *FlrInstance {
	this := FlrInstance{}
	var mode FileSystemFLRModeEnum = FILESYSTEMFLRMODEENUM_ENTERPRISE
	this.Mode = &mode
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *FlrInstance) GetMode() FileSystemFLRModeEnum {
	if o == nil || IsNil(o.Mode) {
		var ret FileSystemFLRModeEnum
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetModeOk() (*FileSystemFLRModeEnum, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *FlrInstance) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given FileSystemFLRModeEnum and assigns it to the Mode field.
func (o *FlrInstance) SetMode(v FileSystemFLRModeEnum) {
	o.Mode = &v
}

// GetMinimumRetention returns the MinimumRetention field value if set, zero value otherwise.
func (o *FlrInstance) GetMinimumRetention() string {
	if o == nil || IsNil(o.MinimumRetention) {
		var ret string
		return ret
	}
	return *o.MinimumRetention
}

// GetMinimumRetentionOk returns a tuple with the MinimumRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetMinimumRetentionOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumRetention) {
		return nil, false
	}
	return o.MinimumRetention, true
}

// HasMinimumRetention returns a boolean if a field has been set.
func (o *FlrInstance) HasMinimumRetention() bool {
	if o != nil && !IsNil(o.MinimumRetention) {
		return true
	}

	return false
}

// SetMinimumRetention gets a reference to the given string and assigns it to the MinimumRetention field.
func (o *FlrInstance) SetMinimumRetention(v string) {
	o.MinimumRetention = &v
}

// GetDefaultRetention returns the DefaultRetention field value if set, zero value otherwise.
func (o *FlrInstance) GetDefaultRetention() string {
	if o == nil || IsNil(o.DefaultRetention) {
		var ret string
		return ret
	}
	return *o.DefaultRetention
}

// GetDefaultRetentionOk returns a tuple with the DefaultRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetDefaultRetentionOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultRetention) {
		return nil, false
	}
	return o.DefaultRetention, true
}

// HasDefaultRetention returns a boolean if a field has been set.
func (o *FlrInstance) HasDefaultRetention() bool {
	if o != nil && !IsNil(o.DefaultRetention) {
		return true
	}

	return false
}

// SetDefaultRetention gets a reference to the given string and assigns it to the DefaultRetention field.
func (o *FlrInstance) SetDefaultRetention(v string) {
	o.DefaultRetention = &v
}

// GetMaximumRetention returns the MaximumRetention field value if set, zero value otherwise.
func (o *FlrInstance) GetMaximumRetention() string {
	if o == nil || IsNil(o.MaximumRetention) {
		var ret string
		return ret
	}
	return *o.MaximumRetention
}

// GetMaximumRetentionOk returns a tuple with the MaximumRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetMaximumRetentionOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumRetention) {
		return nil, false
	}
	return o.MaximumRetention, true
}

// HasMaximumRetention returns a boolean if a field has been set.
func (o *FlrInstance) HasMaximumRetention() bool {
	if o != nil && !IsNil(o.MaximumRetention) {
		return true
	}

	return false
}

// SetMaximumRetention gets a reference to the given string and assigns it to the MaximumRetention field.
func (o *FlrInstance) SetMaximumRetention(v string) {
	o.MaximumRetention = &v
}

// GetAutoLock returns the AutoLock field value if set, zero value otherwise.
func (o *FlrInstance) GetAutoLock() bool {
	if o == nil || IsNil(o.AutoLock) {
		var ret bool
		return ret
	}
	return *o.AutoLock
}

// GetAutoLockOk returns a tuple with the AutoLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetAutoLockOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoLock) {
		return nil, false
	}
	return o.AutoLock, true
}

// HasAutoLock returns a boolean if a field has been set.
func (o *FlrInstance) HasAutoLock() bool {
	if o != nil && !IsNil(o.AutoLock) {
		return true
	}

	return false
}

// SetAutoLock gets a reference to the given bool and assigns it to the AutoLock field.
func (o *FlrInstance) SetAutoLock(v bool) {
	o.AutoLock = &v
}

// GetAutoDelete returns the AutoDelete field value if set, zero value otherwise.
func (o *FlrInstance) GetAutoDelete() bool {
	if o == nil || IsNil(o.AutoDelete) {
		var ret bool
		return ret
	}
	return *o.AutoDelete
}

// GetAutoDeleteOk returns a tuple with the AutoDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetAutoDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoDelete) {
		return nil, false
	}
	return o.AutoDelete, true
}

// HasAutoDelete returns a boolean if a field has been set.
func (o *FlrInstance) HasAutoDelete() bool {
	if o != nil && !IsNil(o.AutoDelete) {
		return true
	}

	return false
}

// SetAutoDelete gets a reference to the given bool and assigns it to the AutoDelete field.
func (o *FlrInstance) SetAutoDelete(v bool) {
	o.AutoDelete = &v
}

// GetPolicyInterval returns the PolicyInterval field value if set, zero value otherwise.
func (o *FlrInstance) GetPolicyInterval() int32 {
	if o == nil || IsNil(o.PolicyInterval) {
		var ret int32
		return ret
	}
	return *o.PolicyInterval
}

// GetPolicyIntervalOk returns a tuple with the PolicyInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetPolicyIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.PolicyInterval) {
		return nil, false
	}
	return o.PolicyInterval, true
}

// HasPolicyInterval returns a boolean if a field has been set.
func (o *FlrInstance) HasPolicyInterval() bool {
	if o != nil && !IsNil(o.PolicyInterval) {
		return true
	}

	return false
}

// SetPolicyInterval gets a reference to the given int32 and assigns it to the PolicyInterval field.
func (o *FlrInstance) SetPolicyInterval(v int32) {
	o.PolicyInterval = &v
}

// GetHasProtectedFiles returns the HasProtectedFiles field value if set, zero value otherwise.
func (o *FlrInstance) GetHasProtectedFiles() bool {
	if o == nil || IsNil(o.HasProtectedFiles) {
		var ret bool
		return ret
	}
	return *o.HasProtectedFiles
}

// GetHasProtectedFilesOk returns a tuple with the HasProtectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetHasProtectedFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasProtectedFiles) {
		return nil, false
	}
	return o.HasProtectedFiles, true
}

// HasHasProtectedFiles returns a boolean if a field has been set.
func (o *FlrInstance) HasHasProtectedFiles() bool {
	if o != nil && !IsNil(o.HasProtectedFiles) {
		return true
	}

	return false
}

// SetHasProtectedFiles gets a reference to the given bool and assigns it to the HasProtectedFiles field.
func (o *FlrInstance) SetHasProtectedFiles(v bool) {
	o.HasProtectedFiles = &v
}

// GetClockTime returns the ClockTime field value if set, zero value otherwise.
func (o *FlrInstance) GetClockTime() time.Time {
	if o == nil || IsNil(o.ClockTime) {
		var ret time.Time
		return ret
	}
	return *o.ClockTime
}

// GetClockTimeOk returns a tuple with the ClockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetClockTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClockTime) {
		return nil, false
	}
	return o.ClockTime, true
}

// HasClockTime returns a boolean if a field has been set.
func (o *FlrInstance) HasClockTime() bool {
	if o != nil && !IsNil(o.ClockTime) {
		return true
	}

	return false
}

// SetClockTime gets a reference to the given time.Time and assigns it to the ClockTime field.
func (o *FlrInstance) SetClockTime(v time.Time) {
	o.ClockTime = &v
}

// GetMaximumRetentionDate returns the MaximumRetentionDate field value if set, zero value otherwise.
func (o *FlrInstance) GetMaximumRetentionDate() time.Time {
	if o == nil || IsNil(o.MaximumRetentionDate) {
		var ret time.Time
		return ret
	}
	return *o.MaximumRetentionDate
}

// GetMaximumRetentionDateOk returns a tuple with the MaximumRetentionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetMaximumRetentionDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MaximumRetentionDate) {
		return nil, false
	}
	return o.MaximumRetentionDate, true
}

// HasMaximumRetentionDate returns a boolean if a field has been set.
func (o *FlrInstance) HasMaximumRetentionDate() bool {
	if o != nil && !IsNil(o.MaximumRetentionDate) {
		return true
	}

	return false
}

// SetMaximumRetentionDate gets a reference to the given time.Time and assigns it to the MaximumRetentionDate field.
func (o *FlrInstance) SetMaximumRetentionDate(v time.Time) {
	o.MaximumRetentionDate = &v
}

// GetModeL10n returns the ModeL10n field value if set, zero value otherwise.
func (o *FlrInstance) GetModeL10n() string {
	if o == nil || IsNil(o.ModeL10n) {
		var ret string
		return ret
	}
	return *o.ModeL10n
}

// GetModeL10nOk returns a tuple with the ModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlrInstance) GetModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ModeL10n) {
		return nil, false
	}
	return o.ModeL10n, true
}

// HasModeL10n returns a boolean if a field has been set.
func (o *FlrInstance) HasModeL10n() bool {
	if o != nil && !IsNil(o.ModeL10n) {
		return true
	}

	return false
}

// SetModeL10n gets a reference to the given string and assigns it to the ModeL10n field.
func (o *FlrInstance) SetModeL10n(v string) {
	o.ModeL10n = &v
}

func (o FlrInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlrInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.MinimumRetention) {
		toSerialize["minimum_retention"] = o.MinimumRetention
	}
	if !IsNil(o.DefaultRetention) {
		toSerialize["default_retention"] = o.DefaultRetention
	}
	if !IsNil(o.MaximumRetention) {
		toSerialize["maximum_retention"] = o.MaximumRetention
	}
	if !IsNil(o.AutoLock) {
		toSerialize["auto_lock"] = o.AutoLock
	}
	if !IsNil(o.AutoDelete) {
		toSerialize["auto_delete"] = o.AutoDelete
	}
	if !IsNil(o.PolicyInterval) {
		toSerialize["policy_interval"] = o.PolicyInterval
	}
	if !IsNil(o.HasProtectedFiles) {
		toSerialize["has_protected_files"] = o.HasProtectedFiles
	}
	if !IsNil(o.ClockTime) {
		toSerialize["clock_time"] = o.ClockTime
	}
	if !IsNil(o.MaximumRetentionDate) {
		toSerialize["maximum_retention_date"] = o.MaximumRetentionDate
	}
	if !IsNil(o.ModeL10n) {
		toSerialize["mode_l10n"] = o.ModeL10n
	}
	return toSerialize, nil
}

type NullableFlrInstance struct {
	value *FlrInstance
	isSet bool
}

func (v NullableFlrInstance) Get() *FlrInstance {
	return v.value
}

func (v *NullableFlrInstance) Set(val *FlrInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFlrInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFlrInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlrInstance(val *FlrInstance) *NullableFlrInstance {
	return &NullableFlrInstance{value: val, isSet: true}
}

func (v NullableFlrInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlrInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


