/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the StorageContainerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageContainerInstance{}

// StorageContainerInstance A storage container is a logical grouping of related storage objects.  For example, a storage container maps to a vVol datastore in vSphere where the storage for virtual machines can be provisioned.  This resource type has queriable associations from virtual_volume, replication_group, datastore, storage_container_destination
type StorageContainerInstance struct {
	// The unique identifier of the storage container.
	Id *string `json:"id,omitempty"`
	// Name for the storage container. This should be unique across all storage containers in the cluster. Name can be from 1 to 64 UTF-8 characters, and not more than 127 bytes. Name cannot contain characters '/', '\\', '%', 'â€œ'.   This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// The total number of bytes that can be provisioned/reserved against this storage container.  A value of 0 means there is no limit. It is possible to set the quota to a value that overprovisions the amount of space available in the system. 
	Quota *int64 `json:"quota,omitempty"`
	StorageProtocol *StorageContainerStorageProtocolEnum `json:"storage_protocol,omitempty"`
	// Localized message string corresponding to storage_protocol Was added in version 3.0.0.0.
	StorageProtocolL10n *string `json:"storage_protocol_l10n,omitempty"`
	// This is the inverse of the resource type virtual_volume association.
	VirtualVolumes []VirtualVolumeInstance `json:"virtual_volumes,omitempty"`
	// This is the inverse of the resource type replication_group association.
	ReplicationGroups []ReplicationGroupInstance `json:"replication_groups,omitempty"`
	// This is the inverse of the resource type datastore association.
	Datastores []DatastoreInstance `json:"datastores,omitempty"`
	// This is the inverse of the resource type storage_container_destination association.
	Destinations []StorageContainerDestinationInstance `json:"destinations,omitempty"`
}

// NewStorageContainerInstance instantiates a new StorageContainerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageContainerInstance() *StorageContainerInstance {
	this := StorageContainerInstance{}
	var storageProtocol StorageContainerStorageProtocolEnum = STORAGECONTAINERSTORAGEPROTOCOLENUM_SCSI
	this.StorageProtocol = &storageProtocol
	return &this
}

// NewStorageContainerInstanceWithDefaults instantiates a new StorageContainerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageContainerInstanceWithDefaults() *StorageContainerInstance {
	this := StorageContainerInstance{}
	var storageProtocol StorageContainerStorageProtocolEnum = STORAGECONTAINERSTORAGEPROTOCOLENUM_SCSI
	this.StorageProtocol = &storageProtocol
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StorageContainerInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageContainerInstance) SetName(v string) {
	o.Name = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetQuota() int64 {
	if o == nil || IsNil(o.Quota) {
		var ret int64
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetQuotaOk() (*int64, bool) {
	if o == nil || IsNil(o.Quota) {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasQuota() bool {
	if o != nil && !IsNil(o.Quota) {
		return true
	}

	return false
}

// SetQuota gets a reference to the given int64 and assigns it to the Quota field.
func (o *StorageContainerInstance) SetQuota(v int64) {
	o.Quota = &v
}

// GetStorageProtocol returns the StorageProtocol field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetStorageProtocol() StorageContainerStorageProtocolEnum {
	if o == nil || IsNil(o.StorageProtocol) {
		var ret StorageContainerStorageProtocolEnum
		return ret
	}
	return *o.StorageProtocol
}

// GetStorageProtocolOk returns a tuple with the StorageProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetStorageProtocolOk() (*StorageContainerStorageProtocolEnum, bool) {
	if o == nil || IsNil(o.StorageProtocol) {
		return nil, false
	}
	return o.StorageProtocol, true
}

// HasStorageProtocol returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasStorageProtocol() bool {
	if o != nil && !IsNil(o.StorageProtocol) {
		return true
	}

	return false
}

// SetStorageProtocol gets a reference to the given StorageContainerStorageProtocolEnum and assigns it to the StorageProtocol field.
func (o *StorageContainerInstance) SetStorageProtocol(v StorageContainerStorageProtocolEnum) {
	o.StorageProtocol = &v
}

// GetStorageProtocolL10n returns the StorageProtocolL10n field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetStorageProtocolL10n() string {
	if o == nil || IsNil(o.StorageProtocolL10n) {
		var ret string
		return ret
	}
	return *o.StorageProtocolL10n
}

// GetStorageProtocolL10nOk returns a tuple with the StorageProtocolL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetStorageProtocolL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StorageProtocolL10n) {
		return nil, false
	}
	return o.StorageProtocolL10n, true
}

// HasStorageProtocolL10n returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasStorageProtocolL10n() bool {
	if o != nil && !IsNil(o.StorageProtocolL10n) {
		return true
	}

	return false
}

// SetStorageProtocolL10n gets a reference to the given string and assigns it to the StorageProtocolL10n field.
func (o *StorageContainerInstance) SetStorageProtocolL10n(v string) {
	o.StorageProtocolL10n = &v
}

// GetVirtualVolumes returns the VirtualVolumes field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetVirtualVolumes() []VirtualVolumeInstance {
	if o == nil || IsNil(o.VirtualVolumes) {
		var ret []VirtualVolumeInstance
		return ret
	}
	return o.VirtualVolumes
}

// GetVirtualVolumesOk returns a tuple with the VirtualVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetVirtualVolumesOk() ([]VirtualVolumeInstance, bool) {
	if o == nil || IsNil(o.VirtualVolumes) {
		return nil, false
	}
	return o.VirtualVolumes, true
}

// HasVirtualVolumes returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasVirtualVolumes() bool {
	if o != nil && !IsNil(o.VirtualVolumes) {
		return true
	}

	return false
}

// SetVirtualVolumes gets a reference to the given []VirtualVolumeInstance and assigns it to the VirtualVolumes field.
func (o *StorageContainerInstance) SetVirtualVolumes(v []VirtualVolumeInstance) {
	o.VirtualVolumes = v
}

// GetReplicationGroups returns the ReplicationGroups field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetReplicationGroups() []ReplicationGroupInstance {
	if o == nil || IsNil(o.ReplicationGroups) {
		var ret []ReplicationGroupInstance
		return ret
	}
	return o.ReplicationGroups
}

// GetReplicationGroupsOk returns a tuple with the ReplicationGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetReplicationGroupsOk() ([]ReplicationGroupInstance, bool) {
	if o == nil || IsNil(o.ReplicationGroups) {
		return nil, false
	}
	return o.ReplicationGroups, true
}

// HasReplicationGroups returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasReplicationGroups() bool {
	if o != nil && !IsNil(o.ReplicationGroups) {
		return true
	}

	return false
}

// SetReplicationGroups gets a reference to the given []ReplicationGroupInstance and assigns it to the ReplicationGroups field.
func (o *StorageContainerInstance) SetReplicationGroups(v []ReplicationGroupInstance) {
	o.ReplicationGroups = v
}

// GetDatastores returns the Datastores field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetDatastores() []DatastoreInstance {
	if o == nil || IsNil(o.Datastores) {
		var ret []DatastoreInstance
		return ret
	}
	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetDatastoresOk() ([]DatastoreInstance, bool) {
	if o == nil || IsNil(o.Datastores) {
		return nil, false
	}
	return o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasDatastores() bool {
	if o != nil && !IsNil(o.Datastores) {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []DatastoreInstance and assigns it to the Datastores field.
func (o *StorageContainerInstance) SetDatastores(v []DatastoreInstance) {
	o.Datastores = v
}

// GetDestinations returns the Destinations field value if set, zero value otherwise.
func (o *StorageContainerInstance) GetDestinations() []StorageContainerDestinationInstance {
	if o == nil || IsNil(o.Destinations) {
		var ret []StorageContainerDestinationInstance
		return ret
	}
	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageContainerInstance) GetDestinationsOk() ([]StorageContainerDestinationInstance, bool) {
	if o == nil || IsNil(o.Destinations) {
		return nil, false
	}
	return o.Destinations, true
}

// HasDestinations returns a boolean if a field has been set.
func (o *StorageContainerInstance) HasDestinations() bool {
	if o != nil && !IsNil(o.Destinations) {
		return true
	}

	return false
}

// SetDestinations gets a reference to the given []StorageContainerDestinationInstance and assigns it to the Destinations field.
func (o *StorageContainerInstance) SetDestinations(v []StorageContainerDestinationInstance) {
	o.Destinations = v
}

func (o StorageContainerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageContainerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Quota) {
		toSerialize["quota"] = o.Quota
	}
	if !IsNil(o.StorageProtocol) {
		toSerialize["storage_protocol"] = o.StorageProtocol
	}
	if !IsNil(o.StorageProtocolL10n) {
		toSerialize["storage_protocol_l10n"] = o.StorageProtocolL10n
	}
	if !IsNil(o.VirtualVolumes) {
		toSerialize["virtual_volumes"] = o.VirtualVolumes
	}
	if !IsNil(o.ReplicationGroups) {
		toSerialize["replication_groups"] = o.ReplicationGroups
	}
	if !IsNil(o.Datastores) {
		toSerialize["datastores"] = o.Datastores
	}
	if !IsNil(o.Destinations) {
		toSerialize["destinations"] = o.Destinations
	}
	return toSerialize, nil
}

type NullableStorageContainerInstance struct {
	value *StorageContainerInstance
	isSet bool
}

func (v NullableStorageContainerInstance) Get() *StorageContainerInstance {
	return v.value
}

func (v *NullableStorageContainerInstance) Set(val *StorageContainerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageContainerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageContainerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageContainerInstance(val *StorageContainerInstance) *NullableStorageContainerInstance {
	return &NullableStorageContainerInstance{value: val, isSet: true}
}

func (v NullableStorageContainerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageContainerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


