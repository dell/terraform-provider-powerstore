/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// NASAccessTypeEnum NAS filesystem snapshot access method. Applies only to file system type snapshots taken locally (no remote_system_id set). The setting is ignored for volume, virtual_volume, and volume_group snapshots. The possible values are: * Snapshot - Creates read-only auto mounted snapshots accessible from the hidden .snapshot subdirectory of the production file system. * Protocol - Creates read-only snapshots which can be mounted and accessed at a later time via NFS Export or SMB share.  Was added in version 3.0.0.0.
type NASAccessTypeEnum string

// List of NASAccessTypeEnum
const (
	NASACCESSTYPEENUM_SNAPSHOT NASAccessTypeEnum = "Snapshot"
	NASACCESSTYPEENUM_PROTOCOL NASAccessTypeEnum = "Protocol"
)

// All allowed values of NASAccessTypeEnum enum
var AllowedNASAccessTypeEnumEnumValues = []NASAccessTypeEnum{
	"Snapshot",
	"Protocol",
}

func (v *NASAccessTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NASAccessTypeEnum(value)
	for _, existing := range AllowedNASAccessTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NASAccessTypeEnum", value)
}

// NewNASAccessTypeEnumFromValue returns a pointer to a valid NASAccessTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNASAccessTypeEnumFromValue(v string) (*NASAccessTypeEnum, error) {
	ev := NASAccessTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NASAccessTypeEnum: valid values are %v", v, AllowedNASAccessTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NASAccessTypeEnum) IsValid() bool {
	for _, existing := range AllowedNASAccessTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NASAccessTypeEnum value
func (v NASAccessTypeEnum) Ptr() *NASAccessTypeEnum {
	return &v
}

type NullableNASAccessTypeEnum struct {
	value *NASAccessTypeEnum
	isSet bool
}

func (v NullableNASAccessTypeEnum) Get() *NASAccessTypeEnum {
	return v.value
}

func (v *NullableNASAccessTypeEnum) Set(val *NASAccessTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNASAccessTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNASAccessTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNASAccessTypeEnum(val *NASAccessTypeEnum) *NullableNASAccessTypeEnum {
	return &NullableNASAccessTypeEnum{value: val, isSet: true}
}

func (v NullableNASAccessTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNASAccessTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

