/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// NFSExportMinSecurityEnum NFS enforced security type for users accessing an NFS Export. * Sys - Allow the user to authenticate with any NFS security types: UNIX, Kerberos, Kerberos with integrity, or Kerberos with encryption. * Kerberos - Allow only Kerberos security for user authentication. * Kerberos_With_Integrity- Allow only Kerberos with integrity and Kerberos with encryption security for user authentication. * Kerberos_With_Encryption- Allow only Kerberos with encryption security for user authentication. 
type NFSExportMinSecurityEnum string

// List of NFSExportMinSecurityEnum
const (
	NFSEXPORTMINSECURITYENUM_SYS NFSExportMinSecurityEnum = "Sys"
	NFSEXPORTMINSECURITYENUM_KERBEROS NFSExportMinSecurityEnum = "Kerberos"
	NFSEXPORTMINSECURITYENUM_KERBEROS_WITH_INTEGRITY NFSExportMinSecurityEnum = "Kerberos_With_Integrity"
	NFSEXPORTMINSECURITYENUM_KERBEROS_WITH_ENCRYPTION NFSExportMinSecurityEnum = "Kerberos_With_Encryption"
)

// All allowed values of NFSExportMinSecurityEnum enum
var AllowedNFSExportMinSecurityEnumEnumValues = []NFSExportMinSecurityEnum{
	"Sys",
	"Kerberos",
	"Kerberos_With_Integrity",
	"Kerberos_With_Encryption",
}

func (v *NFSExportMinSecurityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NFSExportMinSecurityEnum(value)
	for _, existing := range AllowedNFSExportMinSecurityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NFSExportMinSecurityEnum", value)
}

// NewNFSExportMinSecurityEnumFromValue returns a pointer to a valid NFSExportMinSecurityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNFSExportMinSecurityEnumFromValue(v string) (*NFSExportMinSecurityEnum, error) {
	ev := NFSExportMinSecurityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NFSExportMinSecurityEnum: valid values are %v", v, AllowedNFSExportMinSecurityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NFSExportMinSecurityEnum) IsValid() bool {
	for _, existing := range AllowedNFSExportMinSecurityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NFSExportMinSecurityEnum value
func (v NFSExportMinSecurityEnum) Ptr() *NFSExportMinSecurityEnum {
	return &v
}

type NullableNFSExportMinSecurityEnum struct {
	value *NFSExportMinSecurityEnum
	isSet bool
}

func (v NullableNFSExportMinSecurityEnum) Get() *NFSExportMinSecurityEnum {
	return v.value
}

func (v *NullableNFSExportMinSecurityEnum) Set(val *NFSExportMinSecurityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNFSExportMinSecurityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNFSExportMinSecurityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFSExportMinSecurityEnum(val *NFSExportMinSecurityEnum) *NullableNFSExportMinSecurityEnum {
	return &NullableNFSExportMinSecurityEnum{value: val, isSet: true}
}

func (v NullableNFSExportMinSecurityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFSExportMinSecurityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

