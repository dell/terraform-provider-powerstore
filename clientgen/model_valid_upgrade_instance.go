/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the ValidUpgradeInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidUpgradeInstance{}

// ValidUpgradeInstance Additional hardware details that are specific to each hardware component upgrade. Was added in version 3.6.0.0.
type ValidUpgradeInstance struct {
	ModelName *HardwareModelTypeEnum `json:"model_name,omitempty"`
	// DPE description.
	Dpe *string `json:"dpe,omitempty"`
	// CPU Cores description.
	CpuCores *string `json:"cpu_cores,omitempty"`
	// Memory description.
	PhysicalMemory *string `json:"physical_memory,omitempty"`
	// Number of nvram drives required for upgrade.
	NvramDrivesRequired *int32 `json:"nvram_drives_required,omitempty"`
	// Localized message string corresponding to model_name Was added in version 3.6.0.0.
	ModelNameL10n *string `json:"model_name_l10n,omitempty"`
}

// NewValidUpgradeInstance instantiates a new ValidUpgradeInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidUpgradeInstance() *ValidUpgradeInstance {
	this := ValidUpgradeInstance{}
	return &this
}

// NewValidUpgradeInstanceWithDefaults instantiates a new ValidUpgradeInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidUpgradeInstanceWithDefaults() *ValidUpgradeInstance {
	this := ValidUpgradeInstance{}
	return &this
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *ValidUpgradeInstance) GetModelName() HardwareModelTypeEnum {
	if o == nil || IsNil(o.ModelName) {
		var ret HardwareModelTypeEnum
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidUpgradeInstance) GetModelNameOk() (*HardwareModelTypeEnum, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *ValidUpgradeInstance) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given HardwareModelTypeEnum and assigns it to the ModelName field.
func (o *ValidUpgradeInstance) SetModelName(v HardwareModelTypeEnum) {
	o.ModelName = &v
}

// GetDpe returns the Dpe field value if set, zero value otherwise.
func (o *ValidUpgradeInstance) GetDpe() string {
	if o == nil || IsNil(o.Dpe) {
		var ret string
		return ret
	}
	return *o.Dpe
}

// GetDpeOk returns a tuple with the Dpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidUpgradeInstance) GetDpeOk() (*string, bool) {
	if o == nil || IsNil(o.Dpe) {
		return nil, false
	}
	return o.Dpe, true
}

// HasDpe returns a boolean if a field has been set.
func (o *ValidUpgradeInstance) HasDpe() bool {
	if o != nil && !IsNil(o.Dpe) {
		return true
	}

	return false
}

// SetDpe gets a reference to the given string and assigns it to the Dpe field.
func (o *ValidUpgradeInstance) SetDpe(v string) {
	o.Dpe = &v
}

// GetCpuCores returns the CpuCores field value if set, zero value otherwise.
func (o *ValidUpgradeInstance) GetCpuCores() string {
	if o == nil || IsNil(o.CpuCores) {
		var ret string
		return ret
	}
	return *o.CpuCores
}

// GetCpuCoresOk returns a tuple with the CpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidUpgradeInstance) GetCpuCoresOk() (*string, bool) {
	if o == nil || IsNil(o.CpuCores) {
		return nil, false
	}
	return o.CpuCores, true
}

// HasCpuCores returns a boolean if a field has been set.
func (o *ValidUpgradeInstance) HasCpuCores() bool {
	if o != nil && !IsNil(o.CpuCores) {
		return true
	}

	return false
}

// SetCpuCores gets a reference to the given string and assigns it to the CpuCores field.
func (o *ValidUpgradeInstance) SetCpuCores(v string) {
	o.CpuCores = &v
}

// GetPhysicalMemory returns the PhysicalMemory field value if set, zero value otherwise.
func (o *ValidUpgradeInstance) GetPhysicalMemory() string {
	if o == nil || IsNil(o.PhysicalMemory) {
		var ret string
		return ret
	}
	return *o.PhysicalMemory
}

// GetPhysicalMemoryOk returns a tuple with the PhysicalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidUpgradeInstance) GetPhysicalMemoryOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalMemory) {
		return nil, false
	}
	return o.PhysicalMemory, true
}

// HasPhysicalMemory returns a boolean if a field has been set.
func (o *ValidUpgradeInstance) HasPhysicalMemory() bool {
	if o != nil && !IsNil(o.PhysicalMemory) {
		return true
	}

	return false
}

// SetPhysicalMemory gets a reference to the given string and assigns it to the PhysicalMemory field.
func (o *ValidUpgradeInstance) SetPhysicalMemory(v string) {
	o.PhysicalMemory = &v
}

// GetNvramDrivesRequired returns the NvramDrivesRequired field value if set, zero value otherwise.
func (o *ValidUpgradeInstance) GetNvramDrivesRequired() int32 {
	if o == nil || IsNil(o.NvramDrivesRequired) {
		var ret int32
		return ret
	}
	return *o.NvramDrivesRequired
}

// GetNvramDrivesRequiredOk returns a tuple with the NvramDrivesRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidUpgradeInstance) GetNvramDrivesRequiredOk() (*int32, bool) {
	if o == nil || IsNil(o.NvramDrivesRequired) {
		return nil, false
	}
	return o.NvramDrivesRequired, true
}

// HasNvramDrivesRequired returns a boolean if a field has been set.
func (o *ValidUpgradeInstance) HasNvramDrivesRequired() bool {
	if o != nil && !IsNil(o.NvramDrivesRequired) {
		return true
	}

	return false
}

// SetNvramDrivesRequired gets a reference to the given int32 and assigns it to the NvramDrivesRequired field.
func (o *ValidUpgradeInstance) SetNvramDrivesRequired(v int32) {
	o.NvramDrivesRequired = &v
}

// GetModelNameL10n returns the ModelNameL10n field value if set, zero value otherwise.
func (o *ValidUpgradeInstance) GetModelNameL10n() string {
	if o == nil || IsNil(o.ModelNameL10n) {
		var ret string
		return ret
	}
	return *o.ModelNameL10n
}

// GetModelNameL10nOk returns a tuple with the ModelNameL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidUpgradeInstance) GetModelNameL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ModelNameL10n) {
		return nil, false
	}
	return o.ModelNameL10n, true
}

// HasModelNameL10n returns a boolean if a field has been set.
func (o *ValidUpgradeInstance) HasModelNameL10n() bool {
	if o != nil && !IsNil(o.ModelNameL10n) {
		return true
	}

	return false
}

// SetModelNameL10n gets a reference to the given string and assigns it to the ModelNameL10n field.
func (o *ValidUpgradeInstance) SetModelNameL10n(v string) {
	o.ModelNameL10n = &v
}

func (o ValidUpgradeInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidUpgradeInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ModelName) {
		toSerialize["model_name"] = o.ModelName
	}
	if !IsNil(o.Dpe) {
		toSerialize["dpe"] = o.Dpe
	}
	if !IsNil(o.CpuCores) {
		toSerialize["cpu_cores"] = o.CpuCores
	}
	if !IsNil(o.PhysicalMemory) {
		toSerialize["physical_memory"] = o.PhysicalMemory
	}
	if !IsNil(o.NvramDrivesRequired) {
		toSerialize["nvram_drives_required"] = o.NvramDrivesRequired
	}
	if !IsNil(o.ModelNameL10n) {
		toSerialize["model_name_l10n"] = o.ModelNameL10n
	}
	return toSerialize, nil
}

type NullableValidUpgradeInstance struct {
	value *ValidUpgradeInstance
	isSet bool
}

func (v NullableValidUpgradeInstance) Get() *ValidUpgradeInstance {
	return v.value
}

func (v *NullableValidUpgradeInstance) Set(val *ValidUpgradeInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableValidUpgradeInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableValidUpgradeInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidUpgradeInstance(val *ValidUpgradeInstance) *NullableValidUpgradeInstance {
	return &NullableValidUpgradeInstance{value: val, isSet: true}
}

func (v NullableValidUpgradeInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidUpgradeInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


