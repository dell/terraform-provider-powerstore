/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// FileInterfaceRoleEnum Values are: * Production - This type of network interface is used for all file protocols and services of a NAS server. This type of interface is inactive while a NAS server is in destination mode. * Backup - This type of network interface is used only for NDMP/NFS backup or disaster recovery testing. This type of interface is always active in all NAS server modes. * System - This type of interface are reserved for system traffic such as for NAS server migration, they can't be used for the production traffic. System type is not supported during create interface.  Values was added in 3.0.0.0: System.
type FileInterfaceRoleEnum string

// List of FileInterfaceRoleEnum
const (
	FILEINTERFACEROLEENUM_PRODUCTION FileInterfaceRoleEnum = "Production"
	FILEINTERFACEROLEENUM_BACKUP FileInterfaceRoleEnum = "Backup"
	FILEINTERFACEROLEENUM_SYSTEM FileInterfaceRoleEnum = "System"
)

// All allowed values of FileInterfaceRoleEnum enum
var AllowedFileInterfaceRoleEnumEnumValues = []FileInterfaceRoleEnum{
	"Production",
	"Backup",
	"System",
}

func (v *FileInterfaceRoleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileInterfaceRoleEnum(value)
	for _, existing := range AllowedFileInterfaceRoleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileInterfaceRoleEnum", value)
}

// NewFileInterfaceRoleEnumFromValue returns a pointer to a valid FileInterfaceRoleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileInterfaceRoleEnumFromValue(v string) (*FileInterfaceRoleEnum, error) {
	ev := FileInterfaceRoleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileInterfaceRoleEnum: valid values are %v", v, AllowedFileInterfaceRoleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileInterfaceRoleEnum) IsValid() bool {
	for _, existing := range AllowedFileInterfaceRoleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileInterfaceRoleEnum value
func (v FileInterfaceRoleEnum) Ptr() *FileInterfaceRoleEnum {
	return &v
}

type NullableFileInterfaceRoleEnum struct {
	value *FileInterfaceRoleEnum
	isSet bool
}

func (v NullableFileInterfaceRoleEnum) Get() *FileInterfaceRoleEnum {
	return v.value
}

func (v *NullableFileInterfaceRoleEnum) Set(val *FileInterfaceRoleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFileInterfaceRoleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFileInterfaceRoleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileInterfaceRoleEnum(val *FileInterfaceRoleEnum) *NullableFileInterfaceRoleEnum {
	return &NullableFileInterfaceRoleEnum{value: val, isSet: true}
}

func (v NullableFileInterfaceRoleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileInterfaceRoleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

