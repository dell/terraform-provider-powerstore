/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the RemoteSnapshotInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteSnapshotInstance{}

// RemoteSnapshotInstance Information about a remote snapshot. Was added in version 3.5.0.0. This resource type has queriable associations from volume, volume_group, remote_system, remote_snapshot_session
type RemoteSnapshotInstance struct {
	// Unique identifier of the remote snapshot.
	Id *string `json:"id,omitempty"`
	// Name of the remote snapshot.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Unique identifier of snapshot generated by remote system.
	RemoteBackupIdentifier *string `json:"remote_backup_identifier,omitempty"`
	// Unique identifier of the local volume to which this snapshot belongs. This will be null if the volume is deleted or this is a volume_group snapshot.
	VolumeId *string `json:"volume_id,omitempty"`
	// Unique identifier of the local volume_group to which this snapshot belongs. This will be null if the volume_group is deleted or this is a volume snapshot.
	VolumeGroupId *string `json:"volume_group_id,omitempty"`
	// This indicates whether local volume or volume group to which this snapshot belongs is in recycle bin. If local volume or volume group is deleted this will be false.
	IsSourceInRecycleBin *bool `json:"is_source_in_recycle_bin,omitempty"`
	State *RemoteSnapshotStateEnum `json:"state,omitempty"`
	ResourceType *RemoteSnapshotResourceTypeEnum `json:"resource_type,omitempty"`
	// List of remote member snapshots. Only applies to volume_group type.  Filtering on the fields of this embedded resource is not supported.
	RemoteMemberDetails []RemoteMemberDetailsInstance `json:"remote_member_details,omitempty"`
	// Date/time the remote snapshot was taken by the array.
	CreationTimestamp *time.Time `json:"creation_timestamp,omitempty"`
	// Date/time when the remote snapshot will expire.
	ExpirationTimestamp *time.Time `json:"expiration_timestamp,omitempty"`
	// Unique identifier of the remote system.
	RemoteSystemId *string `json:"remote_system_id,omitempty"`
	// Unique identifier of the source volume or volume_group. This preserves the value when the local volume/volume_group is deleted.
	SourceId *string `json:"source_id,omitempty"`
	// Name of the source volume or volume_group. This preserves the value when the local volume/volume_group is deleted.  This property supports case-insensitive filtering.
	SourceName *string `json:"source_name,omitempty"`
	CreatorType *RemoteSnapshotCreatorTypeEnum `json:"creator_type,omitempty"`
	// Localized message string corresponding to state Was added in version 3.5.0.0.
	StateL10n *string `json:"state_l10n,omitempty"`
	// Localized message string corresponding to resource_type Was added in version 3.5.0.0.
	ResourceTypeL10n *string `json:"resource_type_l10n,omitempty"`
	// Localized message string corresponding to creator_type Was added in version 3.5.0.0.
	CreatorTypeL10n *string `json:"creator_type_l10n,omitempty"`
	// This is the inverse of the resource type remote_snapshot_session association.
	RemoteSnapshots []RemoteSnapshotSessionInstance `json:"remote_snapshots,omitempty"`
	Volume *VolumeInstance `json:"volume,omitempty"`
	VolumeGroup *VolumeGroupInstance `json:"volume_group,omitempty"`
	RemoteSystem *RemoteSystemInstance `json:"remote_system,omitempty"`
}

// NewRemoteSnapshotInstance instantiates a new RemoteSnapshotInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSnapshotInstance() *RemoteSnapshotInstance {
	this := RemoteSnapshotInstance{}
	return &this
}

// NewRemoteSnapshotInstanceWithDefaults instantiates a new RemoteSnapshotInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSnapshotInstanceWithDefaults() *RemoteSnapshotInstance {
	this := RemoteSnapshotInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RemoteSnapshotInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RemoteSnapshotInstance) SetName(v string) {
	o.Name = &v
}

// GetRemoteBackupIdentifier returns the RemoteBackupIdentifier field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetRemoteBackupIdentifier() string {
	if o == nil || IsNil(o.RemoteBackupIdentifier) {
		var ret string
		return ret
	}
	return *o.RemoteBackupIdentifier
}

// GetRemoteBackupIdentifierOk returns a tuple with the RemoteBackupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetRemoteBackupIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteBackupIdentifier) {
		return nil, false
	}
	return o.RemoteBackupIdentifier, true
}

// HasRemoteBackupIdentifier returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasRemoteBackupIdentifier() bool {
	if o != nil && !IsNil(o.RemoteBackupIdentifier) {
		return true
	}

	return false
}

// SetRemoteBackupIdentifier gets a reference to the given string and assigns it to the RemoteBackupIdentifier field.
func (o *RemoteSnapshotInstance) SetRemoteBackupIdentifier(v string) {
	o.RemoteBackupIdentifier = &v
}

// GetVolumeId returns the VolumeId field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetVolumeId() string {
	if o == nil || IsNil(o.VolumeId) {
		var ret string
		return ret
	}
	return *o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetVolumeIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeId) {
		return nil, false
	}
	return o.VolumeId, true
}

// HasVolumeId returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasVolumeId() bool {
	if o != nil && !IsNil(o.VolumeId) {
		return true
	}

	return false
}

// SetVolumeId gets a reference to the given string and assigns it to the VolumeId field.
func (o *RemoteSnapshotInstance) SetVolumeId(v string) {
	o.VolumeId = &v
}

// GetVolumeGroupId returns the VolumeGroupId field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetVolumeGroupId() string {
	if o == nil || IsNil(o.VolumeGroupId) {
		var ret string
		return ret
	}
	return *o.VolumeGroupId
}

// GetVolumeGroupIdOk returns a tuple with the VolumeGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetVolumeGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeGroupId) {
		return nil, false
	}
	return o.VolumeGroupId, true
}

// HasVolumeGroupId returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasVolumeGroupId() bool {
	if o != nil && !IsNil(o.VolumeGroupId) {
		return true
	}

	return false
}

// SetVolumeGroupId gets a reference to the given string and assigns it to the VolumeGroupId field.
func (o *RemoteSnapshotInstance) SetVolumeGroupId(v string) {
	o.VolumeGroupId = &v
}

// GetIsSourceInRecycleBin returns the IsSourceInRecycleBin field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetIsSourceInRecycleBin() bool {
	if o == nil || IsNil(o.IsSourceInRecycleBin) {
		var ret bool
		return ret
	}
	return *o.IsSourceInRecycleBin
}

// GetIsSourceInRecycleBinOk returns a tuple with the IsSourceInRecycleBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetIsSourceInRecycleBinOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSourceInRecycleBin) {
		return nil, false
	}
	return o.IsSourceInRecycleBin, true
}

// HasIsSourceInRecycleBin returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasIsSourceInRecycleBin() bool {
	if o != nil && !IsNil(o.IsSourceInRecycleBin) {
		return true
	}

	return false
}

// SetIsSourceInRecycleBin gets a reference to the given bool and assigns it to the IsSourceInRecycleBin field.
func (o *RemoteSnapshotInstance) SetIsSourceInRecycleBin(v bool) {
	o.IsSourceInRecycleBin = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetState() RemoteSnapshotStateEnum {
	if o == nil || IsNil(o.State) {
		var ret RemoteSnapshotStateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetStateOk() (*RemoteSnapshotStateEnum, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given RemoteSnapshotStateEnum and assigns it to the State field.
func (o *RemoteSnapshotInstance) SetState(v RemoteSnapshotStateEnum) {
	o.State = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetResourceType() RemoteSnapshotResourceTypeEnum {
	if o == nil || IsNil(o.ResourceType) {
		var ret RemoteSnapshotResourceTypeEnum
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetResourceTypeOk() (*RemoteSnapshotResourceTypeEnum, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given RemoteSnapshotResourceTypeEnum and assigns it to the ResourceType field.
func (o *RemoteSnapshotInstance) SetResourceType(v RemoteSnapshotResourceTypeEnum) {
	o.ResourceType = &v
}

// GetRemoteMemberDetails returns the RemoteMemberDetails field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetRemoteMemberDetails() []RemoteMemberDetailsInstance {
	if o == nil || IsNil(o.RemoteMemberDetails) {
		var ret []RemoteMemberDetailsInstance
		return ret
	}
	return o.RemoteMemberDetails
}

// GetRemoteMemberDetailsOk returns a tuple with the RemoteMemberDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetRemoteMemberDetailsOk() ([]RemoteMemberDetailsInstance, bool) {
	if o == nil || IsNil(o.RemoteMemberDetails) {
		return nil, false
	}
	return o.RemoteMemberDetails, true
}

// HasRemoteMemberDetails returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasRemoteMemberDetails() bool {
	if o != nil && !IsNil(o.RemoteMemberDetails) {
		return true
	}

	return false
}

// SetRemoteMemberDetails gets a reference to the given []RemoteMemberDetailsInstance and assigns it to the RemoteMemberDetails field.
func (o *RemoteSnapshotInstance) SetRemoteMemberDetails(v []RemoteMemberDetailsInstance) {
	o.RemoteMemberDetails = v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetCreationTimestamp() time.Time {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given time.Time and assigns it to the CreationTimestamp field.
func (o *RemoteSnapshotInstance) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = &v
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetExpirationTimestamp() time.Time {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		return nil, false
	}
	return o.ExpirationTimestamp, true
}

// HasExpirationTimestamp returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasExpirationTimestamp() bool {
	if o != nil && !IsNil(o.ExpirationTimestamp) {
		return true
	}

	return false
}

// SetExpirationTimestamp gets a reference to the given time.Time and assigns it to the ExpirationTimestamp field.
func (o *RemoteSnapshotInstance) SetExpirationTimestamp(v time.Time) {
	o.ExpirationTimestamp = &v
}

// GetRemoteSystemId returns the RemoteSystemId field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetRemoteSystemId() string {
	if o == nil || IsNil(o.RemoteSystemId) {
		var ret string
		return ret
	}
	return *o.RemoteSystemId
}

// GetRemoteSystemIdOk returns a tuple with the RemoteSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetRemoteSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteSystemId) {
		return nil, false
	}
	return o.RemoteSystemId, true
}

// HasRemoteSystemId returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasRemoteSystemId() bool {
	if o != nil && !IsNil(o.RemoteSystemId) {
		return true
	}

	return false
}

// SetRemoteSystemId gets a reference to the given string and assigns it to the RemoteSystemId field.
func (o *RemoteSnapshotInstance) SetRemoteSystemId(v string) {
	o.RemoteSystemId = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *RemoteSnapshotInstance) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *RemoteSnapshotInstance) SetSourceName(v string) {
	o.SourceName = &v
}

// GetCreatorType returns the CreatorType field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetCreatorType() RemoteSnapshotCreatorTypeEnum {
	if o == nil || IsNil(o.CreatorType) {
		var ret RemoteSnapshotCreatorTypeEnum
		return ret
	}
	return *o.CreatorType
}

// GetCreatorTypeOk returns a tuple with the CreatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetCreatorTypeOk() (*RemoteSnapshotCreatorTypeEnum, bool) {
	if o == nil || IsNil(o.CreatorType) {
		return nil, false
	}
	return o.CreatorType, true
}

// HasCreatorType returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasCreatorType() bool {
	if o != nil && !IsNil(o.CreatorType) {
		return true
	}

	return false
}

// SetCreatorType gets a reference to the given RemoteSnapshotCreatorTypeEnum and assigns it to the CreatorType field.
func (o *RemoteSnapshotInstance) SetCreatorType(v RemoteSnapshotCreatorTypeEnum) {
	o.CreatorType = &v
}

// GetStateL10n returns the StateL10n field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetStateL10n() string {
	if o == nil || IsNil(o.StateL10n) {
		var ret string
		return ret
	}
	return *o.StateL10n
}

// GetStateL10nOk returns a tuple with the StateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StateL10n) {
		return nil, false
	}
	return o.StateL10n, true
}

// HasStateL10n returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasStateL10n() bool {
	if o != nil && !IsNil(o.StateL10n) {
		return true
	}

	return false
}

// SetStateL10n gets a reference to the given string and assigns it to the StateL10n field.
func (o *RemoteSnapshotInstance) SetStateL10n(v string) {
	o.StateL10n = &v
}

// GetResourceTypeL10n returns the ResourceTypeL10n field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetResourceTypeL10n() string {
	if o == nil || IsNil(o.ResourceTypeL10n) {
		var ret string
		return ret
	}
	return *o.ResourceTypeL10n
}

// GetResourceTypeL10nOk returns a tuple with the ResourceTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetResourceTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceTypeL10n) {
		return nil, false
	}
	return o.ResourceTypeL10n, true
}

// HasResourceTypeL10n returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasResourceTypeL10n() bool {
	if o != nil && !IsNil(o.ResourceTypeL10n) {
		return true
	}

	return false
}

// SetResourceTypeL10n gets a reference to the given string and assigns it to the ResourceTypeL10n field.
func (o *RemoteSnapshotInstance) SetResourceTypeL10n(v string) {
	o.ResourceTypeL10n = &v
}

// GetCreatorTypeL10n returns the CreatorTypeL10n field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetCreatorTypeL10n() string {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		var ret string
		return ret
	}
	return *o.CreatorTypeL10n
}

// GetCreatorTypeL10nOk returns a tuple with the CreatorTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetCreatorTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		return nil, false
	}
	return o.CreatorTypeL10n, true
}

// HasCreatorTypeL10n returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasCreatorTypeL10n() bool {
	if o != nil && !IsNil(o.CreatorTypeL10n) {
		return true
	}

	return false
}

// SetCreatorTypeL10n gets a reference to the given string and assigns it to the CreatorTypeL10n field.
func (o *RemoteSnapshotInstance) SetCreatorTypeL10n(v string) {
	o.CreatorTypeL10n = &v
}

// GetRemoteSnapshots returns the RemoteSnapshots field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetRemoteSnapshots() []RemoteSnapshotSessionInstance {
	if o == nil || IsNil(o.RemoteSnapshots) {
		var ret []RemoteSnapshotSessionInstance
		return ret
	}
	return o.RemoteSnapshots
}

// GetRemoteSnapshotsOk returns a tuple with the RemoteSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetRemoteSnapshotsOk() ([]RemoteSnapshotSessionInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshots) {
		return nil, false
	}
	return o.RemoteSnapshots, true
}

// HasRemoteSnapshots returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasRemoteSnapshots() bool {
	if o != nil && !IsNil(o.RemoteSnapshots) {
		return true
	}

	return false
}

// SetRemoteSnapshots gets a reference to the given []RemoteSnapshotSessionInstance and assigns it to the RemoteSnapshots field.
func (o *RemoteSnapshotInstance) SetRemoteSnapshots(v []RemoteSnapshotSessionInstance) {
	o.RemoteSnapshots = v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetVolume() VolumeInstance {
	if o == nil || IsNil(o.Volume) {
		var ret VolumeInstance
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetVolumeOk() (*VolumeInstance, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given VolumeInstance and assigns it to the Volume field.
func (o *RemoteSnapshotInstance) SetVolume(v VolumeInstance) {
	o.Volume = &v
}

// GetVolumeGroup returns the VolumeGroup field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetVolumeGroup() VolumeGroupInstance {
	if o == nil || IsNil(o.VolumeGroup) {
		var ret VolumeGroupInstance
		return ret
	}
	return *o.VolumeGroup
}

// GetVolumeGroupOk returns a tuple with the VolumeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetVolumeGroupOk() (*VolumeGroupInstance, bool) {
	if o == nil || IsNil(o.VolumeGroup) {
		return nil, false
	}
	return o.VolumeGroup, true
}

// HasVolumeGroup returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasVolumeGroup() bool {
	if o != nil && !IsNil(o.VolumeGroup) {
		return true
	}

	return false
}

// SetVolumeGroup gets a reference to the given VolumeGroupInstance and assigns it to the VolumeGroup field.
func (o *RemoteSnapshotInstance) SetVolumeGroup(v VolumeGroupInstance) {
	o.VolumeGroup = &v
}

// GetRemoteSystem returns the RemoteSystem field value if set, zero value otherwise.
func (o *RemoteSnapshotInstance) GetRemoteSystem() RemoteSystemInstance {
	if o == nil || IsNil(o.RemoteSystem) {
		var ret RemoteSystemInstance
		return ret
	}
	return *o.RemoteSystem
}

// GetRemoteSystemOk returns a tuple with the RemoteSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotInstance) GetRemoteSystemOk() (*RemoteSystemInstance, bool) {
	if o == nil || IsNil(o.RemoteSystem) {
		return nil, false
	}
	return o.RemoteSystem, true
}

// HasRemoteSystem returns a boolean if a field has been set.
func (o *RemoteSnapshotInstance) HasRemoteSystem() bool {
	if o != nil && !IsNil(o.RemoteSystem) {
		return true
	}

	return false
}

// SetRemoteSystem gets a reference to the given RemoteSystemInstance and assigns it to the RemoteSystem field.
func (o *RemoteSnapshotInstance) SetRemoteSystem(v RemoteSystemInstance) {
	o.RemoteSystem = &v
}

func (o RemoteSnapshotInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteSnapshotInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RemoteBackupIdentifier) {
		toSerialize["remote_backup_identifier"] = o.RemoteBackupIdentifier
	}
	if !IsNil(o.VolumeId) {
		toSerialize["volume_id"] = o.VolumeId
	}
	if !IsNil(o.VolumeGroupId) {
		toSerialize["volume_group_id"] = o.VolumeGroupId
	}
	if !IsNil(o.IsSourceInRecycleBin) {
		toSerialize["is_source_in_recycle_bin"] = o.IsSourceInRecycleBin
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.RemoteMemberDetails) {
		toSerialize["remote_member_details"] = o.RemoteMemberDetails
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.ExpirationTimestamp) {
		toSerialize["expiration_timestamp"] = o.ExpirationTimestamp
	}
	if !IsNil(o.RemoteSystemId) {
		toSerialize["remote_system_id"] = o.RemoteSystemId
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !IsNil(o.SourceName) {
		toSerialize["source_name"] = o.SourceName
	}
	if !IsNil(o.CreatorType) {
		toSerialize["creator_type"] = o.CreatorType
	}
	if !IsNil(o.StateL10n) {
		toSerialize["state_l10n"] = o.StateL10n
	}
	if !IsNil(o.ResourceTypeL10n) {
		toSerialize["resource_type_l10n"] = o.ResourceTypeL10n
	}
	if !IsNil(o.CreatorTypeL10n) {
		toSerialize["creator_type_l10n"] = o.CreatorTypeL10n
	}
	if !IsNil(o.RemoteSnapshots) {
		toSerialize["remote_snapshots"] = o.RemoteSnapshots
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	if !IsNil(o.VolumeGroup) {
		toSerialize["volume_group"] = o.VolumeGroup
	}
	if !IsNil(o.RemoteSystem) {
		toSerialize["remote_system"] = o.RemoteSystem
	}
	return toSerialize, nil
}

type NullableRemoteSnapshotInstance struct {
	value *RemoteSnapshotInstance
	isSet bool
}

func (v NullableRemoteSnapshotInstance) Get() *RemoteSnapshotInstance {
	return v.value
}

func (v *NullableRemoteSnapshotInstance) Set(val *RemoteSnapshotInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSnapshotInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSnapshotInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSnapshotInstance(val *RemoteSnapshotInstance) *NullableRemoteSnapshotInstance {
	return &NullableRemoteSnapshotInstance{value: val, isSet: true}
}

func (v NullableRemoteSnapshotInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSnapshotInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


