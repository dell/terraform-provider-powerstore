/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the ActiveSessionInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveSessionInstance{}

// ActiveSessionInstance Properties of an active session.
type ActiveSessionInstance struct {
	// IQN or WWN of the target port that the initiator is logged into.
	PortName *string `json:"port_name,omitempty"`
	// Unique identifier of the appliance containing the session.
	ApplianceId *string `json:"appliance_id,omitempty"`
	// Unique identifier of node on the appliance on which active session is created. 
	NodeId *string `json:"node_id,omitempty"`
	// Unique identifier of the bond the initiator is logged into.  Null if one of the following is non-null: veth_id, eth_port_id or fc_port_id. 
	BondId *string `json:"bond_id,omitempty"`
	// Unique identifier of the FC port the initiator is logged into.  Null if one of the following is non-null: bond_id, veth_id or eth_port_id 
	FcPortId *string `json:"fc_port_id,omitempty"`
	// Unique identifier of the virtual Ethernet port the initiator is logged into.  Null if one of the following is non-null: bond, eth_port_id or fc_port_id. 
	VethId *string `json:"veth_id,omitempty"`
	// Unique identifier of the Ethernet port the initiator is logged into. Null if one of the following is non-null: bond_id, veth_id or fc_port_id. 
	EthPortId *string `json:"eth_port_id,omitempty"`
	// List of addresses of the NVMe/NVMe-vVol initiator. These can either be the IPs of the endpoints for NVMe over TCP, or they can be the WWNs if using NVMe over FC. It may be that the same NQN will be applied to multiple WWNs or IP addresses, since NQNs are unique per host sub-system, and not unique per port. This field is null for FC(SCSI) and iSCSI initiators.  Was added in version 3.0.0.0.
	NvmeTransportAddresses []string `json:"nvme_transport_addresses,omitempty"`
	NvmeTransportType *NvmeTransportTypeEnum `json:"nvme_transport_type,omitempty"`
	// Localized message string corresponding to nvme_transport_type Was added in version 3.0.0.0.
	NvmeTransportTypeL10n *string `json:"nvme_transport_type_l10n,omitempty"`
}

// NewActiveSessionInstance instantiates a new ActiveSessionInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveSessionInstance() *ActiveSessionInstance {
	this := ActiveSessionInstance{}
	return &this
}

// NewActiveSessionInstanceWithDefaults instantiates a new ActiveSessionInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveSessionInstanceWithDefaults() *ActiveSessionInstance {
	this := ActiveSessionInstance{}
	return &this
}

// GetPortName returns the PortName field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetPortName() string {
	if o == nil || IsNil(o.PortName) {
		var ret string
		return ret
	}
	return *o.PortName
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetPortNameOk() (*string, bool) {
	if o == nil || IsNil(o.PortName) {
		return nil, false
	}
	return o.PortName, true
}

// HasPortName returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasPortName() bool {
	if o != nil && !IsNil(o.PortName) {
		return true
	}

	return false
}

// SetPortName gets a reference to the given string and assigns it to the PortName field.
func (o *ActiveSessionInstance) SetPortName(v string) {
	o.PortName = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetApplianceId() string {
	if o == nil || IsNil(o.ApplianceId) {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *ActiveSessionInstance) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *ActiveSessionInstance) SetNodeId(v string) {
	o.NodeId = &v
}

// GetBondId returns the BondId field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetBondId() string {
	if o == nil || IsNil(o.BondId) {
		var ret string
		return ret
	}
	return *o.BondId
}

// GetBondIdOk returns a tuple with the BondId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetBondIdOk() (*string, bool) {
	if o == nil || IsNil(o.BondId) {
		return nil, false
	}
	return o.BondId, true
}

// HasBondId returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasBondId() bool {
	if o != nil && !IsNil(o.BondId) {
		return true
	}

	return false
}

// SetBondId gets a reference to the given string and assigns it to the BondId field.
func (o *ActiveSessionInstance) SetBondId(v string) {
	o.BondId = &v
}

// GetFcPortId returns the FcPortId field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetFcPortId() string {
	if o == nil || IsNil(o.FcPortId) {
		var ret string
		return ret
	}
	return *o.FcPortId
}

// GetFcPortIdOk returns a tuple with the FcPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetFcPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.FcPortId) {
		return nil, false
	}
	return o.FcPortId, true
}

// HasFcPortId returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasFcPortId() bool {
	if o != nil && !IsNil(o.FcPortId) {
		return true
	}

	return false
}

// SetFcPortId gets a reference to the given string and assigns it to the FcPortId field.
func (o *ActiveSessionInstance) SetFcPortId(v string) {
	o.FcPortId = &v
}

// GetVethId returns the VethId field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetVethId() string {
	if o == nil || IsNil(o.VethId) {
		var ret string
		return ret
	}
	return *o.VethId
}

// GetVethIdOk returns a tuple with the VethId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetVethIdOk() (*string, bool) {
	if o == nil || IsNil(o.VethId) {
		return nil, false
	}
	return o.VethId, true
}

// HasVethId returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasVethId() bool {
	if o != nil && !IsNil(o.VethId) {
		return true
	}

	return false
}

// SetVethId gets a reference to the given string and assigns it to the VethId field.
func (o *ActiveSessionInstance) SetVethId(v string) {
	o.VethId = &v
}

// GetEthPortId returns the EthPortId field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetEthPortId() string {
	if o == nil || IsNil(o.EthPortId) {
		var ret string
		return ret
	}
	return *o.EthPortId
}

// GetEthPortIdOk returns a tuple with the EthPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetEthPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.EthPortId) {
		return nil, false
	}
	return o.EthPortId, true
}

// HasEthPortId returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasEthPortId() bool {
	if o != nil && !IsNil(o.EthPortId) {
		return true
	}

	return false
}

// SetEthPortId gets a reference to the given string and assigns it to the EthPortId field.
func (o *ActiveSessionInstance) SetEthPortId(v string) {
	o.EthPortId = &v
}

// GetNvmeTransportAddresses returns the NvmeTransportAddresses field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetNvmeTransportAddresses() []string {
	if o == nil || IsNil(o.NvmeTransportAddresses) {
		var ret []string
		return ret
	}
	return o.NvmeTransportAddresses
}

// GetNvmeTransportAddressesOk returns a tuple with the NvmeTransportAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetNvmeTransportAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.NvmeTransportAddresses) {
		return nil, false
	}
	return o.NvmeTransportAddresses, true
}

// HasNvmeTransportAddresses returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasNvmeTransportAddresses() bool {
	if o != nil && !IsNil(o.NvmeTransportAddresses) {
		return true
	}

	return false
}

// SetNvmeTransportAddresses gets a reference to the given []string and assigns it to the NvmeTransportAddresses field.
func (o *ActiveSessionInstance) SetNvmeTransportAddresses(v []string) {
	o.NvmeTransportAddresses = v
}

// GetNvmeTransportType returns the NvmeTransportType field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetNvmeTransportType() NvmeTransportTypeEnum {
	if o == nil || IsNil(o.NvmeTransportType) {
		var ret NvmeTransportTypeEnum
		return ret
	}
	return *o.NvmeTransportType
}

// GetNvmeTransportTypeOk returns a tuple with the NvmeTransportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetNvmeTransportTypeOk() (*NvmeTransportTypeEnum, bool) {
	if o == nil || IsNil(o.NvmeTransportType) {
		return nil, false
	}
	return o.NvmeTransportType, true
}

// HasNvmeTransportType returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasNvmeTransportType() bool {
	if o != nil && !IsNil(o.NvmeTransportType) {
		return true
	}

	return false
}

// SetNvmeTransportType gets a reference to the given NvmeTransportTypeEnum and assigns it to the NvmeTransportType field.
func (o *ActiveSessionInstance) SetNvmeTransportType(v NvmeTransportTypeEnum) {
	o.NvmeTransportType = &v
}

// GetNvmeTransportTypeL10n returns the NvmeTransportTypeL10n field value if set, zero value otherwise.
func (o *ActiveSessionInstance) GetNvmeTransportTypeL10n() string {
	if o == nil || IsNil(o.NvmeTransportTypeL10n) {
		var ret string
		return ret
	}
	return *o.NvmeTransportTypeL10n
}

// GetNvmeTransportTypeL10nOk returns a tuple with the NvmeTransportTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionInstance) GetNvmeTransportTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.NvmeTransportTypeL10n) {
		return nil, false
	}
	return o.NvmeTransportTypeL10n, true
}

// HasNvmeTransportTypeL10n returns a boolean if a field has been set.
func (o *ActiveSessionInstance) HasNvmeTransportTypeL10n() bool {
	if o != nil && !IsNil(o.NvmeTransportTypeL10n) {
		return true
	}

	return false
}

// SetNvmeTransportTypeL10n gets a reference to the given string and assigns it to the NvmeTransportTypeL10n field.
func (o *ActiveSessionInstance) SetNvmeTransportTypeL10n(v string) {
	o.NvmeTransportTypeL10n = &v
}

func (o ActiveSessionInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveSessionInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PortName) {
		toSerialize["port_name"] = o.PortName
	}
	if !IsNil(o.ApplianceId) {
		toSerialize["appliance_id"] = o.ApplianceId
	}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.BondId) {
		toSerialize["bond_id"] = o.BondId
	}
	if !IsNil(o.FcPortId) {
		toSerialize["fc_port_id"] = o.FcPortId
	}
	if !IsNil(o.VethId) {
		toSerialize["veth_id"] = o.VethId
	}
	if !IsNil(o.EthPortId) {
		toSerialize["eth_port_id"] = o.EthPortId
	}
	if !IsNil(o.NvmeTransportAddresses) {
		toSerialize["nvme_transport_addresses"] = o.NvmeTransportAddresses
	}
	if !IsNil(o.NvmeTransportType) {
		toSerialize["nvme_transport_type"] = o.NvmeTransportType
	}
	if !IsNil(o.NvmeTransportTypeL10n) {
		toSerialize["nvme_transport_type_l10n"] = o.NvmeTransportTypeL10n
	}
	return toSerialize, nil
}

type NullableActiveSessionInstance struct {
	value *ActiveSessionInstance
	isSet bool
}

func (v NullableActiveSessionInstance) Get() *ActiveSessionInstance {
	return v.value
}

func (v *NullableActiveSessionInstance) Set(val *ActiveSessionInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveSessionInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveSessionInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveSessionInstance(val *ActiveSessionInstance) *NullableActiveSessionInstance {
	return &NullableActiveSessionInstance{value: val, isSet: true}
}

func (v NullableActiveSessionInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveSessionInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


