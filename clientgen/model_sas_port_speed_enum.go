/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// SasPortSpeedEnum SAS port transmission speed. * 3_Gbps- 3 Gigabits per second * 6_Gbps- 6 Gigabits per second * 12_Gbps- 12 Gigabits per second 
type SasPortSpeedEnum string

// List of SasPortSpeedEnum
const (
	SASPORTSPEEDENUM__3_GBPS SasPortSpeedEnum = "3_Gbps"
	SASPORTSPEEDENUM__6_GBPS SasPortSpeedEnum = "6_Gbps"
	SASPORTSPEEDENUM__12_GBPS SasPortSpeedEnum = "12_Gbps"
)

// All allowed values of SasPortSpeedEnum enum
var AllowedSasPortSpeedEnumEnumValues = []SasPortSpeedEnum{
	"3_Gbps",
	"6_Gbps",
	"12_Gbps",
}

func (v *SasPortSpeedEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SasPortSpeedEnum(value)
	for _, existing := range AllowedSasPortSpeedEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SasPortSpeedEnum", value)
}

// NewSasPortSpeedEnumFromValue returns a pointer to a valid SasPortSpeedEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSasPortSpeedEnumFromValue(v string) (*SasPortSpeedEnum, error) {
	ev := SasPortSpeedEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SasPortSpeedEnum: valid values are %v", v, AllowedSasPortSpeedEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SasPortSpeedEnum) IsValid() bool {
	for _, existing := range AllowedSasPortSpeedEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SasPortSpeedEnum value
func (v SasPortSpeedEnum) Ptr() *SasPortSpeedEnum {
	return &v
}

type NullableSasPortSpeedEnum struct {
	value *SasPortSpeedEnum
	isSet bool
}

func (v NullableSasPortSpeedEnum) Get() *SasPortSpeedEnum {
	return v.value
}

func (v *NullableSasPortSpeedEnum) Set(val *SasPortSpeedEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSasPortSpeedEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSasPortSpeedEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSasPortSpeedEnum(val *SasPortSpeedEnum) *NullableSasPortSpeedEnum {
	return &NullableSasPortSpeedEnum{value: val, isSet: true}
}

func (v NullableSasPortSpeedEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSasPortSpeedEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

