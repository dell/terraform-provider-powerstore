/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the DatastoreInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreInstance{}

// DatastoreInstance Properties of a datastore. Was added in version 3.0.0.0. This resource type has queriable associations from vcenter, storage_container, nfs_export, virtual_machine, volume, vsphere_host
type DatastoreInstance struct {
	// Unique identifier of the datastore instance.
	Id *string `json:"id,omitempty"`
	// UUID instance of the datastore in vCenter.
	InstanceUuid *string `json:"instance_uuid,omitempty"`
	// User-assigned name of the datastore in vCenter.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	Type *DatastoreTypeEnum `json:"type,omitempty"`
	// Unique identifier of the datastore in vCenter.
	VsphereObjectId *string `json:"vsphere_object_id,omitempty"`
	// Unique identifier of a vCenter instance.
	VcenterId *string `json:"vcenter_id,omitempty"`
	// Unique identifier of a backing storage_container instance (for vVol type only).
	StorageContainerId *string `json:"storage_container_id,omitempty"`
	// Unique identifier of a backing nfs_export instance (for NFS type only).
	NfsExportId *string `json:"nfs_export_id,omitempty"`
	// Localized message string corresponding to type Was added in version 3.0.0.0.
	TypeL10n *string `json:"type_l10n,omitempty"`
	Vcenter *VcenterInstance `json:"vcenter,omitempty"`
	StorageContainer *StorageContainerInstance `json:"storage_container,omitempty"`
	NfsExport *NfsExportInstance `json:"nfs_export,omitempty"`
	// List of the virtual_machines that are associated with this datastore.
	VirtualMachines []VirtualMachineInstance `json:"virtual_machines,omitempty"`
	// List of the volumes that are associated with this datastore.
	Volumes []VolumeInstance `json:"volumes,omitempty"`
	// List of the vsphere_hosts that are associated with this datastore.
	VsphereHosts []VsphereHostInstance `json:"vsphere_hosts,omitempty"`
}

// NewDatastoreInstance instantiates a new DatastoreInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreInstance() *DatastoreInstance {
	this := DatastoreInstance{}
	return &this
}

// NewDatastoreInstanceWithDefaults instantiates a new DatastoreInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreInstanceWithDefaults() *DatastoreInstance {
	this := DatastoreInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatastoreInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatastoreInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DatastoreInstance) SetId(v string) {
	o.Id = &v
}

// GetInstanceUuid returns the InstanceUuid field value if set, zero value otherwise.
func (o *DatastoreInstance) GetInstanceUuid() string {
	if o == nil || IsNil(o.InstanceUuid) {
		var ret string
		return ret
	}
	return *o.InstanceUuid
}

// GetInstanceUuidOk returns a tuple with the InstanceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetInstanceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceUuid) {
		return nil, false
	}
	return o.InstanceUuid, true
}

// HasInstanceUuid returns a boolean if a field has been set.
func (o *DatastoreInstance) HasInstanceUuid() bool {
	if o != nil && !IsNil(o.InstanceUuid) {
		return true
	}

	return false
}

// SetInstanceUuid gets a reference to the given string and assigns it to the InstanceUuid field.
func (o *DatastoreInstance) SetInstanceUuid(v string) {
	o.InstanceUuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatastoreInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatastoreInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatastoreInstance) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatastoreInstance) GetType() DatastoreTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret DatastoreTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetTypeOk() (*DatastoreTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatastoreInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DatastoreTypeEnum and assigns it to the Type field.
func (o *DatastoreInstance) SetType(v DatastoreTypeEnum) {
	o.Type = &v
}

// GetVsphereObjectId returns the VsphereObjectId field value if set, zero value otherwise.
func (o *DatastoreInstance) GetVsphereObjectId() string {
	if o == nil || IsNil(o.VsphereObjectId) {
		var ret string
		return ret
	}
	return *o.VsphereObjectId
}

// GetVsphereObjectIdOk returns a tuple with the VsphereObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetVsphereObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.VsphereObjectId) {
		return nil, false
	}
	return o.VsphereObjectId, true
}

// HasVsphereObjectId returns a boolean if a field has been set.
func (o *DatastoreInstance) HasVsphereObjectId() bool {
	if o != nil && !IsNil(o.VsphereObjectId) {
		return true
	}

	return false
}

// SetVsphereObjectId gets a reference to the given string and assigns it to the VsphereObjectId field.
func (o *DatastoreInstance) SetVsphereObjectId(v string) {
	o.VsphereObjectId = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *DatastoreInstance) GetVcenterId() string {
	if o == nil || IsNil(o.VcenterId) {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetVcenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterId) {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *DatastoreInstance) HasVcenterId() bool {
	if o != nil && !IsNil(o.VcenterId) {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *DatastoreInstance) SetVcenterId(v string) {
	o.VcenterId = &v
}

// GetStorageContainerId returns the StorageContainerId field value if set, zero value otherwise.
func (o *DatastoreInstance) GetStorageContainerId() string {
	if o == nil || IsNil(o.StorageContainerId) {
		var ret string
		return ret
	}
	return *o.StorageContainerId
}

// GetStorageContainerIdOk returns a tuple with the StorageContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetStorageContainerIdOk() (*string, bool) {
	if o == nil || IsNil(o.StorageContainerId) {
		return nil, false
	}
	return o.StorageContainerId, true
}

// HasStorageContainerId returns a boolean if a field has been set.
func (o *DatastoreInstance) HasStorageContainerId() bool {
	if o != nil && !IsNil(o.StorageContainerId) {
		return true
	}

	return false
}

// SetStorageContainerId gets a reference to the given string and assigns it to the StorageContainerId field.
func (o *DatastoreInstance) SetStorageContainerId(v string) {
	o.StorageContainerId = &v
}

// GetNfsExportId returns the NfsExportId field value if set, zero value otherwise.
func (o *DatastoreInstance) GetNfsExportId() string {
	if o == nil || IsNil(o.NfsExportId) {
		var ret string
		return ret
	}
	return *o.NfsExportId
}

// GetNfsExportIdOk returns a tuple with the NfsExportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetNfsExportIdOk() (*string, bool) {
	if o == nil || IsNil(o.NfsExportId) {
		return nil, false
	}
	return o.NfsExportId, true
}

// HasNfsExportId returns a boolean if a field has been set.
func (o *DatastoreInstance) HasNfsExportId() bool {
	if o != nil && !IsNil(o.NfsExportId) {
		return true
	}

	return false
}

// SetNfsExportId gets a reference to the given string and assigns it to the NfsExportId field.
func (o *DatastoreInstance) SetNfsExportId(v string) {
	o.NfsExportId = &v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *DatastoreInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *DatastoreInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *DatastoreInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetVcenter returns the Vcenter field value if set, zero value otherwise.
func (o *DatastoreInstance) GetVcenter() VcenterInstance {
	if o == nil || IsNil(o.Vcenter) {
		var ret VcenterInstance
		return ret
	}
	return *o.Vcenter
}

// GetVcenterOk returns a tuple with the Vcenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetVcenterOk() (*VcenterInstance, bool) {
	if o == nil || IsNil(o.Vcenter) {
		return nil, false
	}
	return o.Vcenter, true
}

// HasVcenter returns a boolean if a field has been set.
func (o *DatastoreInstance) HasVcenter() bool {
	if o != nil && !IsNil(o.Vcenter) {
		return true
	}

	return false
}

// SetVcenter gets a reference to the given VcenterInstance and assigns it to the Vcenter field.
func (o *DatastoreInstance) SetVcenter(v VcenterInstance) {
	o.Vcenter = &v
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise.
func (o *DatastoreInstance) GetStorageContainer() StorageContainerInstance {
	if o == nil || IsNil(o.StorageContainer) {
		var ret StorageContainerInstance
		return ret
	}
	return *o.StorageContainer
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetStorageContainerOk() (*StorageContainerInstance, bool) {
	if o == nil || IsNil(o.StorageContainer) {
		return nil, false
	}
	return o.StorageContainer, true
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *DatastoreInstance) HasStorageContainer() bool {
	if o != nil && !IsNil(o.StorageContainer) {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given StorageContainerInstance and assigns it to the StorageContainer field.
func (o *DatastoreInstance) SetStorageContainer(v StorageContainerInstance) {
	o.StorageContainer = &v
}

// GetNfsExport returns the NfsExport field value if set, zero value otherwise.
func (o *DatastoreInstance) GetNfsExport() NfsExportInstance {
	if o == nil || IsNil(o.NfsExport) {
		var ret NfsExportInstance
		return ret
	}
	return *o.NfsExport
}

// GetNfsExportOk returns a tuple with the NfsExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetNfsExportOk() (*NfsExportInstance, bool) {
	if o == nil || IsNil(o.NfsExport) {
		return nil, false
	}
	return o.NfsExport, true
}

// HasNfsExport returns a boolean if a field has been set.
func (o *DatastoreInstance) HasNfsExport() bool {
	if o != nil && !IsNil(o.NfsExport) {
		return true
	}

	return false
}

// SetNfsExport gets a reference to the given NfsExportInstance and assigns it to the NfsExport field.
func (o *DatastoreInstance) SetNfsExport(v NfsExportInstance) {
	o.NfsExport = &v
}

// GetVirtualMachines returns the VirtualMachines field value if set, zero value otherwise.
func (o *DatastoreInstance) GetVirtualMachines() []VirtualMachineInstance {
	if o == nil || IsNil(o.VirtualMachines) {
		var ret []VirtualMachineInstance
		return ret
	}
	return o.VirtualMachines
}

// GetVirtualMachinesOk returns a tuple with the VirtualMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetVirtualMachinesOk() ([]VirtualMachineInstance, bool) {
	if o == nil || IsNil(o.VirtualMachines) {
		return nil, false
	}
	return o.VirtualMachines, true
}

// HasVirtualMachines returns a boolean if a field has been set.
func (o *DatastoreInstance) HasVirtualMachines() bool {
	if o != nil && !IsNil(o.VirtualMachines) {
		return true
	}

	return false
}

// SetVirtualMachines gets a reference to the given []VirtualMachineInstance and assigns it to the VirtualMachines field.
func (o *DatastoreInstance) SetVirtualMachines(v []VirtualMachineInstance) {
	o.VirtualMachines = v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *DatastoreInstance) GetVolumes() []VolumeInstance {
	if o == nil || IsNil(o.Volumes) {
		var ret []VolumeInstance
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetVolumesOk() ([]VolumeInstance, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *DatastoreInstance) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []VolumeInstance and assigns it to the Volumes field.
func (o *DatastoreInstance) SetVolumes(v []VolumeInstance) {
	o.Volumes = v
}

// GetVsphereHosts returns the VsphereHosts field value if set, zero value otherwise.
func (o *DatastoreInstance) GetVsphereHosts() []VsphereHostInstance {
	if o == nil || IsNil(o.VsphereHosts) {
		var ret []VsphereHostInstance
		return ret
	}
	return o.VsphereHosts
}

// GetVsphereHostsOk returns a tuple with the VsphereHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInstance) GetVsphereHostsOk() ([]VsphereHostInstance, bool) {
	if o == nil || IsNil(o.VsphereHosts) {
		return nil, false
	}
	return o.VsphereHosts, true
}

// HasVsphereHosts returns a boolean if a field has been set.
func (o *DatastoreInstance) HasVsphereHosts() bool {
	if o != nil && !IsNil(o.VsphereHosts) {
		return true
	}

	return false
}

// SetVsphereHosts gets a reference to the given []VsphereHostInstance and assigns it to the VsphereHosts field.
func (o *DatastoreInstance) SetVsphereHosts(v []VsphereHostInstance) {
	o.VsphereHosts = v
}

func (o DatastoreInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InstanceUuid) {
		toSerialize["instance_uuid"] = o.InstanceUuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VsphereObjectId) {
		toSerialize["vsphere_object_id"] = o.VsphereObjectId
	}
	if !IsNil(o.VcenterId) {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	if !IsNil(o.StorageContainerId) {
		toSerialize["storage_container_id"] = o.StorageContainerId
	}
	if !IsNil(o.NfsExportId) {
		toSerialize["nfs_export_id"] = o.NfsExportId
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.Vcenter) {
		toSerialize["vcenter"] = o.Vcenter
	}
	if !IsNil(o.StorageContainer) {
		toSerialize["storage_container"] = o.StorageContainer
	}
	if !IsNil(o.NfsExport) {
		toSerialize["nfs_export"] = o.NfsExport
	}
	if !IsNil(o.VirtualMachines) {
		toSerialize["virtual_machines"] = o.VirtualMachines
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	if !IsNil(o.VsphereHosts) {
		toSerialize["vsphere_hosts"] = o.VsphereHosts
	}
	return toSerialize, nil
}

type NullableDatastoreInstance struct {
	value *DatastoreInstance
	isSet bool
}

func (v NullableDatastoreInstance) Get() *DatastoreInstance {
	return v.value
}

func (v *NullableDatastoreInstance) Set(val *DatastoreInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreInstance(val *DatastoreInstance) *NullableDatastoreInstance {
	return &NullableDatastoreInstance{value: val, isSet: true}
}

func (v NullableDatastoreInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


