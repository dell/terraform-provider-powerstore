/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the VcenterInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VcenterInstance{}

// VcenterInstance Properties of a vCenter. This resource type has queriable associations from virtual_machine, datastore, vsphere_host
type VcenterInstance struct {
	// Unique identifier of the vCenter instance.
	Id *string `json:"id,omitempty"`
	// UUID instance of the vCenter.
	InstanceUuid *string `json:"instance_uuid,omitempty"`
	// IP address of vCenter host, in IPv4, IPv6, or hostname format.
	Address *string `json:"address,omitempty"`
	// User name to login to vCenter.
	Username *string `json:"username,omitempty"`
	// Indicates whether the connection is secured with the vCenter SSL certificate validation or not.  Was added in version 4.0.0.0.
	IsVerifyServerCert *bool `json:"is_verify_server_cert,omitempty"`
	// Version of the vCenter including its build number. Was added in version 3.0.0.0.
	Version *string `json:"version,omitempty"`
	VendorProviderStatus *VendorProviderStatusEnum `json:"vendor_provider_status,omitempty"`
	// Localized message string corresponding to vendor_provider_status Was added in version 2.0.0.0.
	VendorProviderStatusL10n *string `json:"vendor_provider_status_l10n,omitempty"`
	// This is the inverse of the resource type virtual_machine association.
	VirtualMachines []VirtualMachineInstance `json:"virtual_machines,omitempty"`
	// This is the inverse of the resource type datastore association.
	Datastores []DatastoreInstance `json:"datastores,omitempty"`
	// This is the inverse of the resource type vsphere_host association.
	VsphereHosts []VsphereHostInstance `json:"vsphere_hosts,omitempty"`
}

// NewVcenterInstance instantiates a new VcenterInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterInstance() *VcenterInstance {
	this := VcenterInstance{}
	return &this
}

// NewVcenterInstanceWithDefaults instantiates a new VcenterInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterInstanceWithDefaults() *VcenterInstance {
	this := VcenterInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VcenterInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VcenterInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VcenterInstance) SetId(v string) {
	o.Id = &v
}

// GetInstanceUuid returns the InstanceUuid field value if set, zero value otherwise.
func (o *VcenterInstance) GetInstanceUuid() string {
	if o == nil || IsNil(o.InstanceUuid) {
		var ret string
		return ret
	}
	return *o.InstanceUuid
}

// GetInstanceUuidOk returns a tuple with the InstanceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetInstanceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceUuid) {
		return nil, false
	}
	return o.InstanceUuid, true
}

// HasInstanceUuid returns a boolean if a field has been set.
func (o *VcenterInstance) HasInstanceUuid() bool {
	if o != nil && !IsNil(o.InstanceUuid) {
		return true
	}

	return false
}

// SetInstanceUuid gets a reference to the given string and assigns it to the InstanceUuid field.
func (o *VcenterInstance) SetInstanceUuid(v string) {
	o.InstanceUuid = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *VcenterInstance) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *VcenterInstance) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *VcenterInstance) SetAddress(v string) {
	o.Address = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *VcenterInstance) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *VcenterInstance) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *VcenterInstance) SetUsername(v string) {
	o.Username = &v
}

// GetIsVerifyServerCert returns the IsVerifyServerCert field value if set, zero value otherwise.
func (o *VcenterInstance) GetIsVerifyServerCert() bool {
	if o == nil || IsNil(o.IsVerifyServerCert) {
		var ret bool
		return ret
	}
	return *o.IsVerifyServerCert
}

// GetIsVerifyServerCertOk returns a tuple with the IsVerifyServerCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetIsVerifyServerCertOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVerifyServerCert) {
		return nil, false
	}
	return o.IsVerifyServerCert, true
}

// HasIsVerifyServerCert returns a boolean if a field has been set.
func (o *VcenterInstance) HasIsVerifyServerCert() bool {
	if o != nil && !IsNil(o.IsVerifyServerCert) {
		return true
	}

	return false
}

// SetIsVerifyServerCert gets a reference to the given bool and assigns it to the IsVerifyServerCert field.
func (o *VcenterInstance) SetIsVerifyServerCert(v bool) {
	o.IsVerifyServerCert = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VcenterInstance) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VcenterInstance) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VcenterInstance) SetVersion(v string) {
	o.Version = &v
}

// GetVendorProviderStatus returns the VendorProviderStatus field value if set, zero value otherwise.
func (o *VcenterInstance) GetVendorProviderStatus() VendorProviderStatusEnum {
	if o == nil || IsNil(o.VendorProviderStatus) {
		var ret VendorProviderStatusEnum
		return ret
	}
	return *o.VendorProviderStatus
}

// GetVendorProviderStatusOk returns a tuple with the VendorProviderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetVendorProviderStatusOk() (*VendorProviderStatusEnum, bool) {
	if o == nil || IsNil(o.VendorProviderStatus) {
		return nil, false
	}
	return o.VendorProviderStatus, true
}

// HasVendorProviderStatus returns a boolean if a field has been set.
func (o *VcenterInstance) HasVendorProviderStatus() bool {
	if o != nil && !IsNil(o.VendorProviderStatus) {
		return true
	}

	return false
}

// SetVendorProviderStatus gets a reference to the given VendorProviderStatusEnum and assigns it to the VendorProviderStatus field.
func (o *VcenterInstance) SetVendorProviderStatus(v VendorProviderStatusEnum) {
	o.VendorProviderStatus = &v
}

// GetVendorProviderStatusL10n returns the VendorProviderStatusL10n field value if set, zero value otherwise.
func (o *VcenterInstance) GetVendorProviderStatusL10n() string {
	if o == nil || IsNil(o.VendorProviderStatusL10n) {
		var ret string
		return ret
	}
	return *o.VendorProviderStatusL10n
}

// GetVendorProviderStatusL10nOk returns a tuple with the VendorProviderStatusL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetVendorProviderStatusL10nOk() (*string, bool) {
	if o == nil || IsNil(o.VendorProviderStatusL10n) {
		return nil, false
	}
	return o.VendorProviderStatusL10n, true
}

// HasVendorProviderStatusL10n returns a boolean if a field has been set.
func (o *VcenterInstance) HasVendorProviderStatusL10n() bool {
	if o != nil && !IsNil(o.VendorProviderStatusL10n) {
		return true
	}

	return false
}

// SetVendorProviderStatusL10n gets a reference to the given string and assigns it to the VendorProviderStatusL10n field.
func (o *VcenterInstance) SetVendorProviderStatusL10n(v string) {
	o.VendorProviderStatusL10n = &v
}

// GetVirtualMachines returns the VirtualMachines field value if set, zero value otherwise.
func (o *VcenterInstance) GetVirtualMachines() []VirtualMachineInstance {
	if o == nil || IsNil(o.VirtualMachines) {
		var ret []VirtualMachineInstance
		return ret
	}
	return o.VirtualMachines
}

// GetVirtualMachinesOk returns a tuple with the VirtualMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetVirtualMachinesOk() ([]VirtualMachineInstance, bool) {
	if o == nil || IsNil(o.VirtualMachines) {
		return nil, false
	}
	return o.VirtualMachines, true
}

// HasVirtualMachines returns a boolean if a field has been set.
func (o *VcenterInstance) HasVirtualMachines() bool {
	if o != nil && !IsNil(o.VirtualMachines) {
		return true
	}

	return false
}

// SetVirtualMachines gets a reference to the given []VirtualMachineInstance and assigns it to the VirtualMachines field.
func (o *VcenterInstance) SetVirtualMachines(v []VirtualMachineInstance) {
	o.VirtualMachines = v
}

// GetDatastores returns the Datastores field value if set, zero value otherwise.
func (o *VcenterInstance) GetDatastores() []DatastoreInstance {
	if o == nil || IsNil(o.Datastores) {
		var ret []DatastoreInstance
		return ret
	}
	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetDatastoresOk() ([]DatastoreInstance, bool) {
	if o == nil || IsNil(o.Datastores) {
		return nil, false
	}
	return o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *VcenterInstance) HasDatastores() bool {
	if o != nil && !IsNil(o.Datastores) {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []DatastoreInstance and assigns it to the Datastores field.
func (o *VcenterInstance) SetDatastores(v []DatastoreInstance) {
	o.Datastores = v
}

// GetVsphereHosts returns the VsphereHosts field value if set, zero value otherwise.
func (o *VcenterInstance) GetVsphereHosts() []VsphereHostInstance {
	if o == nil || IsNil(o.VsphereHosts) {
		var ret []VsphereHostInstance
		return ret
	}
	return o.VsphereHosts
}

// GetVsphereHostsOk returns a tuple with the VsphereHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterInstance) GetVsphereHostsOk() ([]VsphereHostInstance, bool) {
	if o == nil || IsNil(o.VsphereHosts) {
		return nil, false
	}
	return o.VsphereHosts, true
}

// HasVsphereHosts returns a boolean if a field has been set.
func (o *VcenterInstance) HasVsphereHosts() bool {
	if o != nil && !IsNil(o.VsphereHosts) {
		return true
	}

	return false
}

// SetVsphereHosts gets a reference to the given []VsphereHostInstance and assigns it to the VsphereHosts field.
func (o *VcenterInstance) SetVsphereHosts(v []VsphereHostInstance) {
	o.VsphereHosts = v
}

func (o VcenterInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VcenterInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InstanceUuid) {
		toSerialize["instance_uuid"] = o.InstanceUuid
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.IsVerifyServerCert) {
		toSerialize["is_verify_server_cert"] = o.IsVerifyServerCert
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VendorProviderStatus) {
		toSerialize["vendor_provider_status"] = o.VendorProviderStatus
	}
	if !IsNil(o.VendorProviderStatusL10n) {
		toSerialize["vendor_provider_status_l10n"] = o.VendorProviderStatusL10n
	}
	if !IsNil(o.VirtualMachines) {
		toSerialize["virtual_machines"] = o.VirtualMachines
	}
	if !IsNil(o.Datastores) {
		toSerialize["datastores"] = o.Datastores
	}
	if !IsNil(o.VsphereHosts) {
		toSerialize["vsphere_hosts"] = o.VsphereHosts
	}
	return toSerialize, nil
}

type NullableVcenterInstance struct {
	value *VcenterInstance
	isSet bool
}

func (v NullableVcenterInstance) Get() *VcenterInstance {
	return v.value
}

func (v *NullableVcenterInstance) Set(val *VcenterInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterInstance(val *VcenterInstance) *NullableVcenterInstance {
	return &NullableVcenterInstance{value: val, isSet: true}
}

func (v NullableVcenterInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


