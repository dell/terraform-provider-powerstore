/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// FileVirusCheckerOfflinePolicyEnum Describes the behavior when all checkers are offline: * Allow_Access - SMB clients will continue to have access during the virus checker outage. When at least one virus checker server becomes available then they will be used. * Stop_SMB_Access - SMB clients will lose access until at least one virus checker server becomes available. * Disable_Virus_Checker - This virus checker will be disabled (is_enabled set to false). It must be reenabled manually after restoring access to the virus checker servers.  Was added in version 4.0.0.0.
type FileVirusCheckerOfflinePolicyEnum string

// List of FileVirusCheckerOfflinePolicyEnum
const (
	FILEVIRUSCHECKEROFFLINEPOLICYENUM_ALLOW_ACCESS FileVirusCheckerOfflinePolicyEnum = "Allow_Access"
	FILEVIRUSCHECKEROFFLINEPOLICYENUM_STOP_SMB_ACCESS FileVirusCheckerOfflinePolicyEnum = "Stop_SMB_Access"
	FILEVIRUSCHECKEROFFLINEPOLICYENUM_DISABLE_VIRUS_CHECKER FileVirusCheckerOfflinePolicyEnum = "Disable_Virus_Checker"
)

// All allowed values of FileVirusCheckerOfflinePolicyEnum enum
var AllowedFileVirusCheckerOfflinePolicyEnumEnumValues = []FileVirusCheckerOfflinePolicyEnum{
	"Allow_Access",
	"Stop_SMB_Access",
	"Disable_Virus_Checker",
}

func (v *FileVirusCheckerOfflinePolicyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileVirusCheckerOfflinePolicyEnum(value)
	for _, existing := range AllowedFileVirusCheckerOfflinePolicyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileVirusCheckerOfflinePolicyEnum", value)
}

// NewFileVirusCheckerOfflinePolicyEnumFromValue returns a pointer to a valid FileVirusCheckerOfflinePolicyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileVirusCheckerOfflinePolicyEnumFromValue(v string) (*FileVirusCheckerOfflinePolicyEnum, error) {
	ev := FileVirusCheckerOfflinePolicyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileVirusCheckerOfflinePolicyEnum: valid values are %v", v, AllowedFileVirusCheckerOfflinePolicyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileVirusCheckerOfflinePolicyEnum) IsValid() bool {
	for _, existing := range AllowedFileVirusCheckerOfflinePolicyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileVirusCheckerOfflinePolicyEnum value
func (v FileVirusCheckerOfflinePolicyEnum) Ptr() *FileVirusCheckerOfflinePolicyEnum {
	return &v
}

type NullableFileVirusCheckerOfflinePolicyEnum struct {
	value *FileVirusCheckerOfflinePolicyEnum
	isSet bool
}

func (v NullableFileVirusCheckerOfflinePolicyEnum) Get() *FileVirusCheckerOfflinePolicyEnum {
	return v.value
}

func (v *NullableFileVirusCheckerOfflinePolicyEnum) Set(val *FileVirusCheckerOfflinePolicyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFileVirusCheckerOfflinePolicyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFileVirusCheckerOfflinePolicyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileVirusCheckerOfflinePolicyEnum(val *FileVirusCheckerOfflinePolicyEnum) *NullableFileVirusCheckerOfflinePolicyEnum {
	return &NullableFileVirusCheckerOfflinePolicyEnum{value: val, isSet: true}
}

func (v NullableFileVirusCheckerOfflinePolicyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileVirusCheckerOfflinePolicyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

