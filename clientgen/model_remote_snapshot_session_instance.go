/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the RemoteSnapshotSessionInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteSnapshotSessionInstance{}

// RemoteSnapshotSessionInstance Information about a remote snapshot session. Was added in version 3.5.0.0. This resource type has queriable associations from remote_system, volume, volume_group, remote_snapshot, snapshot_rule
type RemoteSnapshotSessionInstance struct {
	// Unique identifier of the remote snapshot session.
	Id *string `json:"id,omitempty"`
	// System-specified name of the remote snapshot session.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	SessionType *RemoteSnapshotSessionTypeEnum `json:"session_type,omitempty"`
	ResourceType *RemoteSnapshotResourceTypeEnum `json:"resource_type,omitempty"`
	State *RemoteSnapshotSessionStateEnum `json:"state,omitempty"`
	// Unique identifier of the remote system.
	RemoteSystemId *string `json:"remote_system_id,omitempty"`
	// ID of the volume to which this session belongs.
	VolumeId *string `json:"volume_id,omitempty"`
	// ID of the volume_group to which this session belongs.
	VolumeGroupId *string `json:"volume_group_id,omitempty"`
	// Unique identifier of snapshot generated by remote system. Not applicable for backup session.
	RemoteBackupIdentifier *string `json:"remote_backup_identifier,omitempty"`
	// ID of the volume to which this session belongs.
	RemoteSnapshotId *string `json:"remote_snapshot_id,omitempty"`
	// Filtering on the fields of this embedded resource is not supported.
	MemberDetails []MemberDetailsInstance `json:"member_details,omitempty"`
	// Date/time when backup/retrieve of snapshot began. Not applicable for instant_access session.
	StartTimestamp *time.Time `json:"start_timestamp,omitempty"`
	// Date/time when backup/retrieve of snapshot completed. Not applicable for instant_access session.
	EndTimestamp *time.Time `json:"end_timestamp,omitempty"`
	// When the session is in the In_Progress state, this value indicates the estimated time at which the data copy will complete. Before the session is in the In_Progress state, the value is null.
	EstimatedCompletionTimestamp *time.Time `json:"estimated_completion_timestamp,omitempty"`
	// When the session is in the In_Progress state, this value indicates the completion percent for the session. Before the session is in the In_Progress state, this value is 0.
	ProgressPercentage *int32 `json:"progress_percentage,omitempty"`
	// Average transfer rate of a data operation in bytes/sec over the whole copy period. Before and after the session is in the In_Progress state, this value is null.
	AverageTransferRate *int64 `json:"average_transfer_rate,omitempty"`
	// Current transfer rate of a data operation in bytes/sec. Before and after the session is in the In_Progress state, this value is null.
	CurrentTransferRate *int64 `json:"current_transfer_rate,omitempty"`
	// Id of the associated remote snapshot rule.
	RuleId *string `json:"rule_id,omitempty"`
	// For a volume backup type session, this is the id of the most recently protected local snapshot type volume. For a retrieve type session, this is the id of the local snapshot type volume to which the retrieve is copying. This is null for volume_group sessions.
	LocalVolumeSnapshotId *string `json:"local_volume_snapshot_id,omitempty"`
	// For a volume_group backup type session, this is the id of the most recently protected local snapshot type volume_group. For a retrieve type session, this is the id of the local snapshot type volume group to which the retrieve is copying. This is null for volume sessions.
	LocalVolumeGroupSnapshotId *string `json:"local_volume_group_snapshot_id,omitempty"`
	// Unique identifier of the corresponding session on the remote system.
	RemoteSessionId *string `json:"remote_session_id,omitempty"`
	// For backup type session, the timestamp of the most recent snapshot successfully copied to the remote system.
	LastBackupTimestamp *time.Time `json:"last_backup_timestamp,omitempty"`
	CreatorType *RemoteSnapshotCreatorTypeEnum `json:"creator_type,omitempty"`
	Error *ErrorInstance `json:"error,omitempty"`
	// Localized message string corresponding to session_type Was added in version 3.5.0.0.
	SessionTypeL10n *string `json:"session_type_l10n,omitempty"`
	// Localized message string corresponding to resource_type Was added in version 3.5.0.0.
	ResourceTypeL10n *string `json:"resource_type_l10n,omitempty"`
	// Localized message string corresponding to state Was added in version 3.5.0.0.
	StateL10n *string `json:"state_l10n,omitempty"`
	// Localized message string corresponding to creator_type Was added in version 3.5.0.0.
	CreatorTypeL10n *string `json:"creator_type_l10n,omitempty"`
	RemoteSystem *RemoteSystemInstance `json:"remote_system,omitempty"`
	Volume *VolumeInstance `json:"volume,omitempty"`
	VolumeGroup *VolumeGroupInstance `json:"volume_group,omitempty"`
	RemoteSnapshot *RemoteSnapshotInstance `json:"remote_snapshot,omitempty"`
	Rule *SnapshotRuleInstance `json:"rule,omitempty"`
	LocalVolumeSnapshot *VolumeInstance `json:"local_volume_snapshot,omitempty"`
	LocalVolumeGroupSnapshot *VolumeGroupInstance `json:"local_volume_group_snapshot,omitempty"`
}

// NewRemoteSnapshotSessionInstance instantiates a new RemoteSnapshotSessionInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSnapshotSessionInstance() *RemoteSnapshotSessionInstance {
	this := RemoteSnapshotSessionInstance{}
	return &this
}

// NewRemoteSnapshotSessionInstanceWithDefaults instantiates a new RemoteSnapshotSessionInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSnapshotSessionInstanceWithDefaults() *RemoteSnapshotSessionInstance {
	this := RemoteSnapshotSessionInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RemoteSnapshotSessionInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RemoteSnapshotSessionInstance) SetName(v string) {
	o.Name = &v
}

// GetSessionType returns the SessionType field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetSessionType() RemoteSnapshotSessionTypeEnum {
	if o == nil || IsNil(o.SessionType) {
		var ret RemoteSnapshotSessionTypeEnum
		return ret
	}
	return *o.SessionType
}

// GetSessionTypeOk returns a tuple with the SessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetSessionTypeOk() (*RemoteSnapshotSessionTypeEnum, bool) {
	if o == nil || IsNil(o.SessionType) {
		return nil, false
	}
	return o.SessionType, true
}

// HasSessionType returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasSessionType() bool {
	if o != nil && !IsNil(o.SessionType) {
		return true
	}

	return false
}

// SetSessionType gets a reference to the given RemoteSnapshotSessionTypeEnum and assigns it to the SessionType field.
func (o *RemoteSnapshotSessionInstance) SetSessionType(v RemoteSnapshotSessionTypeEnum) {
	o.SessionType = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetResourceType() RemoteSnapshotResourceTypeEnum {
	if o == nil || IsNil(o.ResourceType) {
		var ret RemoteSnapshotResourceTypeEnum
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetResourceTypeOk() (*RemoteSnapshotResourceTypeEnum, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given RemoteSnapshotResourceTypeEnum and assigns it to the ResourceType field.
func (o *RemoteSnapshotSessionInstance) SetResourceType(v RemoteSnapshotResourceTypeEnum) {
	o.ResourceType = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetState() RemoteSnapshotSessionStateEnum {
	if o == nil || IsNil(o.State) {
		var ret RemoteSnapshotSessionStateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetStateOk() (*RemoteSnapshotSessionStateEnum, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given RemoteSnapshotSessionStateEnum and assigns it to the State field.
func (o *RemoteSnapshotSessionInstance) SetState(v RemoteSnapshotSessionStateEnum) {
	o.State = &v
}

// GetRemoteSystemId returns the RemoteSystemId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRemoteSystemId() string {
	if o == nil || IsNil(o.RemoteSystemId) {
		var ret string
		return ret
	}
	return *o.RemoteSystemId
}

// GetRemoteSystemIdOk returns a tuple with the RemoteSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRemoteSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteSystemId) {
		return nil, false
	}
	return o.RemoteSystemId, true
}

// HasRemoteSystemId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRemoteSystemId() bool {
	if o != nil && !IsNil(o.RemoteSystemId) {
		return true
	}

	return false
}

// SetRemoteSystemId gets a reference to the given string and assigns it to the RemoteSystemId field.
func (o *RemoteSnapshotSessionInstance) SetRemoteSystemId(v string) {
	o.RemoteSystemId = &v
}

// GetVolumeId returns the VolumeId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetVolumeId() string {
	if o == nil || IsNil(o.VolumeId) {
		var ret string
		return ret
	}
	return *o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetVolumeIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeId) {
		return nil, false
	}
	return o.VolumeId, true
}

// HasVolumeId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasVolumeId() bool {
	if o != nil && !IsNil(o.VolumeId) {
		return true
	}

	return false
}

// SetVolumeId gets a reference to the given string and assigns it to the VolumeId field.
func (o *RemoteSnapshotSessionInstance) SetVolumeId(v string) {
	o.VolumeId = &v
}

// GetVolumeGroupId returns the VolumeGroupId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetVolumeGroupId() string {
	if o == nil || IsNil(o.VolumeGroupId) {
		var ret string
		return ret
	}
	return *o.VolumeGroupId
}

// GetVolumeGroupIdOk returns a tuple with the VolumeGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetVolumeGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeGroupId) {
		return nil, false
	}
	return o.VolumeGroupId, true
}

// HasVolumeGroupId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasVolumeGroupId() bool {
	if o != nil && !IsNil(o.VolumeGroupId) {
		return true
	}

	return false
}

// SetVolumeGroupId gets a reference to the given string and assigns it to the VolumeGroupId field.
func (o *RemoteSnapshotSessionInstance) SetVolumeGroupId(v string) {
	o.VolumeGroupId = &v
}

// GetRemoteBackupIdentifier returns the RemoteBackupIdentifier field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRemoteBackupIdentifier() string {
	if o == nil || IsNil(o.RemoteBackupIdentifier) {
		var ret string
		return ret
	}
	return *o.RemoteBackupIdentifier
}

// GetRemoteBackupIdentifierOk returns a tuple with the RemoteBackupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRemoteBackupIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteBackupIdentifier) {
		return nil, false
	}
	return o.RemoteBackupIdentifier, true
}

// HasRemoteBackupIdentifier returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRemoteBackupIdentifier() bool {
	if o != nil && !IsNil(o.RemoteBackupIdentifier) {
		return true
	}

	return false
}

// SetRemoteBackupIdentifier gets a reference to the given string and assigns it to the RemoteBackupIdentifier field.
func (o *RemoteSnapshotSessionInstance) SetRemoteBackupIdentifier(v string) {
	o.RemoteBackupIdentifier = &v
}

// GetRemoteSnapshotId returns the RemoteSnapshotId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRemoteSnapshotId() string {
	if o == nil || IsNil(o.RemoteSnapshotId) {
		var ret string
		return ret
	}
	return *o.RemoteSnapshotId
}

// GetRemoteSnapshotIdOk returns a tuple with the RemoteSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRemoteSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteSnapshotId) {
		return nil, false
	}
	return o.RemoteSnapshotId, true
}

// HasRemoteSnapshotId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRemoteSnapshotId() bool {
	if o != nil && !IsNil(o.RemoteSnapshotId) {
		return true
	}

	return false
}

// SetRemoteSnapshotId gets a reference to the given string and assigns it to the RemoteSnapshotId field.
func (o *RemoteSnapshotSessionInstance) SetRemoteSnapshotId(v string) {
	o.RemoteSnapshotId = &v
}

// GetMemberDetails returns the MemberDetails field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetMemberDetails() []MemberDetailsInstance {
	if o == nil || IsNil(o.MemberDetails) {
		var ret []MemberDetailsInstance
		return ret
	}
	return o.MemberDetails
}

// GetMemberDetailsOk returns a tuple with the MemberDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetMemberDetailsOk() ([]MemberDetailsInstance, bool) {
	if o == nil || IsNil(o.MemberDetails) {
		return nil, false
	}
	return o.MemberDetails, true
}

// HasMemberDetails returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasMemberDetails() bool {
	if o != nil && !IsNil(o.MemberDetails) {
		return true
	}

	return false
}

// SetMemberDetails gets a reference to the given []MemberDetailsInstance and assigns it to the MemberDetails field.
func (o *RemoteSnapshotSessionInstance) SetMemberDetails(v []MemberDetailsInstance) {
	o.MemberDetails = v
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetStartTimestamp() time.Time {
	if o == nil || IsNil(o.StartTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetStartTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTimestamp) {
		return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasStartTimestamp() bool {
	if o != nil && !IsNil(o.StartTimestamp) {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given time.Time and assigns it to the StartTimestamp field.
func (o *RemoteSnapshotSessionInstance) SetStartTimestamp(v time.Time) {
	o.StartTimestamp = &v
}

// GetEndTimestamp returns the EndTimestamp field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetEndTimestamp() time.Time {
	if o == nil || IsNil(o.EndTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetEndTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTimestamp) {
		return nil, false
	}
	return o.EndTimestamp, true
}

// HasEndTimestamp returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasEndTimestamp() bool {
	if o != nil && !IsNil(o.EndTimestamp) {
		return true
	}

	return false
}

// SetEndTimestamp gets a reference to the given time.Time and assigns it to the EndTimestamp field.
func (o *RemoteSnapshotSessionInstance) SetEndTimestamp(v time.Time) {
	o.EndTimestamp = &v
}

// GetEstimatedCompletionTimestamp returns the EstimatedCompletionTimestamp field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetEstimatedCompletionTimestamp() time.Time {
	if o == nil || IsNil(o.EstimatedCompletionTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.EstimatedCompletionTimestamp
}

// GetEstimatedCompletionTimestampOk returns a tuple with the EstimatedCompletionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetEstimatedCompletionTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EstimatedCompletionTimestamp) {
		return nil, false
	}
	return o.EstimatedCompletionTimestamp, true
}

// HasEstimatedCompletionTimestamp returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasEstimatedCompletionTimestamp() bool {
	if o != nil && !IsNil(o.EstimatedCompletionTimestamp) {
		return true
	}

	return false
}

// SetEstimatedCompletionTimestamp gets a reference to the given time.Time and assigns it to the EstimatedCompletionTimestamp field.
func (o *RemoteSnapshotSessionInstance) SetEstimatedCompletionTimestamp(v time.Time) {
	o.EstimatedCompletionTimestamp = &v
}

// GetProgressPercentage returns the ProgressPercentage field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetProgressPercentage() int32 {
	if o == nil || IsNil(o.ProgressPercentage) {
		var ret int32
		return ret
	}
	return *o.ProgressPercentage
}

// GetProgressPercentageOk returns a tuple with the ProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetProgressPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.ProgressPercentage) {
		return nil, false
	}
	return o.ProgressPercentage, true
}

// HasProgressPercentage returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasProgressPercentage() bool {
	if o != nil && !IsNil(o.ProgressPercentage) {
		return true
	}

	return false
}

// SetProgressPercentage gets a reference to the given int32 and assigns it to the ProgressPercentage field.
func (o *RemoteSnapshotSessionInstance) SetProgressPercentage(v int32) {
	o.ProgressPercentage = &v
}

// GetAverageTransferRate returns the AverageTransferRate field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetAverageTransferRate() int64 {
	if o == nil || IsNil(o.AverageTransferRate) {
		var ret int64
		return ret
	}
	return *o.AverageTransferRate
}

// GetAverageTransferRateOk returns a tuple with the AverageTransferRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetAverageTransferRateOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageTransferRate) {
		return nil, false
	}
	return o.AverageTransferRate, true
}

// HasAverageTransferRate returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasAverageTransferRate() bool {
	if o != nil && !IsNil(o.AverageTransferRate) {
		return true
	}

	return false
}

// SetAverageTransferRate gets a reference to the given int64 and assigns it to the AverageTransferRate field.
func (o *RemoteSnapshotSessionInstance) SetAverageTransferRate(v int64) {
	o.AverageTransferRate = &v
}

// GetCurrentTransferRate returns the CurrentTransferRate field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetCurrentTransferRate() int64 {
	if o == nil || IsNil(o.CurrentTransferRate) {
		var ret int64
		return ret
	}
	return *o.CurrentTransferRate
}

// GetCurrentTransferRateOk returns a tuple with the CurrentTransferRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetCurrentTransferRateOk() (*int64, bool) {
	if o == nil || IsNil(o.CurrentTransferRate) {
		return nil, false
	}
	return o.CurrentTransferRate, true
}

// HasCurrentTransferRate returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasCurrentTransferRate() bool {
	if o != nil && !IsNil(o.CurrentTransferRate) {
		return true
	}

	return false
}

// SetCurrentTransferRate gets a reference to the given int64 and assigns it to the CurrentTransferRate field.
func (o *RemoteSnapshotSessionInstance) SetCurrentTransferRate(v int64) {
	o.CurrentTransferRate = &v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *RemoteSnapshotSessionInstance) SetRuleId(v string) {
	o.RuleId = &v
}

// GetLocalVolumeSnapshotId returns the LocalVolumeSnapshotId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeSnapshotId() string {
	if o == nil || IsNil(o.LocalVolumeSnapshotId) {
		var ret string
		return ret
	}
	return *o.LocalVolumeSnapshotId
}

// GetLocalVolumeSnapshotIdOk returns a tuple with the LocalVolumeSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalVolumeSnapshotId) {
		return nil, false
	}
	return o.LocalVolumeSnapshotId, true
}

// HasLocalVolumeSnapshotId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasLocalVolumeSnapshotId() bool {
	if o != nil && !IsNil(o.LocalVolumeSnapshotId) {
		return true
	}

	return false
}

// SetLocalVolumeSnapshotId gets a reference to the given string and assigns it to the LocalVolumeSnapshotId field.
func (o *RemoteSnapshotSessionInstance) SetLocalVolumeSnapshotId(v string) {
	o.LocalVolumeSnapshotId = &v
}

// GetLocalVolumeGroupSnapshotId returns the LocalVolumeGroupSnapshotId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeGroupSnapshotId() string {
	if o == nil || IsNil(o.LocalVolumeGroupSnapshotId) {
		var ret string
		return ret
	}
	return *o.LocalVolumeGroupSnapshotId
}

// GetLocalVolumeGroupSnapshotIdOk returns a tuple with the LocalVolumeGroupSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeGroupSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalVolumeGroupSnapshotId) {
		return nil, false
	}
	return o.LocalVolumeGroupSnapshotId, true
}

// HasLocalVolumeGroupSnapshotId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasLocalVolumeGroupSnapshotId() bool {
	if o != nil && !IsNil(o.LocalVolumeGroupSnapshotId) {
		return true
	}

	return false
}

// SetLocalVolumeGroupSnapshotId gets a reference to the given string and assigns it to the LocalVolumeGroupSnapshotId field.
func (o *RemoteSnapshotSessionInstance) SetLocalVolumeGroupSnapshotId(v string) {
	o.LocalVolumeGroupSnapshotId = &v
}

// GetRemoteSessionId returns the RemoteSessionId field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRemoteSessionId() string {
	if o == nil || IsNil(o.RemoteSessionId) {
		var ret string
		return ret
	}
	return *o.RemoteSessionId
}

// GetRemoteSessionIdOk returns a tuple with the RemoteSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRemoteSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteSessionId) {
		return nil, false
	}
	return o.RemoteSessionId, true
}

// HasRemoteSessionId returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRemoteSessionId() bool {
	if o != nil && !IsNil(o.RemoteSessionId) {
		return true
	}

	return false
}

// SetRemoteSessionId gets a reference to the given string and assigns it to the RemoteSessionId field.
func (o *RemoteSnapshotSessionInstance) SetRemoteSessionId(v string) {
	o.RemoteSessionId = &v
}

// GetLastBackupTimestamp returns the LastBackupTimestamp field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetLastBackupTimestamp() time.Time {
	if o == nil || IsNil(o.LastBackupTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastBackupTimestamp
}

// GetLastBackupTimestampOk returns a tuple with the LastBackupTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetLastBackupTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastBackupTimestamp) {
		return nil, false
	}
	return o.LastBackupTimestamp, true
}

// HasLastBackupTimestamp returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasLastBackupTimestamp() bool {
	if o != nil && !IsNil(o.LastBackupTimestamp) {
		return true
	}

	return false
}

// SetLastBackupTimestamp gets a reference to the given time.Time and assigns it to the LastBackupTimestamp field.
func (o *RemoteSnapshotSessionInstance) SetLastBackupTimestamp(v time.Time) {
	o.LastBackupTimestamp = &v
}

// GetCreatorType returns the CreatorType field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetCreatorType() RemoteSnapshotCreatorTypeEnum {
	if o == nil || IsNil(o.CreatorType) {
		var ret RemoteSnapshotCreatorTypeEnum
		return ret
	}
	return *o.CreatorType
}

// GetCreatorTypeOk returns a tuple with the CreatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetCreatorTypeOk() (*RemoteSnapshotCreatorTypeEnum, bool) {
	if o == nil || IsNil(o.CreatorType) {
		return nil, false
	}
	return o.CreatorType, true
}

// HasCreatorType returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasCreatorType() bool {
	if o != nil && !IsNil(o.CreatorType) {
		return true
	}

	return false
}

// SetCreatorType gets a reference to the given RemoteSnapshotCreatorTypeEnum and assigns it to the CreatorType field.
func (o *RemoteSnapshotSessionInstance) SetCreatorType(v RemoteSnapshotCreatorTypeEnum) {
	o.CreatorType = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetError() ErrorInstance {
	if o == nil || IsNil(o.Error) {
		var ret ErrorInstance
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetErrorOk() (*ErrorInstance, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorInstance and assigns it to the Error field.
func (o *RemoteSnapshotSessionInstance) SetError(v ErrorInstance) {
	o.Error = &v
}

// GetSessionTypeL10n returns the SessionTypeL10n field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetSessionTypeL10n() string {
	if o == nil || IsNil(o.SessionTypeL10n) {
		var ret string
		return ret
	}
	return *o.SessionTypeL10n
}

// GetSessionTypeL10nOk returns a tuple with the SessionTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetSessionTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.SessionTypeL10n) {
		return nil, false
	}
	return o.SessionTypeL10n, true
}

// HasSessionTypeL10n returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasSessionTypeL10n() bool {
	if o != nil && !IsNil(o.SessionTypeL10n) {
		return true
	}

	return false
}

// SetSessionTypeL10n gets a reference to the given string and assigns it to the SessionTypeL10n field.
func (o *RemoteSnapshotSessionInstance) SetSessionTypeL10n(v string) {
	o.SessionTypeL10n = &v
}

// GetResourceTypeL10n returns the ResourceTypeL10n field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetResourceTypeL10n() string {
	if o == nil || IsNil(o.ResourceTypeL10n) {
		var ret string
		return ret
	}
	return *o.ResourceTypeL10n
}

// GetResourceTypeL10nOk returns a tuple with the ResourceTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetResourceTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceTypeL10n) {
		return nil, false
	}
	return o.ResourceTypeL10n, true
}

// HasResourceTypeL10n returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasResourceTypeL10n() bool {
	if o != nil && !IsNil(o.ResourceTypeL10n) {
		return true
	}

	return false
}

// SetResourceTypeL10n gets a reference to the given string and assigns it to the ResourceTypeL10n field.
func (o *RemoteSnapshotSessionInstance) SetResourceTypeL10n(v string) {
	o.ResourceTypeL10n = &v
}

// GetStateL10n returns the StateL10n field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetStateL10n() string {
	if o == nil || IsNil(o.StateL10n) {
		var ret string
		return ret
	}
	return *o.StateL10n
}

// GetStateL10nOk returns a tuple with the StateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StateL10n) {
		return nil, false
	}
	return o.StateL10n, true
}

// HasStateL10n returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasStateL10n() bool {
	if o != nil && !IsNil(o.StateL10n) {
		return true
	}

	return false
}

// SetStateL10n gets a reference to the given string and assigns it to the StateL10n field.
func (o *RemoteSnapshotSessionInstance) SetStateL10n(v string) {
	o.StateL10n = &v
}

// GetCreatorTypeL10n returns the CreatorTypeL10n field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetCreatorTypeL10n() string {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		var ret string
		return ret
	}
	return *o.CreatorTypeL10n
}

// GetCreatorTypeL10nOk returns a tuple with the CreatorTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetCreatorTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorTypeL10n) {
		return nil, false
	}
	return o.CreatorTypeL10n, true
}

// HasCreatorTypeL10n returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasCreatorTypeL10n() bool {
	if o != nil && !IsNil(o.CreatorTypeL10n) {
		return true
	}

	return false
}

// SetCreatorTypeL10n gets a reference to the given string and assigns it to the CreatorTypeL10n field.
func (o *RemoteSnapshotSessionInstance) SetCreatorTypeL10n(v string) {
	o.CreatorTypeL10n = &v
}

// GetRemoteSystem returns the RemoteSystem field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRemoteSystem() RemoteSystemInstance {
	if o == nil || IsNil(o.RemoteSystem) {
		var ret RemoteSystemInstance
		return ret
	}
	return *o.RemoteSystem
}

// GetRemoteSystemOk returns a tuple with the RemoteSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRemoteSystemOk() (*RemoteSystemInstance, bool) {
	if o == nil || IsNil(o.RemoteSystem) {
		return nil, false
	}
	return o.RemoteSystem, true
}

// HasRemoteSystem returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRemoteSystem() bool {
	if o != nil && !IsNil(o.RemoteSystem) {
		return true
	}

	return false
}

// SetRemoteSystem gets a reference to the given RemoteSystemInstance and assigns it to the RemoteSystem field.
func (o *RemoteSnapshotSessionInstance) SetRemoteSystem(v RemoteSystemInstance) {
	o.RemoteSystem = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetVolume() VolumeInstance {
	if o == nil || IsNil(o.Volume) {
		var ret VolumeInstance
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetVolumeOk() (*VolumeInstance, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given VolumeInstance and assigns it to the Volume field.
func (o *RemoteSnapshotSessionInstance) SetVolume(v VolumeInstance) {
	o.Volume = &v
}

// GetVolumeGroup returns the VolumeGroup field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetVolumeGroup() VolumeGroupInstance {
	if o == nil || IsNil(o.VolumeGroup) {
		var ret VolumeGroupInstance
		return ret
	}
	return *o.VolumeGroup
}

// GetVolumeGroupOk returns a tuple with the VolumeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetVolumeGroupOk() (*VolumeGroupInstance, bool) {
	if o == nil || IsNil(o.VolumeGroup) {
		return nil, false
	}
	return o.VolumeGroup, true
}

// HasVolumeGroup returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasVolumeGroup() bool {
	if o != nil && !IsNil(o.VolumeGroup) {
		return true
	}

	return false
}

// SetVolumeGroup gets a reference to the given VolumeGroupInstance and assigns it to the VolumeGroup field.
func (o *RemoteSnapshotSessionInstance) SetVolumeGroup(v VolumeGroupInstance) {
	o.VolumeGroup = &v
}

// GetRemoteSnapshot returns the RemoteSnapshot field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRemoteSnapshot() RemoteSnapshotInstance {
	if o == nil || IsNil(o.RemoteSnapshot) {
		var ret RemoteSnapshotInstance
		return ret
	}
	return *o.RemoteSnapshot
}

// GetRemoteSnapshotOk returns a tuple with the RemoteSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRemoteSnapshotOk() (*RemoteSnapshotInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshot) {
		return nil, false
	}
	return o.RemoteSnapshot, true
}

// HasRemoteSnapshot returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRemoteSnapshot() bool {
	if o != nil && !IsNil(o.RemoteSnapshot) {
		return true
	}

	return false
}

// SetRemoteSnapshot gets a reference to the given RemoteSnapshotInstance and assigns it to the RemoteSnapshot field.
func (o *RemoteSnapshotSessionInstance) SetRemoteSnapshot(v RemoteSnapshotInstance) {
	o.RemoteSnapshot = &v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetRule() SnapshotRuleInstance {
	if o == nil || IsNil(o.Rule) {
		var ret SnapshotRuleInstance
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetRuleOk() (*SnapshotRuleInstance, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given SnapshotRuleInstance and assigns it to the Rule field.
func (o *RemoteSnapshotSessionInstance) SetRule(v SnapshotRuleInstance) {
	o.Rule = &v
}

// GetLocalVolumeSnapshot returns the LocalVolumeSnapshot field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeSnapshot() VolumeInstance {
	if o == nil || IsNil(o.LocalVolumeSnapshot) {
		var ret VolumeInstance
		return ret
	}
	return *o.LocalVolumeSnapshot
}

// GetLocalVolumeSnapshotOk returns a tuple with the LocalVolumeSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeSnapshotOk() (*VolumeInstance, bool) {
	if o == nil || IsNil(o.LocalVolumeSnapshot) {
		return nil, false
	}
	return o.LocalVolumeSnapshot, true
}

// HasLocalVolumeSnapshot returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasLocalVolumeSnapshot() bool {
	if o != nil && !IsNil(o.LocalVolumeSnapshot) {
		return true
	}

	return false
}

// SetLocalVolumeSnapshot gets a reference to the given VolumeInstance and assigns it to the LocalVolumeSnapshot field.
func (o *RemoteSnapshotSessionInstance) SetLocalVolumeSnapshot(v VolumeInstance) {
	o.LocalVolumeSnapshot = &v
}

// GetLocalVolumeGroupSnapshot returns the LocalVolumeGroupSnapshot field value if set, zero value otherwise.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeGroupSnapshot() VolumeGroupInstance {
	if o == nil || IsNil(o.LocalVolumeGroupSnapshot) {
		var ret VolumeGroupInstance
		return ret
	}
	return *o.LocalVolumeGroupSnapshot
}

// GetLocalVolumeGroupSnapshotOk returns a tuple with the LocalVolumeGroupSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSnapshotSessionInstance) GetLocalVolumeGroupSnapshotOk() (*VolumeGroupInstance, bool) {
	if o == nil || IsNil(o.LocalVolumeGroupSnapshot) {
		return nil, false
	}
	return o.LocalVolumeGroupSnapshot, true
}

// HasLocalVolumeGroupSnapshot returns a boolean if a field has been set.
func (o *RemoteSnapshotSessionInstance) HasLocalVolumeGroupSnapshot() bool {
	if o != nil && !IsNil(o.LocalVolumeGroupSnapshot) {
		return true
	}

	return false
}

// SetLocalVolumeGroupSnapshot gets a reference to the given VolumeGroupInstance and assigns it to the LocalVolumeGroupSnapshot field.
func (o *RemoteSnapshotSessionInstance) SetLocalVolumeGroupSnapshot(v VolumeGroupInstance) {
	o.LocalVolumeGroupSnapshot = &v
}

func (o RemoteSnapshotSessionInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteSnapshotSessionInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SessionType) {
		toSerialize["session_type"] = o.SessionType
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.RemoteSystemId) {
		toSerialize["remote_system_id"] = o.RemoteSystemId
	}
	if !IsNil(o.VolumeId) {
		toSerialize["volume_id"] = o.VolumeId
	}
	if !IsNil(o.VolumeGroupId) {
		toSerialize["volume_group_id"] = o.VolumeGroupId
	}
	if !IsNil(o.RemoteBackupIdentifier) {
		toSerialize["remote_backup_identifier"] = o.RemoteBackupIdentifier
	}
	if !IsNil(o.RemoteSnapshotId) {
		toSerialize["remote_snapshot_id"] = o.RemoteSnapshotId
	}
	if !IsNil(o.MemberDetails) {
		toSerialize["member_details"] = o.MemberDetails
	}
	if !IsNil(o.StartTimestamp) {
		toSerialize["start_timestamp"] = o.StartTimestamp
	}
	if !IsNil(o.EndTimestamp) {
		toSerialize["end_timestamp"] = o.EndTimestamp
	}
	if !IsNil(o.EstimatedCompletionTimestamp) {
		toSerialize["estimated_completion_timestamp"] = o.EstimatedCompletionTimestamp
	}
	if !IsNil(o.ProgressPercentage) {
		toSerialize["progress_percentage"] = o.ProgressPercentage
	}
	if !IsNil(o.AverageTransferRate) {
		toSerialize["average_transfer_rate"] = o.AverageTransferRate
	}
	if !IsNil(o.CurrentTransferRate) {
		toSerialize["current_transfer_rate"] = o.CurrentTransferRate
	}
	if !IsNil(o.RuleId) {
		toSerialize["rule_id"] = o.RuleId
	}
	if !IsNil(o.LocalVolumeSnapshotId) {
		toSerialize["local_volume_snapshot_id"] = o.LocalVolumeSnapshotId
	}
	if !IsNil(o.LocalVolumeGroupSnapshotId) {
		toSerialize["local_volume_group_snapshot_id"] = o.LocalVolumeGroupSnapshotId
	}
	if !IsNil(o.RemoteSessionId) {
		toSerialize["remote_session_id"] = o.RemoteSessionId
	}
	if !IsNil(o.LastBackupTimestamp) {
		toSerialize["last_backup_timestamp"] = o.LastBackupTimestamp
	}
	if !IsNil(o.CreatorType) {
		toSerialize["creator_type"] = o.CreatorType
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.SessionTypeL10n) {
		toSerialize["session_type_l10n"] = o.SessionTypeL10n
	}
	if !IsNil(o.ResourceTypeL10n) {
		toSerialize["resource_type_l10n"] = o.ResourceTypeL10n
	}
	if !IsNil(o.StateL10n) {
		toSerialize["state_l10n"] = o.StateL10n
	}
	if !IsNil(o.CreatorTypeL10n) {
		toSerialize["creator_type_l10n"] = o.CreatorTypeL10n
	}
	if !IsNil(o.RemoteSystem) {
		toSerialize["remote_system"] = o.RemoteSystem
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	if !IsNil(o.VolumeGroup) {
		toSerialize["volume_group"] = o.VolumeGroup
	}
	if !IsNil(o.RemoteSnapshot) {
		toSerialize["remote_snapshot"] = o.RemoteSnapshot
	}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.LocalVolumeSnapshot) {
		toSerialize["local_volume_snapshot"] = o.LocalVolumeSnapshot
	}
	if !IsNil(o.LocalVolumeGroupSnapshot) {
		toSerialize["local_volume_group_snapshot"] = o.LocalVolumeGroupSnapshot
	}
	return toSerialize, nil
}

type NullableRemoteSnapshotSessionInstance struct {
	value *RemoteSnapshotSessionInstance
	isSet bool
}

func (v NullableRemoteSnapshotSessionInstance) Get() *RemoteSnapshotSessionInstance {
	return v.value
}

func (v *NullableRemoteSnapshotSessionInstance) Set(val *RemoteSnapshotSessionInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSnapshotSessionInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSnapshotSessionInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSnapshotSessionInstance(val *RemoteSnapshotSessionInstance) *NullableRemoteSnapshotSessionInstance {
	return &NullableRemoteSnapshotSessionInstance{value: val, isSet: true}
}

func (v NullableRemoteSnapshotSessionInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSnapshotSessionInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


