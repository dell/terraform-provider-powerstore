/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the BondInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BondInstance{}

// BondInstance Properties of a bond. Values was added in 2.0.0.0: type, description, partner_id. Values was added in 3.0.0.0: status. This resource type has queriable associations from bond, fsn, ip_port, eth_port
type BondInstance struct {
	// Unique identifier of the bond.
	Id *string `json:"id,omitempty"`
	// Bond name.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Identifier of the bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.  Was added in version 2.0.0.0.
	PartnerId *string `json:"partner_id,omitempty"`
	// Identifier of the associated fail-safe network, or null if the bond is not in an FSN. Was added in version 3.5.0.0.
	FsnId *string `json:"fsn_id,omitempty"`
	// Indicates whether the bond's link is up. Values are: * true - Link is up. * false - Link is down. 
	IsLinkUp *bool `json:"is_link_up,omitempty"`
	Status *BondStatusEnum `json:"status,omitempty"`
	// Maximum Transmission Unit (MTU) packet size of the bond, in bytes.
	Mtu *int32 `json:"mtu,omitempty"`
	Mode *BondingModeEnum `json:"mode,omitempty"`
	Type *BondingTypeEnum `json:"type,omitempty"`
	// User supplied description of the bond.
	Description *string `json:"description,omitempty"`
	// Localized message string corresponding to status Was added in version 3.0.0.0.
	StatusL10n *string `json:"status_l10n,omitempty"`
	// Localized message string corresponding to mode
	ModeL10n *string `json:"mode_l10n,omitempty"`
	// Localized message string corresponding to type Was added in version 2.0.0.0.
	TypeL10n *string `json:"type_l10n,omitempty"`
	// This is the inverse of the resource type ip_port association.
	IpPorts []IpPortInstance `json:"ip_ports,omitempty"`
	Partner *BondInstance `json:"partner,omitempty"`
	Fsn *FsnInstance `json:"fsn,omitempty"`
	// This is the inverse of the resource type eth_port association.
	EthPorts []EthPortInstance `json:"eth_ports,omitempty"`
}

// NewBondInstance instantiates a new BondInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondInstance() *BondInstance {
	this := BondInstance{}
	return &this
}

// NewBondInstanceWithDefaults instantiates a new BondInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondInstanceWithDefaults() *BondInstance {
	this := BondInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BondInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BondInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BondInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BondInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BondInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BondInstance) SetName(v string) {
	o.Name = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *BondInstance) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *BondInstance) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *BondInstance) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetFsnId returns the FsnId field value if set, zero value otherwise.
func (o *BondInstance) GetFsnId() string {
	if o == nil || IsNil(o.FsnId) {
		var ret string
		return ret
	}
	return *o.FsnId
}

// GetFsnIdOk returns a tuple with the FsnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetFsnIdOk() (*string, bool) {
	if o == nil || IsNil(o.FsnId) {
		return nil, false
	}
	return o.FsnId, true
}

// HasFsnId returns a boolean if a field has been set.
func (o *BondInstance) HasFsnId() bool {
	if o != nil && !IsNil(o.FsnId) {
		return true
	}

	return false
}

// SetFsnId gets a reference to the given string and assigns it to the FsnId field.
func (o *BondInstance) SetFsnId(v string) {
	o.FsnId = &v
}

// GetIsLinkUp returns the IsLinkUp field value if set, zero value otherwise.
func (o *BondInstance) GetIsLinkUp() bool {
	if o == nil || IsNil(o.IsLinkUp) {
		var ret bool
		return ret
	}
	return *o.IsLinkUp
}

// GetIsLinkUpOk returns a tuple with the IsLinkUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetIsLinkUpOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLinkUp) {
		return nil, false
	}
	return o.IsLinkUp, true
}

// HasIsLinkUp returns a boolean if a field has been set.
func (o *BondInstance) HasIsLinkUp() bool {
	if o != nil && !IsNil(o.IsLinkUp) {
		return true
	}

	return false
}

// SetIsLinkUp gets a reference to the given bool and assigns it to the IsLinkUp field.
func (o *BondInstance) SetIsLinkUp(v bool) {
	o.IsLinkUp = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BondInstance) GetStatus() BondStatusEnum {
	if o == nil || IsNil(o.Status) {
		var ret BondStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetStatusOk() (*BondStatusEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BondInstance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given BondStatusEnum and assigns it to the Status field.
func (o *BondInstance) SetStatus(v BondStatusEnum) {
	o.Status = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *BondInstance) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *BondInstance) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *BondInstance) SetMtu(v int32) {
	o.Mtu = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *BondInstance) GetMode() BondingModeEnum {
	if o == nil || IsNil(o.Mode) {
		var ret BondingModeEnum
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetModeOk() (*BondingModeEnum, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *BondInstance) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given BondingModeEnum and assigns it to the Mode field.
func (o *BondInstance) SetMode(v BondingModeEnum) {
	o.Mode = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BondInstance) GetType() BondingTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret BondingTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetTypeOk() (*BondingTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BondInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BondingTypeEnum and assigns it to the Type field.
func (o *BondInstance) SetType(v BondingTypeEnum) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BondInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BondInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BondInstance) SetDescription(v string) {
	o.Description = &v
}

// GetStatusL10n returns the StatusL10n field value if set, zero value otherwise.
func (o *BondInstance) GetStatusL10n() string {
	if o == nil || IsNil(o.StatusL10n) {
		var ret string
		return ret
	}
	return *o.StatusL10n
}

// GetStatusL10nOk returns a tuple with the StatusL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetStatusL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StatusL10n) {
		return nil, false
	}
	return o.StatusL10n, true
}

// HasStatusL10n returns a boolean if a field has been set.
func (o *BondInstance) HasStatusL10n() bool {
	if o != nil && !IsNil(o.StatusL10n) {
		return true
	}

	return false
}

// SetStatusL10n gets a reference to the given string and assigns it to the StatusL10n field.
func (o *BondInstance) SetStatusL10n(v string) {
	o.StatusL10n = &v
}

// GetModeL10n returns the ModeL10n field value if set, zero value otherwise.
func (o *BondInstance) GetModeL10n() string {
	if o == nil || IsNil(o.ModeL10n) {
		var ret string
		return ret
	}
	return *o.ModeL10n
}

// GetModeL10nOk returns a tuple with the ModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ModeL10n) {
		return nil, false
	}
	return o.ModeL10n, true
}

// HasModeL10n returns a boolean if a field has been set.
func (o *BondInstance) HasModeL10n() bool {
	if o != nil && !IsNil(o.ModeL10n) {
		return true
	}

	return false
}

// SetModeL10n gets a reference to the given string and assigns it to the ModeL10n field.
func (o *BondInstance) SetModeL10n(v string) {
	o.ModeL10n = &v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *BondInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *BondInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *BondInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetIpPorts returns the IpPorts field value if set, zero value otherwise.
func (o *BondInstance) GetIpPorts() []IpPortInstance {
	if o == nil || IsNil(o.IpPorts) {
		var ret []IpPortInstance
		return ret
	}
	return o.IpPorts
}

// GetIpPortsOk returns a tuple with the IpPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetIpPortsOk() ([]IpPortInstance, bool) {
	if o == nil || IsNil(o.IpPorts) {
		return nil, false
	}
	return o.IpPorts, true
}

// HasIpPorts returns a boolean if a field has been set.
func (o *BondInstance) HasIpPorts() bool {
	if o != nil && !IsNil(o.IpPorts) {
		return true
	}

	return false
}

// SetIpPorts gets a reference to the given []IpPortInstance and assigns it to the IpPorts field.
func (o *BondInstance) SetIpPorts(v []IpPortInstance) {
	o.IpPorts = v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *BondInstance) GetPartner() BondInstance {
	if o == nil || IsNil(o.Partner) {
		var ret BondInstance
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetPartnerOk() (*BondInstance, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *BondInstance) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given BondInstance and assigns it to the Partner field.
func (o *BondInstance) SetPartner(v BondInstance) {
	o.Partner = &v
}

// GetFsn returns the Fsn field value if set, zero value otherwise.
func (o *BondInstance) GetFsn() FsnInstance {
	if o == nil || IsNil(o.Fsn) {
		var ret FsnInstance
		return ret
	}
	return *o.Fsn
}

// GetFsnOk returns a tuple with the Fsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetFsnOk() (*FsnInstance, bool) {
	if o == nil || IsNil(o.Fsn) {
		return nil, false
	}
	return o.Fsn, true
}

// HasFsn returns a boolean if a field has been set.
func (o *BondInstance) HasFsn() bool {
	if o != nil && !IsNil(o.Fsn) {
		return true
	}

	return false
}

// SetFsn gets a reference to the given FsnInstance and assigns it to the Fsn field.
func (o *BondInstance) SetFsn(v FsnInstance) {
	o.Fsn = &v
}

// GetEthPorts returns the EthPorts field value if set, zero value otherwise.
func (o *BondInstance) GetEthPorts() []EthPortInstance {
	if o == nil || IsNil(o.EthPorts) {
		var ret []EthPortInstance
		return ret
	}
	return o.EthPorts
}

// GetEthPortsOk returns a tuple with the EthPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInstance) GetEthPortsOk() ([]EthPortInstance, bool) {
	if o == nil || IsNil(o.EthPorts) {
		return nil, false
	}
	return o.EthPorts, true
}

// HasEthPorts returns a boolean if a field has been set.
func (o *BondInstance) HasEthPorts() bool {
	if o != nil && !IsNil(o.EthPorts) {
		return true
	}

	return false
}

// SetEthPorts gets a reference to the given []EthPortInstance and assigns it to the EthPorts field.
func (o *BondInstance) SetEthPorts(v []EthPortInstance) {
	o.EthPorts = v
}

func (o BondInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BondInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partner_id"] = o.PartnerId
	}
	if !IsNil(o.FsnId) {
		toSerialize["fsn_id"] = o.FsnId
	}
	if !IsNil(o.IsLinkUp) {
		toSerialize["is_link_up"] = o.IsLinkUp
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.StatusL10n) {
		toSerialize["status_l10n"] = o.StatusL10n
	}
	if !IsNil(o.ModeL10n) {
		toSerialize["mode_l10n"] = o.ModeL10n
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.IpPorts) {
		toSerialize["ip_ports"] = o.IpPorts
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.Fsn) {
		toSerialize["fsn"] = o.Fsn
	}
	if !IsNil(o.EthPorts) {
		toSerialize["eth_ports"] = o.EthPorts
	}
	return toSerialize, nil
}

type NullableBondInstance struct {
	value *BondInstance
	isSet bool
}

func (v NullableBondInstance) Get() *BondInstance {
	return v.value
}

func (v *NullableBondInstance) Set(val *BondInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableBondInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableBondInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondInstance(val *BondInstance) *NullableBondInstance {
	return &NullableBondInstance{value: val, isSet: true}
}

func (v NullableBondInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


