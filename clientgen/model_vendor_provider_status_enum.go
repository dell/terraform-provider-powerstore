/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// VendorProviderStatusEnum General status of the VASA vendor provider in vCenter. * Not_Registered - The provider is not registered with vCenter. * Offline - vCenter cannot connect with the provider. * Online - vCenter is communicating with the provider. * Unavailable - VASA provider status can't be determined due to lost connection to vCenter.  Was added in version 2.0.0.0. Values was added in 3.5.0.0: Unavailable.
type VendorProviderStatusEnum string

// List of VendorProviderStatusEnum
const (
	VENDORPROVIDERSTATUSENUM_NOT_REGISTERED VendorProviderStatusEnum = "Not_Registered"
	VENDORPROVIDERSTATUSENUM_OFFLINE VendorProviderStatusEnum = "Offline"
	VENDORPROVIDERSTATUSENUM_ONLINE VendorProviderStatusEnum = "Online"
	VENDORPROVIDERSTATUSENUM_UNAVAILABLE VendorProviderStatusEnum = "Unavailable"
)

// All allowed values of VendorProviderStatusEnum enum
var AllowedVendorProviderStatusEnumEnumValues = []VendorProviderStatusEnum{
	"Not_Registered",
	"Offline",
	"Online",
	"Unavailable",
}

func (v *VendorProviderStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VendorProviderStatusEnum(value)
	for _, existing := range AllowedVendorProviderStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VendorProviderStatusEnum", value)
}

// NewVendorProviderStatusEnumFromValue returns a pointer to a valid VendorProviderStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVendorProviderStatusEnumFromValue(v string) (*VendorProviderStatusEnum, error) {
	ev := VendorProviderStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VendorProviderStatusEnum: valid values are %v", v, AllowedVendorProviderStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VendorProviderStatusEnum) IsValid() bool {
	for _, existing := range AllowedVendorProviderStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VendorProviderStatusEnum value
func (v VendorProviderStatusEnum) Ptr() *VendorProviderStatusEnum {
	return &v
}

type NullableVendorProviderStatusEnum struct {
	value *VendorProviderStatusEnum
	isSet bool
}

func (v NullableVendorProviderStatusEnum) Get() *VendorProviderStatusEnum {
	return v.value
}

func (v *NullableVendorProviderStatusEnum) Set(val *VendorProviderStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableVendorProviderStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableVendorProviderStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVendorProviderStatusEnum(val *VendorProviderStatusEnum) *NullableVendorProviderStatusEnum {
	return &NullableVendorProviderStatusEnum{value: val, isSet: true}
}

func (v NullableVendorProviderStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVendorProviderStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

