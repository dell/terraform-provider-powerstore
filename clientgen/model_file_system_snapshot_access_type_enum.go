/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// FileSystemSnapshotAccessTypeEnum Indicates whether the snapshot directory or protocol access is granted to the file system snapshot. * Snapshot- Snapshot access is via the .snapshot folder in the file system. * Protocol - Protocol access is via normal file shares. Protocol access is not provided by default - the NFS and/or SMB share must be created explicitly for the snapshot. 
type FileSystemSnapshotAccessTypeEnum string

// List of FileSystemSnapshotAccessTypeEnum
const (
	FILESYSTEMSNAPSHOTACCESSTYPEENUM_SNAPSHOT FileSystemSnapshotAccessTypeEnum = "Snapshot"
	FILESYSTEMSNAPSHOTACCESSTYPEENUM_PROTOCOL FileSystemSnapshotAccessTypeEnum = "Protocol"
)

// All allowed values of FileSystemSnapshotAccessTypeEnum enum
var AllowedFileSystemSnapshotAccessTypeEnumEnumValues = []FileSystemSnapshotAccessTypeEnum{
	"Snapshot",
	"Protocol",
}

func (v *FileSystemSnapshotAccessTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileSystemSnapshotAccessTypeEnum(value)
	for _, existing := range AllowedFileSystemSnapshotAccessTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileSystemSnapshotAccessTypeEnum", value)
}

// NewFileSystemSnapshotAccessTypeEnumFromValue returns a pointer to a valid FileSystemSnapshotAccessTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileSystemSnapshotAccessTypeEnumFromValue(v string) (*FileSystemSnapshotAccessTypeEnum, error) {
	ev := FileSystemSnapshotAccessTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileSystemSnapshotAccessTypeEnum: valid values are %v", v, AllowedFileSystemSnapshotAccessTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileSystemSnapshotAccessTypeEnum) IsValid() bool {
	for _, existing := range AllowedFileSystemSnapshotAccessTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileSystemSnapshotAccessTypeEnum value
func (v FileSystemSnapshotAccessTypeEnum) Ptr() *FileSystemSnapshotAccessTypeEnum {
	return &v
}

type NullableFileSystemSnapshotAccessTypeEnum struct {
	value *FileSystemSnapshotAccessTypeEnum
	isSet bool
}

func (v NullableFileSystemSnapshotAccessTypeEnum) Get() *FileSystemSnapshotAccessTypeEnum {
	return v.value
}

func (v *NullableFileSystemSnapshotAccessTypeEnum) Set(val *FileSystemSnapshotAccessTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSystemSnapshotAccessTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSystemSnapshotAccessTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSystemSnapshotAccessTypeEnum(val *FileSystemSnapshotAccessTypeEnum) *NullableFileSystemSnapshotAccessTypeEnum {
	return &NullableFileSystemSnapshotAccessTypeEnum{value: val, isSet: true}
}

func (v NullableFileSystemSnapshotAccessTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSystemSnapshotAccessTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

