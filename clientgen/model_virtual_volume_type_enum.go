/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// VirtualVolumeTypeEnum The logical type of a virtual volume. Values are: * Primary * Snapshot * Prepared_Snapshot * Clone * Fast_Clone 
type VirtualVolumeTypeEnum string

// List of VirtualVolumeTypeEnum
const (
	VIRTUALVOLUMETYPEENUM_PRIMARY VirtualVolumeTypeEnum = "Primary"
	VIRTUALVOLUMETYPEENUM_SNAPSHOT VirtualVolumeTypeEnum = "Snapshot"
	VIRTUALVOLUMETYPEENUM_PREPARED_SNAPSHOT VirtualVolumeTypeEnum = "Prepared_Snapshot"
	VIRTUALVOLUMETYPEENUM_CLONE VirtualVolumeTypeEnum = "Clone"
	VIRTUALVOLUMETYPEENUM_FAST_CLONE VirtualVolumeTypeEnum = "Fast_Clone"
)

// All allowed values of VirtualVolumeTypeEnum enum
var AllowedVirtualVolumeTypeEnumEnumValues = []VirtualVolumeTypeEnum{
	"Primary",
	"Snapshot",
	"Prepared_Snapshot",
	"Clone",
	"Fast_Clone",
}

func (v *VirtualVolumeTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualVolumeTypeEnum(value)
	for _, existing := range AllowedVirtualVolumeTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualVolumeTypeEnum", value)
}

// NewVirtualVolumeTypeEnumFromValue returns a pointer to a valid VirtualVolumeTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualVolumeTypeEnumFromValue(v string) (*VirtualVolumeTypeEnum, error) {
	ev := VirtualVolumeTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualVolumeTypeEnum: valid values are %v", v, AllowedVirtualVolumeTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualVolumeTypeEnum) IsValid() bool {
	for _, existing := range AllowedVirtualVolumeTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualVolumeTypeEnum value
func (v VirtualVolumeTypeEnum) Ptr() *VirtualVolumeTypeEnum {
	return &v
}

type NullableVirtualVolumeTypeEnum struct {
	value *VirtualVolumeTypeEnum
	isSet bool
}

func (v NullableVirtualVolumeTypeEnum) Get() *VirtualVolumeTypeEnum {
	return v.value
}

func (v *NullableVirtualVolumeTypeEnum) Set(val *VirtualVolumeTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualVolumeTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualVolumeTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualVolumeTypeEnum(val *VirtualVolumeTypeEnum) *NullableVirtualVolumeTypeEnum {
	return &NullableVirtualVolumeTypeEnum{value: val, isSet: true}
}

func (v NullableVirtualVolumeTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualVolumeTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

