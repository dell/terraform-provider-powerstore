/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the IoLimitRuleInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IoLimitRuleInstance{}

// IoLimitRuleInstance Properties of an I/O limit rule The I/O limit rule allows users to specify I/O bandwidth limits. If both IOP and bandwidth limits are set, both are enforced.  Was added in version 4.0.0.0. This resource type has queriable association from policy
type IoLimitRuleInstance struct {
	// Unique identifier of the I/O limit rule.
	Id *string `json:"id,omitempty"`
	// Name of the I/O limit rule.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	Type *BandwidthLimitTypeEnum `json:"type,omitempty"`
	// Maximum I/O operations in either I/O operations per second (IOPS) or I/O operations per second per GB. The specification of the type attribute determines which measurement is used. If type is set to absolute, max_iops is specified in IOPS. If type is set to density, max_iops is specified in IOPS per GB. If both max_iops and max_bw are specified, the system will limit I/O if either value is exceeded. 
	MaxIops *int32 `json:"max_iops,omitempty"`
	// Maximum I/O bandwidth measured in either Kilobytes per second or kilobtyes per second / per GB. The specification of the type attribute determines which measurement is used. If type is set to absolute, max_bw is specified in Kilobytes per second. If type is set to density, max_bw is specified in Kilobytes per second / per GB. If both max_iops and max_bw are specified, the system will limit I/O if either value is exceeded. 
	MaxBw *int32 `json:"max_bw,omitempty"`
	// Percentage indicating by how much the limit may be exceeded. If I/O normally runs below the specified limit, then the volume or volume group will accumulate burst credits that can be used to exceed the limit for a short period (a few seconds, but will not exceed the burst limit). This burst percentage applies to both max_iops and max_bw and is independent of the type setting. 
	BurstPercentage *int32 `json:"burst_percentage,omitempty"`
	// Localized message string corresponding to type Was added in version 4.0.0.0.
	TypeL10n *string `json:"type_l10n,omitempty"`
	// This is the inverse of the resource type policy association.
	Policies []PolicyInstance `json:"policies,omitempty"`
}

// NewIoLimitRuleInstance instantiates a new IoLimitRuleInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoLimitRuleInstance() *IoLimitRuleInstance {
	this := IoLimitRuleInstance{}
	return &this
}

// NewIoLimitRuleInstanceWithDefaults instantiates a new IoLimitRuleInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoLimitRuleInstanceWithDefaults() *IoLimitRuleInstance {
	this := IoLimitRuleInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IoLimitRuleInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IoLimitRuleInstance) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetType() BandwidthLimitTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret BandwidthLimitTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetTypeOk() (*BandwidthLimitTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BandwidthLimitTypeEnum and assigns it to the Type field.
func (o *IoLimitRuleInstance) SetType(v BandwidthLimitTypeEnum) {
	o.Type = &v
}

// GetMaxIops returns the MaxIops field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetMaxIops() int32 {
	if o == nil || IsNil(o.MaxIops) {
		var ret int32
		return ret
	}
	return *o.MaxIops
}

// GetMaxIopsOk returns a tuple with the MaxIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetMaxIopsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxIops) {
		return nil, false
	}
	return o.MaxIops, true
}

// HasMaxIops returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasMaxIops() bool {
	if o != nil && !IsNil(o.MaxIops) {
		return true
	}

	return false
}

// SetMaxIops gets a reference to the given int32 and assigns it to the MaxIops field.
func (o *IoLimitRuleInstance) SetMaxIops(v int32) {
	o.MaxIops = &v
}

// GetMaxBw returns the MaxBw field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetMaxBw() int32 {
	if o == nil || IsNil(o.MaxBw) {
		var ret int32
		return ret
	}
	return *o.MaxBw
}

// GetMaxBwOk returns a tuple with the MaxBw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetMaxBwOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxBw) {
		return nil, false
	}
	return o.MaxBw, true
}

// HasMaxBw returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasMaxBw() bool {
	if o != nil && !IsNil(o.MaxBw) {
		return true
	}

	return false
}

// SetMaxBw gets a reference to the given int32 and assigns it to the MaxBw field.
func (o *IoLimitRuleInstance) SetMaxBw(v int32) {
	o.MaxBw = &v
}

// GetBurstPercentage returns the BurstPercentage field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetBurstPercentage() int32 {
	if o == nil || IsNil(o.BurstPercentage) {
		var ret int32
		return ret
	}
	return *o.BurstPercentage
}

// GetBurstPercentageOk returns a tuple with the BurstPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetBurstPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.BurstPercentage) {
		return nil, false
	}
	return o.BurstPercentage, true
}

// HasBurstPercentage returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasBurstPercentage() bool {
	if o != nil && !IsNil(o.BurstPercentage) {
		return true
	}

	return false
}

// SetBurstPercentage gets a reference to the given int32 and assigns it to the BurstPercentage field.
func (o *IoLimitRuleInstance) SetBurstPercentage(v int32) {
	o.BurstPercentage = &v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *IoLimitRuleInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *IoLimitRuleInstance) GetPolicies() []PolicyInstance {
	if o == nil || IsNil(o.Policies) {
		var ret []PolicyInstance
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoLimitRuleInstance) GetPoliciesOk() ([]PolicyInstance, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *IoLimitRuleInstance) HasPolicies() bool {
	if o != nil && !IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []PolicyInstance and assigns it to the Policies field.
func (o *IoLimitRuleInstance) SetPolicies(v []PolicyInstance) {
	o.Policies = v
}

func (o IoLimitRuleInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IoLimitRuleInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MaxIops) {
		toSerialize["max_iops"] = o.MaxIops
	}
	if !IsNil(o.MaxBw) {
		toSerialize["max_bw"] = o.MaxBw
	}
	if !IsNil(o.BurstPercentage) {
		toSerialize["burst_percentage"] = o.BurstPercentage
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}
	return toSerialize, nil
}

type NullableIoLimitRuleInstance struct {
	value *IoLimitRuleInstance
	isSet bool
}

func (v NullableIoLimitRuleInstance) Get() *IoLimitRuleInstance {
	return v.value
}

func (v *NullableIoLimitRuleInstance) Set(val *IoLimitRuleInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableIoLimitRuleInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableIoLimitRuleInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoLimitRuleInstance(val *IoLimitRuleInstance) *NullableIoLimitRuleInstance {
	return &NullableIoLimitRuleInstance{value: val, isSet: true}
}

func (v NullableIoLimitRuleInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoLimitRuleInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


