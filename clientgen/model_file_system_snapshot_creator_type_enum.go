/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// FileSystemSnapshotCreatorTypeEnum Enumeration of possible snapshot creator types. * Scheduler - Created by a snapshot schedule. * User - Created by a user.  
type FileSystemSnapshotCreatorTypeEnum string

// List of FileSystemSnapshotCreatorTypeEnum
const (
	FILESYSTEMSNAPSHOTCREATORTYPEENUM_SCHEDULER FileSystemSnapshotCreatorTypeEnum = "Scheduler"
	FILESYSTEMSNAPSHOTCREATORTYPEENUM_USER FileSystemSnapshotCreatorTypeEnum = "User"
)

// All allowed values of FileSystemSnapshotCreatorTypeEnum enum
var AllowedFileSystemSnapshotCreatorTypeEnumEnumValues = []FileSystemSnapshotCreatorTypeEnum{
	"Scheduler",
	"User",
}

func (v *FileSystemSnapshotCreatorTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileSystemSnapshotCreatorTypeEnum(value)
	for _, existing := range AllowedFileSystemSnapshotCreatorTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileSystemSnapshotCreatorTypeEnum", value)
}

// NewFileSystemSnapshotCreatorTypeEnumFromValue returns a pointer to a valid FileSystemSnapshotCreatorTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileSystemSnapshotCreatorTypeEnumFromValue(v string) (*FileSystemSnapshotCreatorTypeEnum, error) {
	ev := FileSystemSnapshotCreatorTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileSystemSnapshotCreatorTypeEnum: valid values are %v", v, AllowedFileSystemSnapshotCreatorTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileSystemSnapshotCreatorTypeEnum) IsValid() bool {
	for _, existing := range AllowedFileSystemSnapshotCreatorTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileSystemSnapshotCreatorTypeEnum value
func (v FileSystemSnapshotCreatorTypeEnum) Ptr() *FileSystemSnapshotCreatorTypeEnum {
	return &v
}

type NullableFileSystemSnapshotCreatorTypeEnum struct {
	value *FileSystemSnapshotCreatorTypeEnum
	isSet bool
}

func (v NullableFileSystemSnapshotCreatorTypeEnum) Get() *FileSystemSnapshotCreatorTypeEnum {
	return v.value
}

func (v *NullableFileSystemSnapshotCreatorTypeEnum) Set(val *FileSystemSnapshotCreatorTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSystemSnapshotCreatorTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSystemSnapshotCreatorTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSystemSnapshotCreatorTypeEnum(val *FileSystemSnapshotCreatorTypeEnum) *NullableFileSystemSnapshotCreatorTypeEnum {
	return &NullableFileSystemSnapshotCreatorTypeEnum{value: val, isSet: true}
}

func (v NullableFileSystemSnapshotCreatorTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSystemSnapshotCreatorTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

