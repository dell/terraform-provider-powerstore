/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the VolumeGroupModify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeGroupModify{}

// VolumeGroupModify Modify volume group request.
type VolumeGroupModify struct {
	// New name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique. 
	Name *string `json:"name,omitempty"`
	// New description for the volume group. The description should not have any unprintable characters.  If an empty string is specified, the description will be cleared. 
	Description *string `json:"description,omitempty"`
	// A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.   This parameter is only valid when modifying a primary or a clone volume group. 
	IsWriteOrderConsistent *bool `json:"is_write_order_consistent,omitempty"`
	// Unique identifier of the protection policy to assign to a primary or clone volume group.  If an empty string or null is specified, protection policy will be removed from the volume group.  name:{name} can be used instead of {id}. For example: 'protection_policy_id':'name:policy_name'
	ProtectionPolicyId NullableString `json:"protection_policy_id,omitempty"`
	// Unique identifier of the QoS performance policy to assign to a volume group. If an empty string or null is specified, the QoS performance policy will be removed from the volume group.  name:{name} can be used instead of {id}. For example: 'qos_performance_policy_id':'name:policy_name' Was added in version 4.0.0.0.
	QosPerformancePolicyId NullableString `json:"qos_performance_policy_id,omitempty"`
	// Time after which the snapshot set can be auto-purged. This parameter is only valid for a snapshot set. Time must be specified in Zulu time zone. Expiration time cannot be prior to current time.  Use a maximum timestamp value to set an expiration to never expire.  If an empty string or null is specified, expiration_timestamp will be cleared for the snapshot set.  Valid format is yyyy-MM-dd'T'HH:mm:ssZ or yyyy-MM-dd'T'HH:mm:ss.SSSZ.  Was added in version 2.0.0.0.
	ExpirationTimestamp NullableTime `json:"expiration_timestamp,omitempty"`
	// This parameter only applies to snapshots. If true, mark the snapshot as a secure snapshot. An expiration timestamp must also exist or be specified. A secure snapshot can not be unlocked by setting this flag to false.  Was added in version 3.5.0.0.
	IsSecure *bool `json:"is_secure,omitempty"`
	// New value for is_replication_destination property. is_replication_destination property of all the volumes in the volume group will be modified to the specified value.   Modification of is_replication will not be transactional in nature. If the command only succeeds in modifying the is_replication_destination property of a subset of volumes, is_replication_destination property for the volume group will be set to true.   Modification of this property is idempotent.   This parameter is only valid when modifying a primary or a clone volume group, only when the volume group is no longer the destination of a replication session, and may only be set to false. 
	IsReplicationDestination *bool `json:"is_replication_destination,omitempty"`
	// Normally a replication destination volume group cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination volume group needs to be cleaned up.  With the force option, the user will be allowed to remove the protection policy from the replication destination volume group provided that the replication session has never been synchronized.  This parameter defaults to false, if not specified. 
	Force *bool `json:"force,omitempty"`
}

// NewVolumeGroupModify instantiates a new VolumeGroupModify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeGroupModify() *VolumeGroupModify {
	this := VolumeGroupModify{}
	var force bool = false
	this.Force = &force
	return &this
}

// NewVolumeGroupModifyWithDefaults instantiates a new VolumeGroupModify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeGroupModifyWithDefaults() *VolumeGroupModify {
	this := VolumeGroupModify{}
	var force bool = false
	this.Force = &force
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VolumeGroupModify) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupModify) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VolumeGroupModify) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VolumeGroupModify) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupModify) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VolumeGroupModify) SetDescription(v string) {
	o.Description = &v
}

// GetIsWriteOrderConsistent returns the IsWriteOrderConsistent field value if set, zero value otherwise.
func (o *VolumeGroupModify) GetIsWriteOrderConsistent() bool {
	if o == nil || IsNil(o.IsWriteOrderConsistent) {
		var ret bool
		return ret
	}
	return *o.IsWriteOrderConsistent
}

// GetIsWriteOrderConsistentOk returns a tuple with the IsWriteOrderConsistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupModify) GetIsWriteOrderConsistentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWriteOrderConsistent) {
		return nil, false
	}
	return o.IsWriteOrderConsistent, true
}

// HasIsWriteOrderConsistent returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasIsWriteOrderConsistent() bool {
	if o != nil && !IsNil(o.IsWriteOrderConsistent) {
		return true
	}

	return false
}

// SetIsWriteOrderConsistent gets a reference to the given bool and assigns it to the IsWriteOrderConsistent field.
func (o *VolumeGroupModify) SetIsWriteOrderConsistent(v bool) {
	o.IsWriteOrderConsistent = &v
}

// GetProtectionPolicyId returns the ProtectionPolicyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeGroupModify) GetProtectionPolicyId() string {
	if o == nil || IsNil(o.ProtectionPolicyId.Get()) {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyId.Get()
}

// GetProtectionPolicyIdOk returns a tuple with the ProtectionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeGroupModify) GetProtectionPolicyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionPolicyId.Get(), o.ProtectionPolicyId.IsSet()
}

// HasProtectionPolicyId returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasProtectionPolicyId() bool {
	if o != nil && o.ProtectionPolicyId.IsSet() {
		return true
	}

	return false
}

// SetProtectionPolicyId gets a reference to the given NullableString and assigns it to the ProtectionPolicyId field.
func (o *VolumeGroupModify) SetProtectionPolicyId(v string) {
	o.ProtectionPolicyId.Set(&v)
}
// SetProtectionPolicyIdNil sets the value for ProtectionPolicyId to be an explicit nil
func (o *VolumeGroupModify) SetProtectionPolicyIdNil() {
	o.ProtectionPolicyId.Set(nil)
}

// UnsetProtectionPolicyId ensures that no value is present for ProtectionPolicyId, not even an explicit nil
func (o *VolumeGroupModify) UnsetProtectionPolicyId() {
	o.ProtectionPolicyId.Unset()
}

// GetQosPerformancePolicyId returns the QosPerformancePolicyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeGroupModify) GetQosPerformancePolicyId() string {
	if o == nil || IsNil(o.QosPerformancePolicyId.Get()) {
		var ret string
		return ret
	}
	return *o.QosPerformancePolicyId.Get()
}

// GetQosPerformancePolicyIdOk returns a tuple with the QosPerformancePolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeGroupModify) GetQosPerformancePolicyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QosPerformancePolicyId.Get(), o.QosPerformancePolicyId.IsSet()
}

// HasQosPerformancePolicyId returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasQosPerformancePolicyId() bool {
	if o != nil && o.QosPerformancePolicyId.IsSet() {
		return true
	}

	return false
}

// SetQosPerformancePolicyId gets a reference to the given NullableString and assigns it to the QosPerformancePolicyId field.
func (o *VolumeGroupModify) SetQosPerformancePolicyId(v string) {
	o.QosPerformancePolicyId.Set(&v)
}
// SetQosPerformancePolicyIdNil sets the value for QosPerformancePolicyId to be an explicit nil
func (o *VolumeGroupModify) SetQosPerformancePolicyIdNil() {
	o.QosPerformancePolicyId.Set(nil)
}

// UnsetQosPerformancePolicyId ensures that no value is present for QosPerformancePolicyId, not even an explicit nil
func (o *VolumeGroupModify) UnsetQosPerformancePolicyId() {
	o.QosPerformancePolicyId.Unset()
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeGroupModify) GetExpirationTimestamp() time.Time {
	if o == nil || IsNil(o.ExpirationTimestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTimestamp.Get()
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeGroupModify) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationTimestamp.Get(), o.ExpirationTimestamp.IsSet()
}

// HasExpirationTimestamp returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasExpirationTimestamp() bool {
	if o != nil && o.ExpirationTimestamp.IsSet() {
		return true
	}

	return false
}

// SetExpirationTimestamp gets a reference to the given NullableTime and assigns it to the ExpirationTimestamp field.
func (o *VolumeGroupModify) SetExpirationTimestamp(v time.Time) {
	o.ExpirationTimestamp.Set(&v)
}
// SetExpirationTimestampNil sets the value for ExpirationTimestamp to be an explicit nil
func (o *VolumeGroupModify) SetExpirationTimestampNil() {
	o.ExpirationTimestamp.Set(nil)
}

// UnsetExpirationTimestamp ensures that no value is present for ExpirationTimestamp, not even an explicit nil
func (o *VolumeGroupModify) UnsetExpirationTimestamp() {
	o.ExpirationTimestamp.Unset()
}

// GetIsSecure returns the IsSecure field value if set, zero value otherwise.
func (o *VolumeGroupModify) GetIsSecure() bool {
	if o == nil || IsNil(o.IsSecure) {
		var ret bool
		return ret
	}
	return *o.IsSecure
}

// GetIsSecureOk returns a tuple with the IsSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupModify) GetIsSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecure) {
		return nil, false
	}
	return o.IsSecure, true
}

// HasIsSecure returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasIsSecure() bool {
	if o != nil && !IsNil(o.IsSecure) {
		return true
	}

	return false
}

// SetIsSecure gets a reference to the given bool and assigns it to the IsSecure field.
func (o *VolumeGroupModify) SetIsSecure(v bool) {
	o.IsSecure = &v
}

// GetIsReplicationDestination returns the IsReplicationDestination field value if set, zero value otherwise.
func (o *VolumeGroupModify) GetIsReplicationDestination() bool {
	if o == nil || IsNil(o.IsReplicationDestination) {
		var ret bool
		return ret
	}
	return *o.IsReplicationDestination
}

// GetIsReplicationDestinationOk returns a tuple with the IsReplicationDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupModify) GetIsReplicationDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplicationDestination) {
		return nil, false
	}
	return o.IsReplicationDestination, true
}

// HasIsReplicationDestination returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasIsReplicationDestination() bool {
	if o != nil && !IsNil(o.IsReplicationDestination) {
		return true
	}

	return false
}

// SetIsReplicationDestination gets a reference to the given bool and assigns it to the IsReplicationDestination field.
func (o *VolumeGroupModify) SetIsReplicationDestination(v bool) {
	o.IsReplicationDestination = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *VolumeGroupModify) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroupModify) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *VolumeGroupModify) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *VolumeGroupModify) SetForce(v bool) {
	o.Force = &v
}

func (o VolumeGroupModify) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeGroupModify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsWriteOrderConsistent) {
		toSerialize["is_write_order_consistent"] = o.IsWriteOrderConsistent
	}
	if o.ProtectionPolicyId.IsSet() {
		toSerialize["protection_policy_id"] = o.ProtectionPolicyId.Get()
	}
	if o.QosPerformancePolicyId.IsSet() {
		toSerialize["qos_performance_policy_id"] = o.QosPerformancePolicyId.Get()
	}
	if o.ExpirationTimestamp.IsSet() {
		toSerialize["expiration_timestamp"] = o.ExpirationTimestamp.Get()
	}
	if !IsNil(o.IsSecure) {
		toSerialize["is_secure"] = o.IsSecure
	}
	if !IsNil(o.IsReplicationDestination) {
		toSerialize["is_replication_destination"] = o.IsReplicationDestination
	}
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	return toSerialize, nil
}

type NullableVolumeGroupModify struct {
	value *VolumeGroupModify
	isSet bool
}

func (v NullableVolumeGroupModify) Get() *VolumeGroupModify {
	return v.value
}

func (v *NullableVolumeGroupModify) Set(val *VolumeGroupModify) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeGroupModify) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeGroupModify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeGroupModify(val *VolumeGroupModify) *NullableVolumeGroupModify {
	return &NullableVolumeGroupModify{value: val, isSet: true}
}

func (v NullableVolumeGroupModify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeGroupModify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


