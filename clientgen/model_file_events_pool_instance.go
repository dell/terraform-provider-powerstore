/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileEventsPoolInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileEventsPoolInstance{}

// FileEventsPoolInstance  Was added in version 3.0.0.0. This resource type has queriable association from file_events_publisher
type FileEventsPoolInstance struct {
	// Unique identifier of the file event pool instance.
	Id *string `json:"id,omitempty"`
	// Name assigned to the set of Windows servers where file event service software is installed.   This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool. 
	FileEventsPublisherServers []string `json:"file_events_publisher_servers,omitempty"`
	// This value is used to modify file event service server addresses of this resource when the associated NAS server is a replication destination i.e, is_replica is set.  - If this value is set, file event service server addresses on the destination will be overridden with these values. - If this value is empty, file event service server addresses on the destination will be reset to the ones from the source.  File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool. 
	DestinationFileEventsPublisherServers []string `json:"destination_file_events_publisher_servers,omitempty"`
	// List of up to three (one per category) sets of file event settings.   Filtering on the fields of this embedded resource is not supported.
	FileEventsSettings []FileEventsSettingsInstance `json:"file_events_settings,omitempty"`
	// Flag indicates if the file events pool is a replicated pool. 
	IsReplica *bool `json:"is_replica,omitempty"`
	// List of the file_events_publishers that are associated with this file_events_pool.
	FileEventsPublishers []FileEventsPublisherInstance `json:"file_events_publishers,omitempty"`
}

// NewFileEventsPoolInstance instantiates a new FileEventsPoolInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileEventsPoolInstance() *FileEventsPoolInstance {
	this := FileEventsPoolInstance{}
	var isReplica bool = false
	this.IsReplica = &isReplica
	return &this
}

// NewFileEventsPoolInstanceWithDefaults instantiates a new FileEventsPoolInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileEventsPoolInstanceWithDefaults() *FileEventsPoolInstance {
	this := FileEventsPoolInstance{}
	var isReplica bool = false
	this.IsReplica = &isReplica
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileEventsPoolInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPoolInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileEventsPoolInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileEventsPoolInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileEventsPoolInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPoolInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileEventsPoolInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileEventsPoolInstance) SetName(v string) {
	o.Name = &v
}

// GetFileEventsPublisherServers returns the FileEventsPublisherServers field value if set, zero value otherwise.
func (o *FileEventsPoolInstance) GetFileEventsPublisherServers() []string {
	if o == nil || IsNil(o.FileEventsPublisherServers) {
		var ret []string
		return ret
	}
	return o.FileEventsPublisherServers
}

// GetFileEventsPublisherServersOk returns a tuple with the FileEventsPublisherServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPoolInstance) GetFileEventsPublisherServersOk() ([]string, bool) {
	if o == nil || IsNil(o.FileEventsPublisherServers) {
		return nil, false
	}
	return o.FileEventsPublisherServers, true
}

// HasFileEventsPublisherServers returns a boolean if a field has been set.
func (o *FileEventsPoolInstance) HasFileEventsPublisherServers() bool {
	if o != nil && !IsNil(o.FileEventsPublisherServers) {
		return true
	}

	return false
}

// SetFileEventsPublisherServers gets a reference to the given []string and assigns it to the FileEventsPublisherServers field.
func (o *FileEventsPoolInstance) SetFileEventsPublisherServers(v []string) {
	o.FileEventsPublisherServers = v
}

// GetDestinationFileEventsPublisherServers returns the DestinationFileEventsPublisherServers field value if set, zero value otherwise.
func (o *FileEventsPoolInstance) GetDestinationFileEventsPublisherServers() []string {
	if o == nil || IsNil(o.DestinationFileEventsPublisherServers) {
		var ret []string
		return ret
	}
	return o.DestinationFileEventsPublisherServers
}

// GetDestinationFileEventsPublisherServersOk returns a tuple with the DestinationFileEventsPublisherServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPoolInstance) GetDestinationFileEventsPublisherServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DestinationFileEventsPublisherServers) {
		return nil, false
	}
	return o.DestinationFileEventsPublisherServers, true
}

// HasDestinationFileEventsPublisherServers returns a boolean if a field has been set.
func (o *FileEventsPoolInstance) HasDestinationFileEventsPublisherServers() bool {
	if o != nil && !IsNil(o.DestinationFileEventsPublisherServers) {
		return true
	}

	return false
}

// SetDestinationFileEventsPublisherServers gets a reference to the given []string and assigns it to the DestinationFileEventsPublisherServers field.
func (o *FileEventsPoolInstance) SetDestinationFileEventsPublisherServers(v []string) {
	o.DestinationFileEventsPublisherServers = v
}

// GetFileEventsSettings returns the FileEventsSettings field value if set, zero value otherwise.
func (o *FileEventsPoolInstance) GetFileEventsSettings() []FileEventsSettingsInstance {
	if o == nil || IsNil(o.FileEventsSettings) {
		var ret []FileEventsSettingsInstance
		return ret
	}
	return o.FileEventsSettings
}

// GetFileEventsSettingsOk returns a tuple with the FileEventsSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPoolInstance) GetFileEventsSettingsOk() ([]FileEventsSettingsInstance, bool) {
	if o == nil || IsNil(o.FileEventsSettings) {
		return nil, false
	}
	return o.FileEventsSettings, true
}

// HasFileEventsSettings returns a boolean if a field has been set.
func (o *FileEventsPoolInstance) HasFileEventsSettings() bool {
	if o != nil && !IsNil(o.FileEventsSettings) {
		return true
	}

	return false
}

// SetFileEventsSettings gets a reference to the given []FileEventsSettingsInstance and assigns it to the FileEventsSettings field.
func (o *FileEventsPoolInstance) SetFileEventsSettings(v []FileEventsSettingsInstance) {
	o.FileEventsSettings = v
}

// GetIsReplica returns the IsReplica field value if set, zero value otherwise.
func (o *FileEventsPoolInstance) GetIsReplica() bool {
	if o == nil || IsNil(o.IsReplica) {
		var ret bool
		return ret
	}
	return *o.IsReplica
}

// GetIsReplicaOk returns a tuple with the IsReplica field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPoolInstance) GetIsReplicaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplica) {
		return nil, false
	}
	return o.IsReplica, true
}

// HasIsReplica returns a boolean if a field has been set.
func (o *FileEventsPoolInstance) HasIsReplica() bool {
	if o != nil && !IsNil(o.IsReplica) {
		return true
	}

	return false
}

// SetIsReplica gets a reference to the given bool and assigns it to the IsReplica field.
func (o *FileEventsPoolInstance) SetIsReplica(v bool) {
	o.IsReplica = &v
}

// GetFileEventsPublishers returns the FileEventsPublishers field value if set, zero value otherwise.
func (o *FileEventsPoolInstance) GetFileEventsPublishers() []FileEventsPublisherInstance {
	if o == nil || IsNil(o.FileEventsPublishers) {
		var ret []FileEventsPublisherInstance
		return ret
	}
	return o.FileEventsPublishers
}

// GetFileEventsPublishersOk returns a tuple with the FileEventsPublishers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileEventsPoolInstance) GetFileEventsPublishersOk() ([]FileEventsPublisherInstance, bool) {
	if o == nil || IsNil(o.FileEventsPublishers) {
		return nil, false
	}
	return o.FileEventsPublishers, true
}

// HasFileEventsPublishers returns a boolean if a field has been set.
func (o *FileEventsPoolInstance) HasFileEventsPublishers() bool {
	if o != nil && !IsNil(o.FileEventsPublishers) {
		return true
	}

	return false
}

// SetFileEventsPublishers gets a reference to the given []FileEventsPublisherInstance and assigns it to the FileEventsPublishers field.
func (o *FileEventsPoolInstance) SetFileEventsPublishers(v []FileEventsPublisherInstance) {
	o.FileEventsPublishers = v
}

func (o FileEventsPoolInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileEventsPoolInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FileEventsPublisherServers) {
		toSerialize["file_events_publisher_servers"] = o.FileEventsPublisherServers
	}
	if !IsNil(o.DestinationFileEventsPublisherServers) {
		toSerialize["destination_file_events_publisher_servers"] = o.DestinationFileEventsPublisherServers
	}
	if !IsNil(o.FileEventsSettings) {
		toSerialize["file_events_settings"] = o.FileEventsSettings
	}
	if !IsNil(o.IsReplica) {
		toSerialize["is_replica"] = o.IsReplica
	}
	if !IsNil(o.FileEventsPublishers) {
		toSerialize["file_events_publishers"] = o.FileEventsPublishers
	}
	return toSerialize, nil
}

type NullableFileEventsPoolInstance struct {
	value *FileEventsPoolInstance
	isSet bool
}

func (v NullableFileEventsPoolInstance) Get() *FileEventsPoolInstance {
	return v.value
}

func (v *NullableFileEventsPoolInstance) Set(val *FileEventsPoolInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileEventsPoolInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileEventsPoolInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileEventsPoolInstance(val *FileEventsPoolInstance) *NullableFileEventsPoolInstance {
	return &NullableFileEventsPoolInstance{value: val, isSet: true}
}

func (v NullableFileEventsPoolInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileEventsPoolInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


