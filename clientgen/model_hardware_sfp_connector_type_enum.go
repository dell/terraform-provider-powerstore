/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// HardwareSFPConnectorTypeEnum Connector type. Available on the SFP hardware type. Current types are:  * Unknown - Unknown Connector  * SC - Subscriber Connector  * FC_Style1_Copper - Fibre Channel Style 1 Copper Connector  * FC_Style2_Copper - Fibre Channel Style 1 Copper Connector  * BNC_TNC - Bayonet/Threaded Neill-Concelman Connector  * FC_Coaxial_Headers - Fibre Channel Coaxial Headers Connector  * FiberJack - Fiber Jack Connector  * LC - Lucent Connector  * MT_RJ - Mechanical Transfer - Registered Jack Connector  * MU - Multiple Optical Connector  * SG - SG Connector  * Optical_Pigtail - Optical Pigtail Connector  * HSSDC_II - High Speed Serial Data Connector  * Copper_Pigtail - Copper Pigtail Connector  * RJ45 - RJ45 Connector  * No_Separable - Non-seperable Connector  * MXC_2x16 - MXC 2x16 Connector  * MPO_1x12 - MPO 1x12 Connector  * MPO_2x16 - MPO 2x16 Connector  Values was added in 4.0.0.0: MPO_1x12, MPO_2x16.
type HardwareSFPConnectorTypeEnum string

// List of HardwareSFPConnectorTypeEnum
const (
	HARDWARESFPCONNECTORTYPEENUM_UNKNOWN HardwareSFPConnectorTypeEnum = "Unknown"
	HARDWARESFPCONNECTORTYPEENUM_SC HardwareSFPConnectorTypeEnum = "SC"
	HARDWARESFPCONNECTORTYPEENUM_FC_STYLE1_COPPER HardwareSFPConnectorTypeEnum = "FC_Style1_Copper"
	HARDWARESFPCONNECTORTYPEENUM_FC_STYLE2_COPPER HardwareSFPConnectorTypeEnum = "FC_Style2_Copper"
	HARDWARESFPCONNECTORTYPEENUM_BNC_TNC HardwareSFPConnectorTypeEnum = "BNC_TNC"
	HARDWARESFPCONNECTORTYPEENUM_FC_COAXIAL_HEADERS HardwareSFPConnectorTypeEnum = "FC_Coaxial_Headers"
	HARDWARESFPCONNECTORTYPEENUM_FIBER_JACK HardwareSFPConnectorTypeEnum = "FiberJack"
	HARDWARESFPCONNECTORTYPEENUM_LC HardwareSFPConnectorTypeEnum = "LC"
	HARDWARESFPCONNECTORTYPEENUM_MT_RJ HardwareSFPConnectorTypeEnum = "MT_RJ"
	HARDWARESFPCONNECTORTYPEENUM_MU HardwareSFPConnectorTypeEnum = "MU"
	HARDWARESFPCONNECTORTYPEENUM_SG HardwareSFPConnectorTypeEnum = "SG"
	HARDWARESFPCONNECTORTYPEENUM_OPTICAL_PIGTAIL HardwareSFPConnectorTypeEnum = "Optical_Pigtail"
	HARDWARESFPCONNECTORTYPEENUM_HSSDC_II HardwareSFPConnectorTypeEnum = "HSSDC_II"
	HARDWARESFPCONNECTORTYPEENUM_COPPER_PIGTAIL HardwareSFPConnectorTypeEnum = "Copper_Pigtail"
	HARDWARESFPCONNECTORTYPEENUM_RJ45 HardwareSFPConnectorTypeEnum = "RJ45"
	HARDWARESFPCONNECTORTYPEENUM_NO_SEPARABLE HardwareSFPConnectorTypeEnum = "No_Separable"
	HARDWARESFPCONNECTORTYPEENUM_MXC_2X16 HardwareSFPConnectorTypeEnum = "MXC_2x16"
	HARDWARESFPCONNECTORTYPEENUM_MPO_1X12 HardwareSFPConnectorTypeEnum = "MPO_1x12"
	HARDWARESFPCONNECTORTYPEENUM_MPO_2X16 HardwareSFPConnectorTypeEnum = "MPO_2x16"
)

// All allowed values of HardwareSFPConnectorTypeEnum enum
var AllowedHardwareSFPConnectorTypeEnumEnumValues = []HardwareSFPConnectorTypeEnum{
	"Unknown",
	"SC",
	"FC_Style1_Copper",
	"FC_Style2_Copper",
	"BNC_TNC",
	"FC_Coaxial_Headers",
	"FiberJack",
	"LC",
	"MT_RJ",
	"MU",
	"SG",
	"Optical_Pigtail",
	"HSSDC_II",
	"Copper_Pigtail",
	"RJ45",
	"No_Separable",
	"MXC_2x16",
	"MPO_1x12",
	"MPO_2x16",
}

func (v *HardwareSFPConnectorTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HardwareSFPConnectorTypeEnum(value)
	for _, existing := range AllowedHardwareSFPConnectorTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HardwareSFPConnectorTypeEnum", value)
}

// NewHardwareSFPConnectorTypeEnumFromValue returns a pointer to a valid HardwareSFPConnectorTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHardwareSFPConnectorTypeEnumFromValue(v string) (*HardwareSFPConnectorTypeEnum, error) {
	ev := HardwareSFPConnectorTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HardwareSFPConnectorTypeEnum: valid values are %v", v, AllowedHardwareSFPConnectorTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HardwareSFPConnectorTypeEnum) IsValid() bool {
	for _, existing := range AllowedHardwareSFPConnectorTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HardwareSFPConnectorTypeEnum value
func (v HardwareSFPConnectorTypeEnum) Ptr() *HardwareSFPConnectorTypeEnum {
	return &v
}

type NullableHardwareSFPConnectorTypeEnum struct {
	value *HardwareSFPConnectorTypeEnum
	isSet bool
}

func (v NullableHardwareSFPConnectorTypeEnum) Get() *HardwareSFPConnectorTypeEnum {
	return v.value
}

func (v *NullableHardwareSFPConnectorTypeEnum) Set(val *HardwareSFPConnectorTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareSFPConnectorTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareSFPConnectorTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareSFPConnectorTypeEnum(val *HardwareSFPConnectorTypeEnum) *NullableHardwareSFPConnectorTypeEnum {
	return &NullableHardwareSFPConnectorTypeEnum{value: val, isSet: true}
}

func (v NullableHardwareSFPConnectorTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareSFPConnectorTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

