/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the DataConnectionInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataConnectionInstance{}

// DataConnectionInstance Data connection status between the local node and a remote target. 
type DataConnectionInstance struct {
	// Unique identifier of the local, initiating node. 
	NodeId *string `json:"node_id,omitempty"`
	// Initiating address from the local node. IP for ISCSI and TCP data connection type. WWN for FC data connection type. 
	InitiatorAddress *string `json:"initiator_address,omitempty"`
	// Target address from the remote system. IP for ISCSI and TCP data connection type. WWN for FC data connection type. 
	TargetAddress *string `json:"target_address,omitempty"`
	Status *TransitConnectionStatusEnum `json:"status,omitempty"`
	DataConnectionType *DataConnectionTypeEnum `json:"data_connection_type,omitempty"`
	// Localized message string corresponding to status
	StatusL10n *string `json:"status_l10n,omitempty"`
	// Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.
	DataConnectionTypeL10n *string `json:"data_connection_type_l10n,omitempty"`
}

// NewDataConnectionInstance instantiates a new DataConnectionInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConnectionInstance() *DataConnectionInstance {
	this := DataConnectionInstance{}
	return &this
}

// NewDataConnectionInstanceWithDefaults instantiates a new DataConnectionInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConnectionInstanceWithDefaults() *DataConnectionInstance {
	this := DataConnectionInstance{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *DataConnectionInstance) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConnectionInstance) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *DataConnectionInstance) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *DataConnectionInstance) SetNodeId(v string) {
	o.NodeId = &v
}

// GetInitiatorAddress returns the InitiatorAddress field value if set, zero value otherwise.
func (o *DataConnectionInstance) GetInitiatorAddress() string {
	if o == nil || IsNil(o.InitiatorAddress) {
		var ret string
		return ret
	}
	return *o.InitiatorAddress
}

// GetInitiatorAddressOk returns a tuple with the InitiatorAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConnectionInstance) GetInitiatorAddressOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorAddress) {
		return nil, false
	}
	return o.InitiatorAddress, true
}

// HasInitiatorAddress returns a boolean if a field has been set.
func (o *DataConnectionInstance) HasInitiatorAddress() bool {
	if o != nil && !IsNil(o.InitiatorAddress) {
		return true
	}

	return false
}

// SetInitiatorAddress gets a reference to the given string and assigns it to the InitiatorAddress field.
func (o *DataConnectionInstance) SetInitiatorAddress(v string) {
	o.InitiatorAddress = &v
}

// GetTargetAddress returns the TargetAddress field value if set, zero value otherwise.
func (o *DataConnectionInstance) GetTargetAddress() string {
	if o == nil || IsNil(o.TargetAddress) {
		var ret string
		return ret
	}
	return *o.TargetAddress
}

// GetTargetAddressOk returns a tuple with the TargetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConnectionInstance) GetTargetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TargetAddress) {
		return nil, false
	}
	return o.TargetAddress, true
}

// HasTargetAddress returns a boolean if a field has been set.
func (o *DataConnectionInstance) HasTargetAddress() bool {
	if o != nil && !IsNil(o.TargetAddress) {
		return true
	}

	return false
}

// SetTargetAddress gets a reference to the given string and assigns it to the TargetAddress field.
func (o *DataConnectionInstance) SetTargetAddress(v string) {
	o.TargetAddress = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DataConnectionInstance) GetStatus() TransitConnectionStatusEnum {
	if o == nil || IsNil(o.Status) {
		var ret TransitConnectionStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConnectionInstance) GetStatusOk() (*TransitConnectionStatusEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataConnectionInstance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TransitConnectionStatusEnum and assigns it to the Status field.
func (o *DataConnectionInstance) SetStatus(v TransitConnectionStatusEnum) {
	o.Status = &v
}

// GetDataConnectionType returns the DataConnectionType field value if set, zero value otherwise.
func (o *DataConnectionInstance) GetDataConnectionType() DataConnectionTypeEnum {
	if o == nil || IsNil(o.DataConnectionType) {
		var ret DataConnectionTypeEnum
		return ret
	}
	return *o.DataConnectionType
}

// GetDataConnectionTypeOk returns a tuple with the DataConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConnectionInstance) GetDataConnectionTypeOk() (*DataConnectionTypeEnum, bool) {
	if o == nil || IsNil(o.DataConnectionType) {
		return nil, false
	}
	return o.DataConnectionType, true
}

// HasDataConnectionType returns a boolean if a field has been set.
func (o *DataConnectionInstance) HasDataConnectionType() bool {
	if o != nil && !IsNil(o.DataConnectionType) {
		return true
	}

	return false
}

// SetDataConnectionType gets a reference to the given DataConnectionTypeEnum and assigns it to the DataConnectionType field.
func (o *DataConnectionInstance) SetDataConnectionType(v DataConnectionTypeEnum) {
	o.DataConnectionType = &v
}

// GetStatusL10n returns the StatusL10n field value if set, zero value otherwise.
func (o *DataConnectionInstance) GetStatusL10n() string {
	if o == nil || IsNil(o.StatusL10n) {
		var ret string
		return ret
	}
	return *o.StatusL10n
}

// GetStatusL10nOk returns a tuple with the StatusL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConnectionInstance) GetStatusL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StatusL10n) {
		return nil, false
	}
	return o.StatusL10n, true
}

// HasStatusL10n returns a boolean if a field has been set.
func (o *DataConnectionInstance) HasStatusL10n() bool {
	if o != nil && !IsNil(o.StatusL10n) {
		return true
	}

	return false
}

// SetStatusL10n gets a reference to the given string and assigns it to the StatusL10n field.
func (o *DataConnectionInstance) SetStatusL10n(v string) {
	o.StatusL10n = &v
}

// GetDataConnectionTypeL10n returns the DataConnectionTypeL10n field value if set, zero value otherwise.
func (o *DataConnectionInstance) GetDataConnectionTypeL10n() string {
	if o == nil || IsNil(o.DataConnectionTypeL10n) {
		var ret string
		return ret
	}
	return *o.DataConnectionTypeL10n
}

// GetDataConnectionTypeL10nOk returns a tuple with the DataConnectionTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConnectionInstance) GetDataConnectionTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.DataConnectionTypeL10n) {
		return nil, false
	}
	return o.DataConnectionTypeL10n, true
}

// HasDataConnectionTypeL10n returns a boolean if a field has been set.
func (o *DataConnectionInstance) HasDataConnectionTypeL10n() bool {
	if o != nil && !IsNil(o.DataConnectionTypeL10n) {
		return true
	}

	return false
}

// SetDataConnectionTypeL10n gets a reference to the given string and assigns it to the DataConnectionTypeL10n field.
func (o *DataConnectionInstance) SetDataConnectionTypeL10n(v string) {
	o.DataConnectionTypeL10n = &v
}

func (o DataConnectionInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataConnectionInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.InitiatorAddress) {
		toSerialize["initiator_address"] = o.InitiatorAddress
	}
	if !IsNil(o.TargetAddress) {
		toSerialize["target_address"] = o.TargetAddress
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DataConnectionType) {
		toSerialize["data_connection_type"] = o.DataConnectionType
	}
	if !IsNil(o.StatusL10n) {
		toSerialize["status_l10n"] = o.StatusL10n
	}
	if !IsNil(o.DataConnectionTypeL10n) {
		toSerialize["data_connection_type_l10n"] = o.DataConnectionTypeL10n
	}
	return toSerialize, nil
}

type NullableDataConnectionInstance struct {
	value *DataConnectionInstance
	isSet bool
}

func (v NullableDataConnectionInstance) Get() *DataConnectionInstance {
	return v.value
}

func (v *NullableDataConnectionInstance) Set(val *DataConnectionInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConnectionInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConnectionInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConnectionInstance(val *DataConnectionInstance) *NullableDataConnectionInstance {
	return &NullableDataConnectionInstance{value: val, isSet: true}
}

func (v NullableDataConnectionInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConnectionInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


