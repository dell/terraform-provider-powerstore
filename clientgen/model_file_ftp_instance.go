/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileFtpInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileFtpInstance{}

// FileFtpInstance Properties of the file FTP instance. This resource type has queriable association from nas_server
type FileFtpInstance struct {
	// Unique identifier of the FTP server.
	Id *string `json:"id,omitempty"`
	// Unique identifier of the NAS server that is configured with the FTP server.
	NasServerId *string `json:"nas_server_id,omitempty"`
	// Indicates whether the FTP server is enabled on the NAS server. Values are: - true - FTP server is enabled on the specified NAS server. - false - FTP server is disabled on the specified NAS server. 
	IsFtpEnabled *bool `json:"is_ftp_enabled,omitempty"`
	// Indicates whether the SFTP server is enabled on the NAS server. Values are: - true - SFTP server is enabled on the specified NAS server. - false - SFTP server is disabled on the specified NAS server. 
	IsSftpEnabled *bool `json:"is_sftp_enabled,omitempty"`
	// Indicates whether FTP and SFTP clients can be authenticated using an SMB user name. These user names are defined in a Windows domain controller, and their formats are user@domain or domain\\\\user. Values are: - true - SMB user names are accepted for authentication. - false - SMB user names are not accepted for authentication. 
	IsSmbAuthenticationEnabled *bool `json:"is_smb_authentication_enabled,omitempty"`
	// Indicates whether FTP and SFTP clients can be authenticated using a Unix user name. Unix user names are defined in LDAP, NIS servers or in local passwd file. Values are: - true - Unix user names are accepted for authentication. - false - Unix user names are not accepted for authentication. 
	IsUnixAuthenticationEnabled *bool `json:"is_unix_authentication_enabled,omitempty"`
	// Indicates whether FTP clients can be authenticated anonymously. Values are: - true - Anonymous user name is accepted. - false - Anonymous user name is not accepted. 
	IsAnonymousAuthenticationEnabled *bool `json:"is_anonymous_authentication_enabled,omitempty"`
	// Indicates whether an FTP or SFTP user access is limited to his home directory. Values are: - true - An FTP or SFTP user can access his or her own home directory only. - false - FTP and SFTP users can access any NAS server directory, according to NAS server permissions. 
	IsHomedirLimitEnabled *bool `json:"is_homedir_limit_enabled,omitempty"`
	// (Applies when the value of is_homedir_limit_enabled is false.) Default directory of FTP and SFTP clients that have a home directory which is not defined or accessible.
	DefaultHomedir *string `json:"default_homedir,omitempty"`
	// Welcome message displayed on the console of FTP and SFTP clients before their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.
	WelcomeMessage *string `json:"welcome_message,omitempty"`
	// Message of the day displayed on the console of FTP clients after their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.
	MessageOfTheDay *string `json:"message_of_the_day,omitempty"`
	// Indicates whether the activity of FTP and SFTP clients is tracked in audit files. Values are: - true - FTP/SFTP activity is tracked. - false - FTP/SFTP activity is not tracked. 
	IsAuditEnabled *bool `json:"is_audit_enabled,omitempty"`
	// (Applies when the value of is_audit_enabled is true.) Directory of FTP/SFTP audit files. Logs are saved in '/' directory (default) or in a mounted file system (Absolute path of the File system directory which should already exist).
	AuditDir *string `json:"audit_dir,omitempty"`
	// (Applies when the value of is_audit_enabled is true.) Maximum size of all (current plus archived) FTP/SFTP audit files, in bytes. There is a maximum of 5 audit files, 1 current audit file (ftp.log) and 4 archived audit files. The maximum value for this setting is 5GB (each file of 1GB) if the audit directory belongs to a user file system of the NAS server. If the audit directory is '/', the maximum value is 5MB (each file of 1MB). The minimum value is 40kB (each file of 8KB) on any file system. 
	AuditMaxSize *int64 `json:"audit_max_size,omitempty"`
	// Allowed or denied hosts, depending on the value of the is_allowed_hosts attribute. A host is defined using its IP address. Subnets using CIDR notation are also supported. - If allowed hosts exist, only those hosts and no others can connect to the NAS server through FTP or SFTP. - If denied hosts exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to NAS server access through FTP or SFTP based on the host IP address. - The addresses may be IPv4 or IPv6. 
	Hosts []string `json:"hosts,omitempty"`
	// Allowed or denied users, depending on the value of the is_allowed_users attribute. - If allowed users exist, only those users and no others can connect to the NAS server through FTP or SFTP. - If denied users exist, they have always access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user name. 
	Users []string `json:"users,omitempty"`
	// Allowed or denied user groups, depending on the value of the is_allowed_groups attribute. - If allowed groups exist, only users who are members of these groups and no others can connect to the NAS server through FTP or SFTP. - If denied groups exist, all users who are members of those groups always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user group. 
	Groups []string `json:"groups,omitempty"`
	// Indicates whether the hosts attribute contains allowed or denied hosts. Values are: - true - Hosts contains allowed hosts. - false - Hosts contains denied hosts. 
	IsAllowedHosts *bool `json:"is_allowed_hosts,omitempty"`
	// Indicates whether the users attribute contains allowed or denied users. Values are: - true - Users contains allowed users. - false - Users contains denied users. 
	IsAllowedUsers *bool `json:"is_allowed_users,omitempty"`
	// Indicates whether the groups attribute contains allowed or denied user groups. Values are: - true - Groups contains allowed user groups. - false - Groups contains denied user groups. 
	IsAllowedGroups *bool `json:"is_allowed_groups,omitempty"`
	NasServer *NasServerInstance `json:"nas_server,omitempty"`
}

// NewFileFtpInstance instantiates a new FileFtpInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileFtpInstance() *FileFtpInstance {
	this := FileFtpInstance{}
	var isSftpEnabled bool = false
	this.IsSftpEnabled = &isSftpEnabled
	var isSmbAuthenticationEnabled bool = true
	this.IsSmbAuthenticationEnabled = &isSmbAuthenticationEnabled
	var isUnixAuthenticationEnabled bool = true
	this.IsUnixAuthenticationEnabled = &isUnixAuthenticationEnabled
	var isAnonymousAuthenticationEnabled bool = true
	this.IsAnonymousAuthenticationEnabled = &isAnonymousAuthenticationEnabled
	var isAuditEnabled bool = false
	this.IsAuditEnabled = &isAuditEnabled
	var isAllowedHosts bool = true
	this.IsAllowedHosts = &isAllowedHosts
	var isAllowedUsers bool = true
	this.IsAllowedUsers = &isAllowedUsers
	var isAllowedGroups bool = true
	this.IsAllowedGroups = &isAllowedGroups
	return &this
}

// NewFileFtpInstanceWithDefaults instantiates a new FileFtpInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileFtpInstanceWithDefaults() *FileFtpInstance {
	this := FileFtpInstance{}
	var isSftpEnabled bool = false
	this.IsSftpEnabled = &isSftpEnabled
	var isSmbAuthenticationEnabled bool = true
	this.IsSmbAuthenticationEnabled = &isSmbAuthenticationEnabled
	var isUnixAuthenticationEnabled bool = true
	this.IsUnixAuthenticationEnabled = &isUnixAuthenticationEnabled
	var isAnonymousAuthenticationEnabled bool = true
	this.IsAnonymousAuthenticationEnabled = &isAnonymousAuthenticationEnabled
	var isAuditEnabled bool = false
	this.IsAuditEnabled = &isAuditEnabled
	var isAllowedHosts bool = true
	this.IsAllowedHosts = &isAllowedHosts
	var isAllowedUsers bool = true
	this.IsAllowedUsers = &isAllowedUsers
	var isAllowedGroups bool = true
	this.IsAllowedGroups = &isAllowedGroups
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileFtpInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileFtpInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileFtpInstance) SetId(v string) {
	o.Id = &v
}

// GetNasServerId returns the NasServerId field value if set, zero value otherwise.
func (o *FileFtpInstance) GetNasServerId() string {
	if o == nil || IsNil(o.NasServerId) {
		var ret string
		return ret
	}
	return *o.NasServerId
}

// GetNasServerIdOk returns a tuple with the NasServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetNasServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NasServerId) {
		return nil, false
	}
	return o.NasServerId, true
}

// HasNasServerId returns a boolean if a field has been set.
func (o *FileFtpInstance) HasNasServerId() bool {
	if o != nil && !IsNil(o.NasServerId) {
		return true
	}

	return false
}

// SetNasServerId gets a reference to the given string and assigns it to the NasServerId field.
func (o *FileFtpInstance) SetNasServerId(v string) {
	o.NasServerId = &v
}

// GetIsFtpEnabled returns the IsFtpEnabled field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsFtpEnabled() bool {
	if o == nil || IsNil(o.IsFtpEnabled) {
		var ret bool
		return ret
	}
	return *o.IsFtpEnabled
}

// GetIsFtpEnabledOk returns a tuple with the IsFtpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsFtpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFtpEnabled) {
		return nil, false
	}
	return o.IsFtpEnabled, true
}

// HasIsFtpEnabled returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsFtpEnabled() bool {
	if o != nil && !IsNil(o.IsFtpEnabled) {
		return true
	}

	return false
}

// SetIsFtpEnabled gets a reference to the given bool and assigns it to the IsFtpEnabled field.
func (o *FileFtpInstance) SetIsFtpEnabled(v bool) {
	o.IsFtpEnabled = &v
}

// GetIsSftpEnabled returns the IsSftpEnabled field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsSftpEnabled() bool {
	if o == nil || IsNil(o.IsSftpEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSftpEnabled
}

// GetIsSftpEnabledOk returns a tuple with the IsSftpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsSftpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSftpEnabled) {
		return nil, false
	}
	return o.IsSftpEnabled, true
}

// HasIsSftpEnabled returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsSftpEnabled() bool {
	if o != nil && !IsNil(o.IsSftpEnabled) {
		return true
	}

	return false
}

// SetIsSftpEnabled gets a reference to the given bool and assigns it to the IsSftpEnabled field.
func (o *FileFtpInstance) SetIsSftpEnabled(v bool) {
	o.IsSftpEnabled = &v
}

// GetIsSmbAuthenticationEnabled returns the IsSmbAuthenticationEnabled field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsSmbAuthenticationEnabled() bool {
	if o == nil || IsNil(o.IsSmbAuthenticationEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSmbAuthenticationEnabled
}

// GetIsSmbAuthenticationEnabledOk returns a tuple with the IsSmbAuthenticationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsSmbAuthenticationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmbAuthenticationEnabled) {
		return nil, false
	}
	return o.IsSmbAuthenticationEnabled, true
}

// HasIsSmbAuthenticationEnabled returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsSmbAuthenticationEnabled() bool {
	if o != nil && !IsNil(o.IsSmbAuthenticationEnabled) {
		return true
	}

	return false
}

// SetIsSmbAuthenticationEnabled gets a reference to the given bool and assigns it to the IsSmbAuthenticationEnabled field.
func (o *FileFtpInstance) SetIsSmbAuthenticationEnabled(v bool) {
	o.IsSmbAuthenticationEnabled = &v
}

// GetIsUnixAuthenticationEnabled returns the IsUnixAuthenticationEnabled field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsUnixAuthenticationEnabled() bool {
	if o == nil || IsNil(o.IsUnixAuthenticationEnabled) {
		var ret bool
		return ret
	}
	return *o.IsUnixAuthenticationEnabled
}

// GetIsUnixAuthenticationEnabledOk returns a tuple with the IsUnixAuthenticationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsUnixAuthenticationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUnixAuthenticationEnabled) {
		return nil, false
	}
	return o.IsUnixAuthenticationEnabled, true
}

// HasIsUnixAuthenticationEnabled returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsUnixAuthenticationEnabled() bool {
	if o != nil && !IsNil(o.IsUnixAuthenticationEnabled) {
		return true
	}

	return false
}

// SetIsUnixAuthenticationEnabled gets a reference to the given bool and assigns it to the IsUnixAuthenticationEnabled field.
func (o *FileFtpInstance) SetIsUnixAuthenticationEnabled(v bool) {
	o.IsUnixAuthenticationEnabled = &v
}

// GetIsAnonymousAuthenticationEnabled returns the IsAnonymousAuthenticationEnabled field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsAnonymousAuthenticationEnabled() bool {
	if o == nil || IsNil(o.IsAnonymousAuthenticationEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAnonymousAuthenticationEnabled
}

// GetIsAnonymousAuthenticationEnabledOk returns a tuple with the IsAnonymousAuthenticationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsAnonymousAuthenticationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnonymousAuthenticationEnabled) {
		return nil, false
	}
	return o.IsAnonymousAuthenticationEnabled, true
}

// HasIsAnonymousAuthenticationEnabled returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsAnonymousAuthenticationEnabled() bool {
	if o != nil && !IsNil(o.IsAnonymousAuthenticationEnabled) {
		return true
	}

	return false
}

// SetIsAnonymousAuthenticationEnabled gets a reference to the given bool and assigns it to the IsAnonymousAuthenticationEnabled field.
func (o *FileFtpInstance) SetIsAnonymousAuthenticationEnabled(v bool) {
	o.IsAnonymousAuthenticationEnabled = &v
}

// GetIsHomedirLimitEnabled returns the IsHomedirLimitEnabled field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsHomedirLimitEnabled() bool {
	if o == nil || IsNil(o.IsHomedirLimitEnabled) {
		var ret bool
		return ret
	}
	return *o.IsHomedirLimitEnabled
}

// GetIsHomedirLimitEnabledOk returns a tuple with the IsHomedirLimitEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsHomedirLimitEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHomedirLimitEnabled) {
		return nil, false
	}
	return o.IsHomedirLimitEnabled, true
}

// HasIsHomedirLimitEnabled returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsHomedirLimitEnabled() bool {
	if o != nil && !IsNil(o.IsHomedirLimitEnabled) {
		return true
	}

	return false
}

// SetIsHomedirLimitEnabled gets a reference to the given bool and assigns it to the IsHomedirLimitEnabled field.
func (o *FileFtpInstance) SetIsHomedirLimitEnabled(v bool) {
	o.IsHomedirLimitEnabled = &v
}

// GetDefaultHomedir returns the DefaultHomedir field value if set, zero value otherwise.
func (o *FileFtpInstance) GetDefaultHomedir() string {
	if o == nil || IsNil(o.DefaultHomedir) {
		var ret string
		return ret
	}
	return *o.DefaultHomedir
}

// GetDefaultHomedirOk returns a tuple with the DefaultHomedir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetDefaultHomedirOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultHomedir) {
		return nil, false
	}
	return o.DefaultHomedir, true
}

// HasDefaultHomedir returns a boolean if a field has been set.
func (o *FileFtpInstance) HasDefaultHomedir() bool {
	if o != nil && !IsNil(o.DefaultHomedir) {
		return true
	}

	return false
}

// SetDefaultHomedir gets a reference to the given string and assigns it to the DefaultHomedir field.
func (o *FileFtpInstance) SetDefaultHomedir(v string) {
	o.DefaultHomedir = &v
}

// GetWelcomeMessage returns the WelcomeMessage field value if set, zero value otherwise.
func (o *FileFtpInstance) GetWelcomeMessage() string {
	if o == nil || IsNil(o.WelcomeMessage) {
		var ret string
		return ret
	}
	return *o.WelcomeMessage
}

// GetWelcomeMessageOk returns a tuple with the WelcomeMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetWelcomeMessageOk() (*string, bool) {
	if o == nil || IsNil(o.WelcomeMessage) {
		return nil, false
	}
	return o.WelcomeMessage, true
}

// HasWelcomeMessage returns a boolean if a field has been set.
func (o *FileFtpInstance) HasWelcomeMessage() bool {
	if o != nil && !IsNil(o.WelcomeMessage) {
		return true
	}

	return false
}

// SetWelcomeMessage gets a reference to the given string and assigns it to the WelcomeMessage field.
func (o *FileFtpInstance) SetWelcomeMessage(v string) {
	o.WelcomeMessage = &v
}

// GetMessageOfTheDay returns the MessageOfTheDay field value if set, zero value otherwise.
func (o *FileFtpInstance) GetMessageOfTheDay() string {
	if o == nil || IsNil(o.MessageOfTheDay) {
		var ret string
		return ret
	}
	return *o.MessageOfTheDay
}

// GetMessageOfTheDayOk returns a tuple with the MessageOfTheDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetMessageOfTheDayOk() (*string, bool) {
	if o == nil || IsNil(o.MessageOfTheDay) {
		return nil, false
	}
	return o.MessageOfTheDay, true
}

// HasMessageOfTheDay returns a boolean if a field has been set.
func (o *FileFtpInstance) HasMessageOfTheDay() bool {
	if o != nil && !IsNil(o.MessageOfTheDay) {
		return true
	}

	return false
}

// SetMessageOfTheDay gets a reference to the given string and assigns it to the MessageOfTheDay field.
func (o *FileFtpInstance) SetMessageOfTheDay(v string) {
	o.MessageOfTheDay = &v
}

// GetIsAuditEnabled returns the IsAuditEnabled field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsAuditEnabled() bool {
	if o == nil || IsNil(o.IsAuditEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAuditEnabled
}

// GetIsAuditEnabledOk returns a tuple with the IsAuditEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsAuditEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAuditEnabled) {
		return nil, false
	}
	return o.IsAuditEnabled, true
}

// HasIsAuditEnabled returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsAuditEnabled() bool {
	if o != nil && !IsNil(o.IsAuditEnabled) {
		return true
	}

	return false
}

// SetIsAuditEnabled gets a reference to the given bool and assigns it to the IsAuditEnabled field.
func (o *FileFtpInstance) SetIsAuditEnabled(v bool) {
	o.IsAuditEnabled = &v
}

// GetAuditDir returns the AuditDir field value if set, zero value otherwise.
func (o *FileFtpInstance) GetAuditDir() string {
	if o == nil || IsNil(o.AuditDir) {
		var ret string
		return ret
	}
	return *o.AuditDir
}

// GetAuditDirOk returns a tuple with the AuditDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetAuditDirOk() (*string, bool) {
	if o == nil || IsNil(o.AuditDir) {
		return nil, false
	}
	return o.AuditDir, true
}

// HasAuditDir returns a boolean if a field has been set.
func (o *FileFtpInstance) HasAuditDir() bool {
	if o != nil && !IsNil(o.AuditDir) {
		return true
	}

	return false
}

// SetAuditDir gets a reference to the given string and assigns it to the AuditDir field.
func (o *FileFtpInstance) SetAuditDir(v string) {
	o.AuditDir = &v
}

// GetAuditMaxSize returns the AuditMaxSize field value if set, zero value otherwise.
func (o *FileFtpInstance) GetAuditMaxSize() int64 {
	if o == nil || IsNil(o.AuditMaxSize) {
		var ret int64
		return ret
	}
	return *o.AuditMaxSize
}

// GetAuditMaxSizeOk returns a tuple with the AuditMaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetAuditMaxSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AuditMaxSize) {
		return nil, false
	}
	return o.AuditMaxSize, true
}

// HasAuditMaxSize returns a boolean if a field has been set.
func (o *FileFtpInstance) HasAuditMaxSize() bool {
	if o != nil && !IsNil(o.AuditMaxSize) {
		return true
	}

	return false
}

// SetAuditMaxSize gets a reference to the given int64 and assigns it to the AuditMaxSize field.
func (o *FileFtpInstance) SetAuditMaxSize(v int64) {
	o.AuditMaxSize = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *FileFtpInstance) GetHosts() []string {
	if o == nil || IsNil(o.Hosts) {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *FileFtpInstance) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *FileFtpInstance) SetHosts(v []string) {
	o.Hosts = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *FileFtpInstance) GetUsers() []string {
	if o == nil || IsNil(o.Users) {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *FileFtpInstance) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *FileFtpInstance) SetUsers(v []string) {
	o.Users = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *FileFtpInstance) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *FileFtpInstance) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *FileFtpInstance) SetGroups(v []string) {
	o.Groups = v
}

// GetIsAllowedHosts returns the IsAllowedHosts field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsAllowedHosts() bool {
	if o == nil || IsNil(o.IsAllowedHosts) {
		var ret bool
		return ret
	}
	return *o.IsAllowedHosts
}

// GetIsAllowedHostsOk returns a tuple with the IsAllowedHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsAllowedHostsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowedHosts) {
		return nil, false
	}
	return o.IsAllowedHosts, true
}

// HasIsAllowedHosts returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsAllowedHosts() bool {
	if o != nil && !IsNil(o.IsAllowedHosts) {
		return true
	}

	return false
}

// SetIsAllowedHosts gets a reference to the given bool and assigns it to the IsAllowedHosts field.
func (o *FileFtpInstance) SetIsAllowedHosts(v bool) {
	o.IsAllowedHosts = &v
}

// GetIsAllowedUsers returns the IsAllowedUsers field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsAllowedUsers() bool {
	if o == nil || IsNil(o.IsAllowedUsers) {
		var ret bool
		return ret
	}
	return *o.IsAllowedUsers
}

// GetIsAllowedUsersOk returns a tuple with the IsAllowedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsAllowedUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowedUsers) {
		return nil, false
	}
	return o.IsAllowedUsers, true
}

// HasIsAllowedUsers returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsAllowedUsers() bool {
	if o != nil && !IsNil(o.IsAllowedUsers) {
		return true
	}

	return false
}

// SetIsAllowedUsers gets a reference to the given bool and assigns it to the IsAllowedUsers field.
func (o *FileFtpInstance) SetIsAllowedUsers(v bool) {
	o.IsAllowedUsers = &v
}

// GetIsAllowedGroups returns the IsAllowedGroups field value if set, zero value otherwise.
func (o *FileFtpInstance) GetIsAllowedGroups() bool {
	if o == nil || IsNil(o.IsAllowedGroups) {
		var ret bool
		return ret
	}
	return *o.IsAllowedGroups
}

// GetIsAllowedGroupsOk returns a tuple with the IsAllowedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetIsAllowedGroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowedGroups) {
		return nil, false
	}
	return o.IsAllowedGroups, true
}

// HasIsAllowedGroups returns a boolean if a field has been set.
func (o *FileFtpInstance) HasIsAllowedGroups() bool {
	if o != nil && !IsNil(o.IsAllowedGroups) {
		return true
	}

	return false
}

// SetIsAllowedGroups gets a reference to the given bool and assigns it to the IsAllowedGroups field.
func (o *FileFtpInstance) SetIsAllowedGroups(v bool) {
	o.IsAllowedGroups = &v
}

// GetNasServer returns the NasServer field value if set, zero value otherwise.
func (o *FileFtpInstance) GetNasServer() NasServerInstance {
	if o == nil || IsNil(o.NasServer) {
		var ret NasServerInstance
		return ret
	}
	return *o.NasServer
}

// GetNasServerOk returns a tuple with the NasServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFtpInstance) GetNasServerOk() (*NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServer) {
		return nil, false
	}
	return o.NasServer, true
}

// HasNasServer returns a boolean if a field has been set.
func (o *FileFtpInstance) HasNasServer() bool {
	if o != nil && !IsNil(o.NasServer) {
		return true
	}

	return false
}

// SetNasServer gets a reference to the given NasServerInstance and assigns it to the NasServer field.
func (o *FileFtpInstance) SetNasServer(v NasServerInstance) {
	o.NasServer = &v
}

func (o FileFtpInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileFtpInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NasServerId) {
		toSerialize["nas_server_id"] = o.NasServerId
	}
	if !IsNil(o.IsFtpEnabled) {
		toSerialize["is_ftp_enabled"] = o.IsFtpEnabled
	}
	if !IsNil(o.IsSftpEnabled) {
		toSerialize["is_sftp_enabled"] = o.IsSftpEnabled
	}
	if !IsNil(o.IsSmbAuthenticationEnabled) {
		toSerialize["is_smb_authentication_enabled"] = o.IsSmbAuthenticationEnabled
	}
	if !IsNil(o.IsUnixAuthenticationEnabled) {
		toSerialize["is_unix_authentication_enabled"] = o.IsUnixAuthenticationEnabled
	}
	if !IsNil(o.IsAnonymousAuthenticationEnabled) {
		toSerialize["is_anonymous_authentication_enabled"] = o.IsAnonymousAuthenticationEnabled
	}
	if !IsNil(o.IsHomedirLimitEnabled) {
		toSerialize["is_homedir_limit_enabled"] = o.IsHomedirLimitEnabled
	}
	if !IsNil(o.DefaultHomedir) {
		toSerialize["default_homedir"] = o.DefaultHomedir
	}
	if !IsNil(o.WelcomeMessage) {
		toSerialize["welcome_message"] = o.WelcomeMessage
	}
	if !IsNil(o.MessageOfTheDay) {
		toSerialize["message_of_the_day"] = o.MessageOfTheDay
	}
	if !IsNil(o.IsAuditEnabled) {
		toSerialize["is_audit_enabled"] = o.IsAuditEnabled
	}
	if !IsNil(o.AuditDir) {
		toSerialize["audit_dir"] = o.AuditDir
	}
	if !IsNil(o.AuditMaxSize) {
		toSerialize["audit_max_size"] = o.AuditMaxSize
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.IsAllowedHosts) {
		toSerialize["is_allowed_hosts"] = o.IsAllowedHosts
	}
	if !IsNil(o.IsAllowedUsers) {
		toSerialize["is_allowed_users"] = o.IsAllowedUsers
	}
	if !IsNil(o.IsAllowedGroups) {
		toSerialize["is_allowed_groups"] = o.IsAllowedGroups
	}
	if !IsNil(o.NasServer) {
		toSerialize["nas_server"] = o.NasServer
	}
	return toSerialize, nil
}

type NullableFileFtpInstance struct {
	value *FileFtpInstance
	isSet bool
}

func (v NullableFileFtpInstance) Get() *FileFtpInstance {
	return v.value
}

func (v *NullableFileFtpInstance) Set(val *FileFtpInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileFtpInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileFtpInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileFtpInstance(val *FileFtpInstance) *NullableFileFtpInstance {
	return &NullableFileFtpInstance{value: val, isSet: true}
}

func (v NullableFileFtpInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileFtpInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


