/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileLdapInstanceSourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileLdapInstanceSourceParameters{}

// FileLdapInstanceSourceParameters Information about the corresponding source NAS Server's File LDAP settings. Only populated when is_destination_override_enabled flag is set to true. Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.
type FileLdapInstanceSourceParameters struct {
	// The list of LDAP server IP addresses. The addresses may be IPv4 or IPv6.
	Addresses []string `json:"addresses,omitempty"`
}

// NewFileLdapInstanceSourceParameters instantiates a new FileLdapInstanceSourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileLdapInstanceSourceParameters() *FileLdapInstanceSourceParameters {
	this := FileLdapInstanceSourceParameters{}
	return &this
}

// NewFileLdapInstanceSourceParametersWithDefaults instantiates a new FileLdapInstanceSourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileLdapInstanceSourceParametersWithDefaults() *FileLdapInstanceSourceParameters {
	this := FileLdapInstanceSourceParameters{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *FileLdapInstanceSourceParameters) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstanceSourceParameters) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *FileLdapInstanceSourceParameters) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *FileLdapInstanceSourceParameters) SetAddresses(v []string) {
	o.Addresses = v
}

func (o FileLdapInstanceSourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileLdapInstanceSourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	return toSerialize, nil
}

type NullableFileLdapInstanceSourceParameters struct {
	value *FileLdapInstanceSourceParameters
	isSet bool
}

func (v NullableFileLdapInstanceSourceParameters) Get() *FileLdapInstanceSourceParameters {
	return v.value
}

func (v *NullableFileLdapInstanceSourceParameters) Set(val *FileLdapInstanceSourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableFileLdapInstanceSourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableFileLdapInstanceSourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileLdapInstanceSourceParameters(val *FileLdapInstanceSourceParameters) *NullableFileLdapInstanceSourceParameters {
	return &NullableFileLdapInstanceSourceParameters{value: val, isSet: true}
}

func (v NullableFileLdapInstanceSourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileLdapInstanceSourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


