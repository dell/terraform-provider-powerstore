/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FileLdapInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileLdapInstance{}

// FileLdapInstance This resource type has queriable association from nas_server
type FileLdapInstance struct {
	// Unique identifier of the LDAP service object.
	Id *string `json:"id,omitempty"`
	// Unique identifier of the associated NAS Server instance that uses this LDAP object. Only one LDAP object per NAS Server is supported. 
	NasServerId *string `json:"nas_server_id,omitempty"`
	// Name of the LDAP base DN.  Base Distinguished Name (BDN) of the root of the LDAP directory tree. The appliance uses the DN to bind to the LDAP service and locate in the LDAP directory tree to begin a search for information.   The base DN can be expressed as a fully-qualified domain name or in X.509 format by using the attribute dc=. For example, if the fully-qualified domain name is mycompany.com, the base DN is expressed as dc=mycompany,dc=com.
	BaseDN *string `json:"base_DN,omitempty"`
	// For an iPlanet LDAP server, specifies the DN of the entry with the configuration profile.
	ProfileDN *string `json:"profile_DN,omitempty"`
	// The list of LDAP server IP addresses. The addresses may be IPv4 or IPv6.
	Addresses []string `json:"addresses,omitempty"`
	// The TCP/IP port used by the NAS Server to connect to the LDAP servers. The default port number for LDAP is 389 and LDAPS is 636.
	PortNumber *int32 `json:"port_number,omitempty"`
	AuthenticationType *FileLDAPAuthenticationTypeEnum `json:"authentication_type,omitempty"`
	Protocol *FileLDAPProtocolEnum `json:"protocol,omitempty"`
	// Indicates whether a Certification Authority certificate is used to verify the LDAP server certificate for secure SSL connections. Values are:  * true - verifies LDAP server's certificate.  * false - doesn't verify LDAP server's certificate. 
	IsVerifyServerCertificate *bool `json:"is_verify_server_certificate,omitempty"`
	// Bind Distinguished Name (DN) to be used when binding.
	BindDN *string `json:"bind_DN,omitempty"`
	// Indicates whether SMB authentication is used to authenticate to the LDAP server. Values are:     * true - Indicates that the SMB settings are used for Kerberos authentication.     * false - Indicates that Kerberos uses its own settings. 
	IsSmbAccountUsed *bool `json:"is_smb_account_used,omitempty"`
	// Specifies the principal name for Kerberos authentication.
	Principal *string `json:"principal,omitempty"`
	// Specifies the realm name for Kerberos authentication.
	Realm *string `json:"realm,omitempty"`
	SchemaType *FileLDAPSchemaTypeEnum `json:"schema_type,omitempty"`
	// Indicates whether an LDAP configuration file has been uploaded.
	IsConfigFileUploaded *bool `json:"is_config_file_uploaded,omitempty"`
	// Indicates whether an LDAP certificate file has been uploaded.
	IsCertificateUploaded *bool `json:"is_certificate_uploaded,omitempty"`
	// In order to modify any properties of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true these properties may be modified: addresses Values are:   true - Enable locally set properties. Source property changes will propagate to the source_parameters of the resource.   false - Reset the properties to the ones from the source. Source property changes will propagate directly to this resource.  Was added in version 3.0.0.0.
	IsDestinationOverrideEnabled *bool `json:"is_destination_override_enabled,omitempty"`
	SourceParameters *FileLdapInstanceSourceParameters `json:"source_parameters,omitempty"`
	// Localized message string corresponding to authentication_type
	AuthenticationTypeL10n *string `json:"authentication_type_l10n,omitempty"`
	// Localized message string corresponding to protocol
	ProtocolL10n *string `json:"protocol_l10n,omitempty"`
	// Localized message string corresponding to schema_type
	SchemaTypeL10n *string `json:"schema_type_l10n,omitempty"`
	NasServer *NasServerInstance `json:"nas_server,omitempty"`
}

// NewFileLdapInstance instantiates a new FileLdapInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileLdapInstance() *FileLdapInstance {
	this := FileLdapInstance{}
	var isConfigFileUploaded bool = false
	this.IsConfigFileUploaded = &isConfigFileUploaded
	var isCertificateUploaded bool = false
	this.IsCertificateUploaded = &isCertificateUploaded
	var isDestinationOverrideEnabled bool = false
	this.IsDestinationOverrideEnabled = &isDestinationOverrideEnabled
	return &this
}

// NewFileLdapInstanceWithDefaults instantiates a new FileLdapInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileLdapInstanceWithDefaults() *FileLdapInstance {
	this := FileLdapInstance{}
	var isConfigFileUploaded bool = false
	this.IsConfigFileUploaded = &isConfigFileUploaded
	var isCertificateUploaded bool = false
	this.IsCertificateUploaded = &isCertificateUploaded
	var isDestinationOverrideEnabled bool = false
	this.IsDestinationOverrideEnabled = &isDestinationOverrideEnabled
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileLdapInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileLdapInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileLdapInstance) SetId(v string) {
	o.Id = &v
}

// GetNasServerId returns the NasServerId field value if set, zero value otherwise.
func (o *FileLdapInstance) GetNasServerId() string {
	if o == nil || IsNil(o.NasServerId) {
		var ret string
		return ret
	}
	return *o.NasServerId
}

// GetNasServerIdOk returns a tuple with the NasServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetNasServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NasServerId) {
		return nil, false
	}
	return o.NasServerId, true
}

// HasNasServerId returns a boolean if a field has been set.
func (o *FileLdapInstance) HasNasServerId() bool {
	if o != nil && !IsNil(o.NasServerId) {
		return true
	}

	return false
}

// SetNasServerId gets a reference to the given string and assigns it to the NasServerId field.
func (o *FileLdapInstance) SetNasServerId(v string) {
	o.NasServerId = &v
}

// GetBaseDN returns the BaseDN field value if set, zero value otherwise.
func (o *FileLdapInstance) GetBaseDN() string {
	if o == nil || IsNil(o.BaseDN) {
		var ret string
		return ret
	}
	return *o.BaseDN
}

// GetBaseDNOk returns a tuple with the BaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetBaseDNOk() (*string, bool) {
	if o == nil || IsNil(o.BaseDN) {
		return nil, false
	}
	return o.BaseDN, true
}

// HasBaseDN returns a boolean if a field has been set.
func (o *FileLdapInstance) HasBaseDN() bool {
	if o != nil && !IsNil(o.BaseDN) {
		return true
	}

	return false
}

// SetBaseDN gets a reference to the given string and assigns it to the BaseDN field.
func (o *FileLdapInstance) SetBaseDN(v string) {
	o.BaseDN = &v
}

// GetProfileDN returns the ProfileDN field value if set, zero value otherwise.
func (o *FileLdapInstance) GetProfileDN() string {
	if o == nil || IsNil(o.ProfileDN) {
		var ret string
		return ret
	}
	return *o.ProfileDN
}

// GetProfileDNOk returns a tuple with the ProfileDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetProfileDNOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileDN) {
		return nil, false
	}
	return o.ProfileDN, true
}

// HasProfileDN returns a boolean if a field has been set.
func (o *FileLdapInstance) HasProfileDN() bool {
	if o != nil && !IsNil(o.ProfileDN) {
		return true
	}

	return false
}

// SetProfileDN gets a reference to the given string and assigns it to the ProfileDN field.
func (o *FileLdapInstance) SetProfileDN(v string) {
	o.ProfileDN = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *FileLdapInstance) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *FileLdapInstance) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *FileLdapInstance) SetAddresses(v []string) {
	o.Addresses = v
}

// GetPortNumber returns the PortNumber field value if set, zero value otherwise.
func (o *FileLdapInstance) GetPortNumber() int32 {
	if o == nil || IsNil(o.PortNumber) {
		var ret int32
		return ret
	}
	return *o.PortNumber
}

// GetPortNumberOk returns a tuple with the PortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetPortNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.PortNumber) {
		return nil, false
	}
	return o.PortNumber, true
}

// HasPortNumber returns a boolean if a field has been set.
func (o *FileLdapInstance) HasPortNumber() bool {
	if o != nil && !IsNil(o.PortNumber) {
		return true
	}

	return false
}

// SetPortNumber gets a reference to the given int32 and assigns it to the PortNumber field.
func (o *FileLdapInstance) SetPortNumber(v int32) {
	o.PortNumber = &v
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise.
func (o *FileLdapInstance) GetAuthenticationType() FileLDAPAuthenticationTypeEnum {
	if o == nil || IsNil(o.AuthenticationType) {
		var ret FileLDAPAuthenticationTypeEnum
		return ret
	}
	return *o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetAuthenticationTypeOk() (*FileLDAPAuthenticationTypeEnum, bool) {
	if o == nil || IsNil(o.AuthenticationType) {
		return nil, false
	}
	return o.AuthenticationType, true
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *FileLdapInstance) HasAuthenticationType() bool {
	if o != nil && !IsNil(o.AuthenticationType) {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given FileLDAPAuthenticationTypeEnum and assigns it to the AuthenticationType field.
func (o *FileLdapInstance) SetAuthenticationType(v FileLDAPAuthenticationTypeEnum) {
	o.AuthenticationType = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *FileLdapInstance) GetProtocol() FileLDAPProtocolEnum {
	if o == nil || IsNil(o.Protocol) {
		var ret FileLDAPProtocolEnum
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetProtocolOk() (*FileLDAPProtocolEnum, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *FileLdapInstance) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given FileLDAPProtocolEnum and assigns it to the Protocol field.
func (o *FileLdapInstance) SetProtocol(v FileLDAPProtocolEnum) {
	o.Protocol = &v
}

// GetIsVerifyServerCertificate returns the IsVerifyServerCertificate field value if set, zero value otherwise.
func (o *FileLdapInstance) GetIsVerifyServerCertificate() bool {
	if o == nil || IsNil(o.IsVerifyServerCertificate) {
		var ret bool
		return ret
	}
	return *o.IsVerifyServerCertificate
}

// GetIsVerifyServerCertificateOk returns a tuple with the IsVerifyServerCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetIsVerifyServerCertificateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVerifyServerCertificate) {
		return nil, false
	}
	return o.IsVerifyServerCertificate, true
}

// HasIsVerifyServerCertificate returns a boolean if a field has been set.
func (o *FileLdapInstance) HasIsVerifyServerCertificate() bool {
	if o != nil && !IsNil(o.IsVerifyServerCertificate) {
		return true
	}

	return false
}

// SetIsVerifyServerCertificate gets a reference to the given bool and assigns it to the IsVerifyServerCertificate field.
func (o *FileLdapInstance) SetIsVerifyServerCertificate(v bool) {
	o.IsVerifyServerCertificate = &v
}

// GetBindDN returns the BindDN field value if set, zero value otherwise.
func (o *FileLdapInstance) GetBindDN() string {
	if o == nil || IsNil(o.BindDN) {
		var ret string
		return ret
	}
	return *o.BindDN
}

// GetBindDNOk returns a tuple with the BindDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetBindDNOk() (*string, bool) {
	if o == nil || IsNil(o.BindDN) {
		return nil, false
	}
	return o.BindDN, true
}

// HasBindDN returns a boolean if a field has been set.
func (o *FileLdapInstance) HasBindDN() bool {
	if o != nil && !IsNil(o.BindDN) {
		return true
	}

	return false
}

// SetBindDN gets a reference to the given string and assigns it to the BindDN field.
func (o *FileLdapInstance) SetBindDN(v string) {
	o.BindDN = &v
}

// GetIsSmbAccountUsed returns the IsSmbAccountUsed field value if set, zero value otherwise.
func (o *FileLdapInstance) GetIsSmbAccountUsed() bool {
	if o == nil || IsNil(o.IsSmbAccountUsed) {
		var ret bool
		return ret
	}
	return *o.IsSmbAccountUsed
}

// GetIsSmbAccountUsedOk returns a tuple with the IsSmbAccountUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetIsSmbAccountUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmbAccountUsed) {
		return nil, false
	}
	return o.IsSmbAccountUsed, true
}

// HasIsSmbAccountUsed returns a boolean if a field has been set.
func (o *FileLdapInstance) HasIsSmbAccountUsed() bool {
	if o != nil && !IsNil(o.IsSmbAccountUsed) {
		return true
	}

	return false
}

// SetIsSmbAccountUsed gets a reference to the given bool and assigns it to the IsSmbAccountUsed field.
func (o *FileLdapInstance) SetIsSmbAccountUsed(v bool) {
	o.IsSmbAccountUsed = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *FileLdapInstance) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *FileLdapInstance) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *FileLdapInstance) SetPrincipal(v string) {
	o.Principal = &v
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *FileLdapInstance) GetRealm() string {
	if o == nil || IsNil(o.Realm) {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetRealmOk() (*string, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *FileLdapInstance) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *FileLdapInstance) SetRealm(v string) {
	o.Realm = &v
}

// GetSchemaType returns the SchemaType field value if set, zero value otherwise.
func (o *FileLdapInstance) GetSchemaType() FileLDAPSchemaTypeEnum {
	if o == nil || IsNil(o.SchemaType) {
		var ret FileLDAPSchemaTypeEnum
		return ret
	}
	return *o.SchemaType
}

// GetSchemaTypeOk returns a tuple with the SchemaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetSchemaTypeOk() (*FileLDAPSchemaTypeEnum, bool) {
	if o == nil || IsNil(o.SchemaType) {
		return nil, false
	}
	return o.SchemaType, true
}

// HasSchemaType returns a boolean if a field has been set.
func (o *FileLdapInstance) HasSchemaType() bool {
	if o != nil && !IsNil(o.SchemaType) {
		return true
	}

	return false
}

// SetSchemaType gets a reference to the given FileLDAPSchemaTypeEnum and assigns it to the SchemaType field.
func (o *FileLdapInstance) SetSchemaType(v FileLDAPSchemaTypeEnum) {
	o.SchemaType = &v
}

// GetIsConfigFileUploaded returns the IsConfigFileUploaded field value if set, zero value otherwise.
func (o *FileLdapInstance) GetIsConfigFileUploaded() bool {
	if o == nil || IsNil(o.IsConfigFileUploaded) {
		var ret bool
		return ret
	}
	return *o.IsConfigFileUploaded
}

// GetIsConfigFileUploadedOk returns a tuple with the IsConfigFileUploaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetIsConfigFileUploadedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConfigFileUploaded) {
		return nil, false
	}
	return o.IsConfigFileUploaded, true
}

// HasIsConfigFileUploaded returns a boolean if a field has been set.
func (o *FileLdapInstance) HasIsConfigFileUploaded() bool {
	if o != nil && !IsNil(o.IsConfigFileUploaded) {
		return true
	}

	return false
}

// SetIsConfigFileUploaded gets a reference to the given bool and assigns it to the IsConfigFileUploaded field.
func (o *FileLdapInstance) SetIsConfigFileUploaded(v bool) {
	o.IsConfigFileUploaded = &v
}

// GetIsCertificateUploaded returns the IsCertificateUploaded field value if set, zero value otherwise.
func (o *FileLdapInstance) GetIsCertificateUploaded() bool {
	if o == nil || IsNil(o.IsCertificateUploaded) {
		var ret bool
		return ret
	}
	return *o.IsCertificateUploaded
}

// GetIsCertificateUploadedOk returns a tuple with the IsCertificateUploaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetIsCertificateUploadedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCertificateUploaded) {
		return nil, false
	}
	return o.IsCertificateUploaded, true
}

// HasIsCertificateUploaded returns a boolean if a field has been set.
func (o *FileLdapInstance) HasIsCertificateUploaded() bool {
	if o != nil && !IsNil(o.IsCertificateUploaded) {
		return true
	}

	return false
}

// SetIsCertificateUploaded gets a reference to the given bool and assigns it to the IsCertificateUploaded field.
func (o *FileLdapInstance) SetIsCertificateUploaded(v bool) {
	o.IsCertificateUploaded = &v
}

// GetIsDestinationOverrideEnabled returns the IsDestinationOverrideEnabled field value if set, zero value otherwise.
func (o *FileLdapInstance) GetIsDestinationOverrideEnabled() bool {
	if o == nil || IsNil(o.IsDestinationOverrideEnabled) {
		var ret bool
		return ret
	}
	return *o.IsDestinationOverrideEnabled
}

// GetIsDestinationOverrideEnabledOk returns a tuple with the IsDestinationOverrideEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetIsDestinationOverrideEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDestinationOverrideEnabled) {
		return nil, false
	}
	return o.IsDestinationOverrideEnabled, true
}

// HasIsDestinationOverrideEnabled returns a boolean if a field has been set.
func (o *FileLdapInstance) HasIsDestinationOverrideEnabled() bool {
	if o != nil && !IsNil(o.IsDestinationOverrideEnabled) {
		return true
	}

	return false
}

// SetIsDestinationOverrideEnabled gets a reference to the given bool and assigns it to the IsDestinationOverrideEnabled field.
func (o *FileLdapInstance) SetIsDestinationOverrideEnabled(v bool) {
	o.IsDestinationOverrideEnabled = &v
}

// GetSourceParameters returns the SourceParameters field value if set, zero value otherwise.
func (o *FileLdapInstance) GetSourceParameters() FileLdapInstanceSourceParameters {
	if o == nil || IsNil(o.SourceParameters) {
		var ret FileLdapInstanceSourceParameters
		return ret
	}
	return *o.SourceParameters
}

// GetSourceParametersOk returns a tuple with the SourceParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetSourceParametersOk() (*FileLdapInstanceSourceParameters, bool) {
	if o == nil || IsNil(o.SourceParameters) {
		return nil, false
	}
	return o.SourceParameters, true
}

// HasSourceParameters returns a boolean if a field has been set.
func (o *FileLdapInstance) HasSourceParameters() bool {
	if o != nil && !IsNil(o.SourceParameters) {
		return true
	}

	return false
}

// SetSourceParameters gets a reference to the given FileLdapInstanceSourceParameters and assigns it to the SourceParameters field.
func (o *FileLdapInstance) SetSourceParameters(v FileLdapInstanceSourceParameters) {
	o.SourceParameters = &v
}

// GetAuthenticationTypeL10n returns the AuthenticationTypeL10n field value if set, zero value otherwise.
func (o *FileLdapInstance) GetAuthenticationTypeL10n() string {
	if o == nil || IsNil(o.AuthenticationTypeL10n) {
		var ret string
		return ret
	}
	return *o.AuthenticationTypeL10n
}

// GetAuthenticationTypeL10nOk returns a tuple with the AuthenticationTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetAuthenticationTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationTypeL10n) {
		return nil, false
	}
	return o.AuthenticationTypeL10n, true
}

// HasAuthenticationTypeL10n returns a boolean if a field has been set.
func (o *FileLdapInstance) HasAuthenticationTypeL10n() bool {
	if o != nil && !IsNil(o.AuthenticationTypeL10n) {
		return true
	}

	return false
}

// SetAuthenticationTypeL10n gets a reference to the given string and assigns it to the AuthenticationTypeL10n field.
func (o *FileLdapInstance) SetAuthenticationTypeL10n(v string) {
	o.AuthenticationTypeL10n = &v
}

// GetProtocolL10n returns the ProtocolL10n field value if set, zero value otherwise.
func (o *FileLdapInstance) GetProtocolL10n() string {
	if o == nil || IsNil(o.ProtocolL10n) {
		var ret string
		return ret
	}
	return *o.ProtocolL10n
}

// GetProtocolL10nOk returns a tuple with the ProtocolL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetProtocolL10nOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolL10n) {
		return nil, false
	}
	return o.ProtocolL10n, true
}

// HasProtocolL10n returns a boolean if a field has been set.
func (o *FileLdapInstance) HasProtocolL10n() bool {
	if o != nil && !IsNil(o.ProtocolL10n) {
		return true
	}

	return false
}

// SetProtocolL10n gets a reference to the given string and assigns it to the ProtocolL10n field.
func (o *FileLdapInstance) SetProtocolL10n(v string) {
	o.ProtocolL10n = &v
}

// GetSchemaTypeL10n returns the SchemaTypeL10n field value if set, zero value otherwise.
func (o *FileLdapInstance) GetSchemaTypeL10n() string {
	if o == nil || IsNil(o.SchemaTypeL10n) {
		var ret string
		return ret
	}
	return *o.SchemaTypeL10n
}

// GetSchemaTypeL10nOk returns a tuple with the SchemaTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetSchemaTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaTypeL10n) {
		return nil, false
	}
	return o.SchemaTypeL10n, true
}

// HasSchemaTypeL10n returns a boolean if a field has been set.
func (o *FileLdapInstance) HasSchemaTypeL10n() bool {
	if o != nil && !IsNil(o.SchemaTypeL10n) {
		return true
	}

	return false
}

// SetSchemaTypeL10n gets a reference to the given string and assigns it to the SchemaTypeL10n field.
func (o *FileLdapInstance) SetSchemaTypeL10n(v string) {
	o.SchemaTypeL10n = &v
}

// GetNasServer returns the NasServer field value if set, zero value otherwise.
func (o *FileLdapInstance) GetNasServer() NasServerInstance {
	if o == nil || IsNil(o.NasServer) {
		var ret NasServerInstance
		return ret
	}
	return *o.NasServer
}

// GetNasServerOk returns a tuple with the NasServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLdapInstance) GetNasServerOk() (*NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServer) {
		return nil, false
	}
	return o.NasServer, true
}

// HasNasServer returns a boolean if a field has been set.
func (o *FileLdapInstance) HasNasServer() bool {
	if o != nil && !IsNil(o.NasServer) {
		return true
	}

	return false
}

// SetNasServer gets a reference to the given NasServerInstance and assigns it to the NasServer field.
func (o *FileLdapInstance) SetNasServer(v NasServerInstance) {
	o.NasServer = &v
}

func (o FileLdapInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileLdapInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !IsNil(o.NasServerId) {
		toSerialize["nas_server_id"] = o.NasServerId
	}
	if !IsNil(o.BaseDN) {
		toSerialize["base_DN"] = o.BaseDN
	}
	if !IsNil(o.ProfileDN) {
		toSerialize["profile_DN"] = o.ProfileDN
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.PortNumber) {
		toSerialize["port_number"] = o.PortNumber
	}
	if !IsNil(o.AuthenticationType) {
		toSerialize["authentication_type"] = o.AuthenticationType
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.IsVerifyServerCertificate) {
		toSerialize["is_verify_server_certificate"] = o.IsVerifyServerCertificate
	}
	if !IsNil(o.BindDN) {
		toSerialize["bind_DN"] = o.BindDN
	}
	if !IsNil(o.IsSmbAccountUsed) {
		toSerialize["is_smb_account_used"] = o.IsSmbAccountUsed
	}
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.SchemaType) {
		toSerialize["schema_type"] = o.SchemaType
	}
	if !IsNil(o.IsConfigFileUploaded) {
		toSerialize["is_config_file_uploaded"] = o.IsConfigFileUploaded
	}
	if !IsNil(o.IsCertificateUploaded) {
		toSerialize["is_certificate_uploaded"] = o.IsCertificateUploaded
	}
	if !IsNil(o.IsDestinationOverrideEnabled) {
		toSerialize["is_destination_override_enabled"] = o.IsDestinationOverrideEnabled
	}
	if !IsNil(o.SourceParameters) {
		toSerialize["source_parameters"] = o.SourceParameters
	}
	if !IsNil(o.AuthenticationTypeL10n) {
		toSerialize["authentication_type_l10n"] = o.AuthenticationTypeL10n
	}
	if !IsNil(o.ProtocolL10n) {
		toSerialize["protocol_l10n"] = o.ProtocolL10n
	}
	if !IsNil(o.SchemaTypeL10n) {
		toSerialize["schema_type_l10n"] = o.SchemaTypeL10n
	}
	if !IsNil(o.NasServer) {
		toSerialize["nas_server"] = o.NasServer
	}
	return toSerialize, nil
}

type NullableFileLdapInstance struct {
	value *FileLdapInstance
	isSet bool
}

func (v NullableFileLdapInstance) Get() *FileLdapInstance {
	return v.value
}

func (v *NullableFileLdapInstance) Set(val *FileLdapInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFileLdapInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFileLdapInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileLdapInstance(val *FileLdapInstance) *NullableFileLdapInstance {
	return &NullableFileLdapInstance{value: val, isSet: true}
}

func (v NullableFileLdapInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileLdapInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


