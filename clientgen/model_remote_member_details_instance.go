/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the RemoteMemberDetailsInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteMemberDetailsInstance{}

// RemoteMemberDetailsInstance Details of remote member snapshots. Was added in version 3.5.0.0.
type RemoteMemberDetailsInstance struct {
	// The member volume id.
	VolumeId *string `json:"volume_id,omitempty"`
	// This indicates whether member volume is in recycle bin. If member volume is deleted this will be false.
	IsSourceInRecycleBin *bool `json:"is_source_in_recycle_bin,omitempty"`
	// The remote backup id of the member.
	RemoteIdentifier *string `json:"remote_identifier,omitempty"`
	// The name of the member snapshot.
	SnapshotName *string `json:"snapshot_name,omitempty"`
	// The size of the member snapshot in bytes.
	SnapshotSize *int64 `json:"snapshot_size,omitempty"`
}

// NewRemoteMemberDetailsInstance instantiates a new RemoteMemberDetailsInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteMemberDetailsInstance() *RemoteMemberDetailsInstance {
	this := RemoteMemberDetailsInstance{}
	return &this
}

// NewRemoteMemberDetailsInstanceWithDefaults instantiates a new RemoteMemberDetailsInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteMemberDetailsInstanceWithDefaults() *RemoteMemberDetailsInstance {
	this := RemoteMemberDetailsInstance{}
	return &this
}

// GetVolumeId returns the VolumeId field value if set, zero value otherwise.
func (o *RemoteMemberDetailsInstance) GetVolumeId() string {
	if o == nil || IsNil(o.VolumeId) {
		var ret string
		return ret
	}
	return *o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteMemberDetailsInstance) GetVolumeIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeId) {
		return nil, false
	}
	return o.VolumeId, true
}

// HasVolumeId returns a boolean if a field has been set.
func (o *RemoteMemberDetailsInstance) HasVolumeId() bool {
	if o != nil && !IsNil(o.VolumeId) {
		return true
	}

	return false
}

// SetVolumeId gets a reference to the given string and assigns it to the VolumeId field.
func (o *RemoteMemberDetailsInstance) SetVolumeId(v string) {
	o.VolumeId = &v
}

// GetIsSourceInRecycleBin returns the IsSourceInRecycleBin field value if set, zero value otherwise.
func (o *RemoteMemberDetailsInstance) GetIsSourceInRecycleBin() bool {
	if o == nil || IsNil(o.IsSourceInRecycleBin) {
		var ret bool
		return ret
	}
	return *o.IsSourceInRecycleBin
}

// GetIsSourceInRecycleBinOk returns a tuple with the IsSourceInRecycleBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteMemberDetailsInstance) GetIsSourceInRecycleBinOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSourceInRecycleBin) {
		return nil, false
	}
	return o.IsSourceInRecycleBin, true
}

// HasIsSourceInRecycleBin returns a boolean if a field has been set.
func (o *RemoteMemberDetailsInstance) HasIsSourceInRecycleBin() bool {
	if o != nil && !IsNil(o.IsSourceInRecycleBin) {
		return true
	}

	return false
}

// SetIsSourceInRecycleBin gets a reference to the given bool and assigns it to the IsSourceInRecycleBin field.
func (o *RemoteMemberDetailsInstance) SetIsSourceInRecycleBin(v bool) {
	o.IsSourceInRecycleBin = &v
}

// GetRemoteIdentifier returns the RemoteIdentifier field value if set, zero value otherwise.
func (o *RemoteMemberDetailsInstance) GetRemoteIdentifier() string {
	if o == nil || IsNil(o.RemoteIdentifier) {
		var ret string
		return ret
	}
	return *o.RemoteIdentifier
}

// GetRemoteIdentifierOk returns a tuple with the RemoteIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteMemberDetailsInstance) GetRemoteIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteIdentifier) {
		return nil, false
	}
	return o.RemoteIdentifier, true
}

// HasRemoteIdentifier returns a boolean if a field has been set.
func (o *RemoteMemberDetailsInstance) HasRemoteIdentifier() bool {
	if o != nil && !IsNil(o.RemoteIdentifier) {
		return true
	}

	return false
}

// SetRemoteIdentifier gets a reference to the given string and assigns it to the RemoteIdentifier field.
func (o *RemoteMemberDetailsInstance) SetRemoteIdentifier(v string) {
	o.RemoteIdentifier = &v
}

// GetSnapshotName returns the SnapshotName field value if set, zero value otherwise.
func (o *RemoteMemberDetailsInstance) GetSnapshotName() string {
	if o == nil || IsNil(o.SnapshotName) {
		var ret string
		return ret
	}
	return *o.SnapshotName
}

// GetSnapshotNameOk returns a tuple with the SnapshotName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteMemberDetailsInstance) GetSnapshotNameOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotName) {
		return nil, false
	}
	return o.SnapshotName, true
}

// HasSnapshotName returns a boolean if a field has been set.
func (o *RemoteMemberDetailsInstance) HasSnapshotName() bool {
	if o != nil && !IsNil(o.SnapshotName) {
		return true
	}

	return false
}

// SetSnapshotName gets a reference to the given string and assigns it to the SnapshotName field.
func (o *RemoteMemberDetailsInstance) SetSnapshotName(v string) {
	o.SnapshotName = &v
}

// GetSnapshotSize returns the SnapshotSize field value if set, zero value otherwise.
func (o *RemoteMemberDetailsInstance) GetSnapshotSize() int64 {
	if o == nil || IsNil(o.SnapshotSize) {
		var ret int64
		return ret
	}
	return *o.SnapshotSize
}

// GetSnapshotSizeOk returns a tuple with the SnapshotSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteMemberDetailsInstance) GetSnapshotSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapshotSize) {
		return nil, false
	}
	return o.SnapshotSize, true
}

// HasSnapshotSize returns a boolean if a field has been set.
func (o *RemoteMemberDetailsInstance) HasSnapshotSize() bool {
	if o != nil && !IsNil(o.SnapshotSize) {
		return true
	}

	return false
}

// SetSnapshotSize gets a reference to the given int64 and assigns it to the SnapshotSize field.
func (o *RemoteMemberDetailsInstance) SetSnapshotSize(v int64) {
	o.SnapshotSize = &v
}

func (o RemoteMemberDetailsInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteMemberDetailsInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VolumeId) {
		toSerialize["volume_id"] = o.VolumeId
	}
	if !IsNil(o.IsSourceInRecycleBin) {
		toSerialize["is_source_in_recycle_bin"] = o.IsSourceInRecycleBin
	}
	if !IsNil(o.RemoteIdentifier) {
		toSerialize["remote_identifier"] = o.RemoteIdentifier
	}
	if !IsNil(o.SnapshotName) {
		toSerialize["snapshot_name"] = o.SnapshotName
	}
	if !IsNil(o.SnapshotSize) {
		toSerialize["snapshot_size"] = o.SnapshotSize
	}
	return toSerialize, nil
}

type NullableRemoteMemberDetailsInstance struct {
	value *RemoteMemberDetailsInstance
	isSet bool
}

func (v NullableRemoteMemberDetailsInstance) Get() *RemoteMemberDetailsInstance {
	return v.value
}

func (v *NullableRemoteMemberDetailsInstance) Set(val *RemoteMemberDetailsInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteMemberDetailsInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteMemberDetailsInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteMemberDetailsInstance(val *RemoteMemberDetailsInstance) *NullableRemoteMemberDetailsInstance {
	return &NullableRemoteMemberDetailsInstance{value: val, isSet: true}
}

func (v NullableRemoteMemberDetailsInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteMemberDetailsInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


