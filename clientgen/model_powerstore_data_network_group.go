/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the PowerstoreDataNetworkGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerstoreDataNetworkGroup{}

// PowerstoreDataNetworkGroup Group of local and remote PowerStore storage networks to use for configuring data connections for replication data transfers.  Was added in version 4.0.0.0.
type PowerstoreDataNetworkGroup struct {
	// Unique identifier of the data network group. 
	Id *string `json:"id,omitempty"`
	// User or system generated name for group of local and remote replication networks. 
	Name *string `json:"name,omitempty"`
	// List of local storage networks that are defined to be used for replication data transfer. 
	LocalPowerstoreNetworks []PowerstoreNetworkInfo `json:"local_powerstore_networks,omitempty"`
	// List of remote storage networks that are defined to be used for replication data transfer. 
	RemotePowerstoreNetworks []PowerstoreNetworkInfo `json:"remote_powerstore_networks,omitempty"`
}

// NewPowerstoreDataNetworkGroup instantiates a new PowerstoreDataNetworkGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerstoreDataNetworkGroup() *PowerstoreDataNetworkGroup {
	this := PowerstoreDataNetworkGroup{}
	return &this
}

// NewPowerstoreDataNetworkGroupWithDefaults instantiates a new PowerstoreDataNetworkGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerstoreDataNetworkGroupWithDefaults() *PowerstoreDataNetworkGroup {
	this := PowerstoreDataNetworkGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PowerstoreDataNetworkGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerstoreDataNetworkGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PowerstoreDataNetworkGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PowerstoreDataNetworkGroup) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PowerstoreDataNetworkGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerstoreDataNetworkGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PowerstoreDataNetworkGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PowerstoreDataNetworkGroup) SetName(v string) {
	o.Name = &v
}

// GetLocalPowerstoreNetworks returns the LocalPowerstoreNetworks field value if set, zero value otherwise.
func (o *PowerstoreDataNetworkGroup) GetLocalPowerstoreNetworks() []PowerstoreNetworkInfo {
	if o == nil || IsNil(o.LocalPowerstoreNetworks) {
		var ret []PowerstoreNetworkInfo
		return ret
	}
	return o.LocalPowerstoreNetworks
}

// GetLocalPowerstoreNetworksOk returns a tuple with the LocalPowerstoreNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerstoreDataNetworkGroup) GetLocalPowerstoreNetworksOk() ([]PowerstoreNetworkInfo, bool) {
	if o == nil || IsNil(o.LocalPowerstoreNetworks) {
		return nil, false
	}
	return o.LocalPowerstoreNetworks, true
}

// HasLocalPowerstoreNetworks returns a boolean if a field has been set.
func (o *PowerstoreDataNetworkGroup) HasLocalPowerstoreNetworks() bool {
	if o != nil && !IsNil(o.LocalPowerstoreNetworks) {
		return true
	}

	return false
}

// SetLocalPowerstoreNetworks gets a reference to the given []PowerstoreNetworkInfo and assigns it to the LocalPowerstoreNetworks field.
func (o *PowerstoreDataNetworkGroup) SetLocalPowerstoreNetworks(v []PowerstoreNetworkInfo) {
	o.LocalPowerstoreNetworks = v
}

// GetRemotePowerstoreNetworks returns the RemotePowerstoreNetworks field value if set, zero value otherwise.
func (o *PowerstoreDataNetworkGroup) GetRemotePowerstoreNetworks() []PowerstoreNetworkInfo {
	if o == nil || IsNil(o.RemotePowerstoreNetworks) {
		var ret []PowerstoreNetworkInfo
		return ret
	}
	return o.RemotePowerstoreNetworks
}

// GetRemotePowerstoreNetworksOk returns a tuple with the RemotePowerstoreNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PowerstoreDataNetworkGroup) GetRemotePowerstoreNetworksOk() ([]PowerstoreNetworkInfo, bool) {
	if o == nil || IsNil(o.RemotePowerstoreNetworks) {
		return nil, false
	}
	return o.RemotePowerstoreNetworks, true
}

// HasRemotePowerstoreNetworks returns a boolean if a field has been set.
func (o *PowerstoreDataNetworkGroup) HasRemotePowerstoreNetworks() bool {
	if o != nil && !IsNil(o.RemotePowerstoreNetworks) {
		return true
	}

	return false
}

// SetRemotePowerstoreNetworks gets a reference to the given []PowerstoreNetworkInfo and assigns it to the RemotePowerstoreNetworks field.
func (o *PowerstoreDataNetworkGroup) SetRemotePowerstoreNetworks(v []PowerstoreNetworkInfo) {
	o.RemotePowerstoreNetworks = v
}

func (o PowerstoreDataNetworkGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerstoreDataNetworkGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.LocalPowerstoreNetworks) {
		toSerialize["local_powerstore_networks"] = o.LocalPowerstoreNetworks
	}
	if !IsNil(o.RemotePowerstoreNetworks) {
		toSerialize["remote_powerstore_networks"] = o.RemotePowerstoreNetworks
	}
	return toSerialize, nil
}

type NullablePowerstoreDataNetworkGroup struct {
	value *PowerstoreDataNetworkGroup
	isSet bool
}

func (v NullablePowerstoreDataNetworkGroup) Get() *PowerstoreDataNetworkGroup {
	return v.value
}

func (v *NullablePowerstoreDataNetworkGroup) Set(val *PowerstoreDataNetworkGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerstoreDataNetworkGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerstoreDataNetworkGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerstoreDataNetworkGroup(val *PowerstoreDataNetworkGroup) *NullablePowerstoreDataNetworkGroup {
	return &NullablePowerstoreDataNetworkGroup{value: val, isSet: true}
}

func (v NullablePowerstoreDataNetworkGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerstoreDataNetworkGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


