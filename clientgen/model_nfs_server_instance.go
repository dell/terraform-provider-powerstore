/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the NfsServerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsServerInstance{}

// NfsServerInstance Properties of an NFS server. This resource type has queriable association from nas_server
type NfsServerInstance struct {
	// Unique identifier of the NFS server.
	Id *string `json:"id,omitempty"`
	// The name that will be used by NFS clients to connect to this NFS server. This name is required when using secure NFS, except when is_use_smb_config_enabled is true. In this case host_name is forced to the SMB server computer name, and must not be specified. 
	HostName *string `json:"host_name,omitempty"`
	// The unique identifier of the NAS server that serves this share.
	NasServerId *string `json:"nas_server_id,omitempty"`
	// Indicates whether NFSv3 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv3. When disabled, NFS shares cannot be accessed with NFSv3 protocol. - true - NFSv3 is enabled on the specified NAS server. - false - NFSv3 is disabled on the specified NAS server. 
	IsNfsv3Enabled *bool `json:"is_nfsv3_enabled,omitempty"`
	// Indicates whether NFSv4 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv4. When disabled, NFS shares cannot be accessed with NFSv4 protocol. - true - NFSv4 is enabled on the specified NAS server. - false - NFSv4 is disabled on the specified NAS server. 
	IsNfsv4Enabled *bool `json:"is_nfsv4_enabled,omitempty"`
	// Indicates whether secure NFS is enabled on the NFS server. - true - Secure NFS is enabled. - false - Secure NFS is disabled. 
	IsSecureEnabled *bool `json:"is_secure_enabled,omitempty"`
	// Indicates whether SMB authentication is used to authenticate to the KDC. Values are: - true: Indicates that the configured SMB Server settings are used for Kerberos authentication. - false: Indicates that Kerberos uses its own settings. 
	IsUseSmbConfigEnabled *bool `json:"is_use_smb_config_enabled,omitempty"`
	// The Service Principal Name (SPN) for the NFS server. This name is updated automatically when the NFS server configuration changes.
	ServicePrincipalName *string `json:"service_principal_name,omitempty"`
	// Indicates whether the NFS server is joined to Active Directory. Required for Secure NFS. Always false when secure NFS is disabled and kdc_type is not MS Windows.
	IsJoined *bool `json:"is_joined,omitempty"`
	// Indicates whether the NFS server supports more than 16 Unix groups in a Unix credential. Valid values are: - true - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. - false - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. Note - The NFS server builds its own Unix credential when it supports more than 16 groups. This process can slow the performance. 
	IsExtendedCredentialsEnabled *bool `json:"is_extended_credentials_enabled,omitempty"`
	// Sets the Time-To-Live (in minutes) expiration timestamp for a Windows entry in the credentials cache. When failed mapping entries expire, the system retries mapping the UID to the SID.
	CredentialsCacheTTL *int32 `json:"credentials_cache_TTL,omitempty"`
	NasServer *NasServerInstance `json:"nas_server,omitempty"`
}

// NewNfsServerInstance instantiates a new NfsServerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsServerInstance() *NfsServerInstance {
	this := NfsServerInstance{}
	var isUseSmbConfigEnabled bool = false
	this.IsUseSmbConfigEnabled = &isUseSmbConfigEnabled
	var isExtendedCredentialsEnabled bool = false
	this.IsExtendedCredentialsEnabled = &isExtendedCredentialsEnabled
	var credentialsCacheTTL int32 = 15
	this.CredentialsCacheTTL = &credentialsCacheTTL
	return &this
}

// NewNfsServerInstanceWithDefaults instantiates a new NfsServerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsServerInstanceWithDefaults() *NfsServerInstance {
	this := NfsServerInstance{}
	var isUseSmbConfigEnabled bool = false
	this.IsUseSmbConfigEnabled = &isUseSmbConfigEnabled
	var isExtendedCredentialsEnabled bool = false
	this.IsExtendedCredentialsEnabled = &isExtendedCredentialsEnabled
	var credentialsCacheTTL int32 = 15
	this.CredentialsCacheTTL = &credentialsCacheTTL
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NfsServerInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NfsServerInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NfsServerInstance) SetId(v string) {
	o.Id = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *NfsServerInstance) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *NfsServerInstance) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *NfsServerInstance) SetHostName(v string) {
	o.HostName = &v
}

// GetNasServerId returns the NasServerId field value if set, zero value otherwise.
func (o *NfsServerInstance) GetNasServerId() string {
	if o == nil || IsNil(o.NasServerId) {
		var ret string
		return ret
	}
	return *o.NasServerId
}

// GetNasServerIdOk returns a tuple with the NasServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetNasServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NasServerId) {
		return nil, false
	}
	return o.NasServerId, true
}

// HasNasServerId returns a boolean if a field has been set.
func (o *NfsServerInstance) HasNasServerId() bool {
	if o != nil && !IsNil(o.NasServerId) {
		return true
	}

	return false
}

// SetNasServerId gets a reference to the given string and assigns it to the NasServerId field.
func (o *NfsServerInstance) SetNasServerId(v string) {
	o.NasServerId = &v
}

// GetIsNfsv3Enabled returns the IsNfsv3Enabled field value if set, zero value otherwise.
func (o *NfsServerInstance) GetIsNfsv3Enabled() bool {
	if o == nil || IsNil(o.IsNfsv3Enabled) {
		var ret bool
		return ret
	}
	return *o.IsNfsv3Enabled
}

// GetIsNfsv3EnabledOk returns a tuple with the IsNfsv3Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetIsNfsv3EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNfsv3Enabled) {
		return nil, false
	}
	return o.IsNfsv3Enabled, true
}

// HasIsNfsv3Enabled returns a boolean if a field has been set.
func (o *NfsServerInstance) HasIsNfsv3Enabled() bool {
	if o != nil && !IsNil(o.IsNfsv3Enabled) {
		return true
	}

	return false
}

// SetIsNfsv3Enabled gets a reference to the given bool and assigns it to the IsNfsv3Enabled field.
func (o *NfsServerInstance) SetIsNfsv3Enabled(v bool) {
	o.IsNfsv3Enabled = &v
}

// GetIsNfsv4Enabled returns the IsNfsv4Enabled field value if set, zero value otherwise.
func (o *NfsServerInstance) GetIsNfsv4Enabled() bool {
	if o == nil || IsNil(o.IsNfsv4Enabled) {
		var ret bool
		return ret
	}
	return *o.IsNfsv4Enabled
}

// GetIsNfsv4EnabledOk returns a tuple with the IsNfsv4Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetIsNfsv4EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNfsv4Enabled) {
		return nil, false
	}
	return o.IsNfsv4Enabled, true
}

// HasIsNfsv4Enabled returns a boolean if a field has been set.
func (o *NfsServerInstance) HasIsNfsv4Enabled() bool {
	if o != nil && !IsNil(o.IsNfsv4Enabled) {
		return true
	}

	return false
}

// SetIsNfsv4Enabled gets a reference to the given bool and assigns it to the IsNfsv4Enabled field.
func (o *NfsServerInstance) SetIsNfsv4Enabled(v bool) {
	o.IsNfsv4Enabled = &v
}

// GetIsSecureEnabled returns the IsSecureEnabled field value if set, zero value otherwise.
func (o *NfsServerInstance) GetIsSecureEnabled() bool {
	if o == nil || IsNil(o.IsSecureEnabled) {
		var ret bool
		return ret
	}
	return *o.IsSecureEnabled
}

// GetIsSecureEnabledOk returns a tuple with the IsSecureEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetIsSecureEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecureEnabled) {
		return nil, false
	}
	return o.IsSecureEnabled, true
}

// HasIsSecureEnabled returns a boolean if a field has been set.
func (o *NfsServerInstance) HasIsSecureEnabled() bool {
	if o != nil && !IsNil(o.IsSecureEnabled) {
		return true
	}

	return false
}

// SetIsSecureEnabled gets a reference to the given bool and assigns it to the IsSecureEnabled field.
func (o *NfsServerInstance) SetIsSecureEnabled(v bool) {
	o.IsSecureEnabled = &v
}

// GetIsUseSmbConfigEnabled returns the IsUseSmbConfigEnabled field value if set, zero value otherwise.
func (o *NfsServerInstance) GetIsUseSmbConfigEnabled() bool {
	if o == nil || IsNil(o.IsUseSmbConfigEnabled) {
		var ret bool
		return ret
	}
	return *o.IsUseSmbConfigEnabled
}

// GetIsUseSmbConfigEnabledOk returns a tuple with the IsUseSmbConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetIsUseSmbConfigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUseSmbConfigEnabled) {
		return nil, false
	}
	return o.IsUseSmbConfigEnabled, true
}

// HasIsUseSmbConfigEnabled returns a boolean if a field has been set.
func (o *NfsServerInstance) HasIsUseSmbConfigEnabled() bool {
	if o != nil && !IsNil(o.IsUseSmbConfigEnabled) {
		return true
	}

	return false
}

// SetIsUseSmbConfigEnabled gets a reference to the given bool and assigns it to the IsUseSmbConfigEnabled field.
func (o *NfsServerInstance) SetIsUseSmbConfigEnabled(v bool) {
	o.IsUseSmbConfigEnabled = &v
}

// GetServicePrincipalName returns the ServicePrincipalName field value if set, zero value otherwise.
func (o *NfsServerInstance) GetServicePrincipalName() string {
	if o == nil || IsNil(o.ServicePrincipalName) {
		var ret string
		return ret
	}
	return *o.ServicePrincipalName
}

// GetServicePrincipalNameOk returns a tuple with the ServicePrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetServicePrincipalNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServicePrincipalName) {
		return nil, false
	}
	return o.ServicePrincipalName, true
}

// HasServicePrincipalName returns a boolean if a field has been set.
func (o *NfsServerInstance) HasServicePrincipalName() bool {
	if o != nil && !IsNil(o.ServicePrincipalName) {
		return true
	}

	return false
}

// SetServicePrincipalName gets a reference to the given string and assigns it to the ServicePrincipalName field.
func (o *NfsServerInstance) SetServicePrincipalName(v string) {
	o.ServicePrincipalName = &v
}

// GetIsJoined returns the IsJoined field value if set, zero value otherwise.
func (o *NfsServerInstance) GetIsJoined() bool {
	if o == nil || IsNil(o.IsJoined) {
		var ret bool
		return ret
	}
	return *o.IsJoined
}

// GetIsJoinedOk returns a tuple with the IsJoined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetIsJoinedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsJoined) {
		return nil, false
	}
	return o.IsJoined, true
}

// HasIsJoined returns a boolean if a field has been set.
func (o *NfsServerInstance) HasIsJoined() bool {
	if o != nil && !IsNil(o.IsJoined) {
		return true
	}

	return false
}

// SetIsJoined gets a reference to the given bool and assigns it to the IsJoined field.
func (o *NfsServerInstance) SetIsJoined(v bool) {
	o.IsJoined = &v
}

// GetIsExtendedCredentialsEnabled returns the IsExtendedCredentialsEnabled field value if set, zero value otherwise.
func (o *NfsServerInstance) GetIsExtendedCredentialsEnabled() bool {
	if o == nil || IsNil(o.IsExtendedCredentialsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsExtendedCredentialsEnabled
}

// GetIsExtendedCredentialsEnabledOk returns a tuple with the IsExtendedCredentialsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetIsExtendedCredentialsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExtendedCredentialsEnabled) {
		return nil, false
	}
	return o.IsExtendedCredentialsEnabled, true
}

// HasIsExtendedCredentialsEnabled returns a boolean if a field has been set.
func (o *NfsServerInstance) HasIsExtendedCredentialsEnabled() bool {
	if o != nil && !IsNil(o.IsExtendedCredentialsEnabled) {
		return true
	}

	return false
}

// SetIsExtendedCredentialsEnabled gets a reference to the given bool and assigns it to the IsExtendedCredentialsEnabled field.
func (o *NfsServerInstance) SetIsExtendedCredentialsEnabled(v bool) {
	o.IsExtendedCredentialsEnabled = &v
}

// GetCredentialsCacheTTL returns the CredentialsCacheTTL field value if set, zero value otherwise.
func (o *NfsServerInstance) GetCredentialsCacheTTL() int32 {
	if o == nil || IsNil(o.CredentialsCacheTTL) {
		var ret int32
		return ret
	}
	return *o.CredentialsCacheTTL
}

// GetCredentialsCacheTTLOk returns a tuple with the CredentialsCacheTTL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetCredentialsCacheTTLOk() (*int32, bool) {
	if o == nil || IsNil(o.CredentialsCacheTTL) {
		return nil, false
	}
	return o.CredentialsCacheTTL, true
}

// HasCredentialsCacheTTL returns a boolean if a field has been set.
func (o *NfsServerInstance) HasCredentialsCacheTTL() bool {
	if o != nil && !IsNil(o.CredentialsCacheTTL) {
		return true
	}

	return false
}

// SetCredentialsCacheTTL gets a reference to the given int32 and assigns it to the CredentialsCacheTTL field.
func (o *NfsServerInstance) SetCredentialsCacheTTL(v int32) {
	o.CredentialsCacheTTL = &v
}

// GetNasServer returns the NasServer field value if set, zero value otherwise.
func (o *NfsServerInstance) GetNasServer() NasServerInstance {
	if o == nil || IsNil(o.NasServer) {
		var ret NasServerInstance
		return ret
	}
	return *o.NasServer
}

// GetNasServerOk returns a tuple with the NasServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsServerInstance) GetNasServerOk() (*NasServerInstance, bool) {
	if o == nil || IsNil(o.NasServer) {
		return nil, false
	}
	return o.NasServer, true
}

// HasNasServer returns a boolean if a field has been set.
func (o *NfsServerInstance) HasNasServer() bool {
	if o != nil && !IsNil(o.NasServer) {
		return true
	}

	return false
}

// SetNasServer gets a reference to the given NasServerInstance and assigns it to the NasServer field.
func (o *NfsServerInstance) SetNasServer(v NasServerInstance) {
	o.NasServer = &v
}

func (o NfsServerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsServerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	if !IsNil(o.NasServerId) {
		toSerialize["nas_server_id"] = o.NasServerId
	}
	if !IsNil(o.IsNfsv3Enabled) {
		toSerialize["is_nfsv3_enabled"] = o.IsNfsv3Enabled
	}
	if !IsNil(o.IsNfsv4Enabled) {
		toSerialize["is_nfsv4_enabled"] = o.IsNfsv4Enabled
	}
	if !IsNil(o.IsSecureEnabled) {
		toSerialize["is_secure_enabled"] = o.IsSecureEnabled
	}
	if !IsNil(o.IsUseSmbConfigEnabled) {
		toSerialize["is_use_smb_config_enabled"] = o.IsUseSmbConfigEnabled
	}
	if !IsNil(o.ServicePrincipalName) {
		toSerialize["service_principal_name"] = o.ServicePrincipalName
	}
	if !IsNil(o.IsJoined) {
		toSerialize["is_joined"] = o.IsJoined
	}
	if !IsNil(o.IsExtendedCredentialsEnabled) {
		toSerialize["is_extended_credentials_enabled"] = o.IsExtendedCredentialsEnabled
	}
	if !IsNil(o.CredentialsCacheTTL) {
		toSerialize["credentials_cache_TTL"] = o.CredentialsCacheTTL
	}
	if !IsNil(o.NasServer) {
		toSerialize["nas_server"] = o.NasServer
	}
	return toSerialize, nil
}

type NullableNfsServerInstance struct {
	value *NfsServerInstance
	isSet bool
}

func (v NullableNfsServerInstance) Get() *NfsServerInstance {
	return v.value
}

func (v *NullableNfsServerInstance) Set(val *NfsServerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsServerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsServerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsServerInstance(val *NfsServerInstance) *NullableNfsServerInstance {
	return &NullableNfsServerInstance{value: val, isSet: true}
}

func (v NullableNfsServerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsServerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


