/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the RemoteSystemInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteSystemInstance{}

// RemoteSystemInstance A remote system.  This resource type has queriable associations from snapshot_rule, replication_rule, import_session, storage_container_destination, replication_session, remote_snapshot_session, remote_snapshot, import_universal_volume, import_universal_consistency_group
type RemoteSystemInstance struct {
	// Unique identifier of the remote system instance. 
	Id *string `json:"id,omitempty"`
	// User-specified name of the remote system instance.   This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// User-specified description of the remote system instance. 
	Description *string `json:"description,omitempty"`
	// Serial number of the remote system instance. 
	SerialNumber *string `json:"serial_number,omitempty"`
	// Version of the remote system.  Was added in version 2.0.0.0.
	Version *string `json:"version,omitempty"`
	// Management address of the remote system instance. IPv4 and FQDN is supported for non-PowerStore remote systems. IPv4, IPv6 and FQDN are supported for PowerStore remote systems. 
	ManagementAddress *string `json:"management_address,omitempty"`
	// Management port of PowerMax/VMAX remote system.  Was added in version 3.0.0.0.
	ManagementPort *int32 `json:"management_port,omitempty"`
	Type *RemoteSystemTypeEnum `json:"type,omitempty"`
	// Username used to access the non-PowerStore remote systems. 
	UserName *string `json:"user_name,omitempty"`
	State *RemoteSystemStateEnum `json:"state,omitempty"`
	DataConnectionType *DataConnectionTypeEnum `json:"data_connection_type,omitempty"`
	DataConnectionState *DataConnectionStateEnum `json:"data_connection_state,omitempty"`
	// iSCSI target addresses for the data connection to the remote system. 
	IscsiAddresses []string `json:"iscsi_addresses,omitempty"`
	// FC target WWN discovered by Powerstore for the data connection to the remote system.  Was added in version 3.0.0.0.
	FcTargetWwns []string `json:"fc_target_wwns,omitempty"`
	DiscoveryChapMode *RemoteSystemChapModeEnum `json:"discovery_chap_mode,omitempty"`
	SessionChapMode *RemoteSystemChapModeEnum `json:"session_chap_mode,omitempty"`
	DataNetworkLatency *RemoteSystemLatencyEnum `json:"data_network_latency,omitempty"`
	// List of data connections from each appliance in the local cluster to target address.   Filtering on the fields of this embedded resource is not supported.
	DataConnections []DataConnectionInstance `json:"data_connections,omitempty"`
	// List of remote protection capabilities.  Was added in version 3.0.0.0.
	Capabilities []RemoteProtectionCapabilityEnum `json:"capabilities,omitempty"`
	// A public IPv4 or IPv6 address of a file remote system instance. File mobility network cluster IP address for PowerStore. Control station address for VNX2.  Was added in version 3.0.0.0.
	FileConnectionAddress *string `json:"file_connection_address,omitempty"`
	FileConnectionState *RemoteSystemFileConnectionStateEnum `json:"file_connection_state,omitempty"`
	// User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.
	VnxFileUsername *string `json:"vnx_file_username,omitempty"`
	PpddStorageUnitDetails *PpddStorageUnitDetailsInstance `json:"ppdd_storage_unit_details,omitempty"`
	// Details of all the appliances of the remote PowerStore system.  Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.
	ApplianceDetails []RemoteApplianceDetails `json:"appliance_details,omitempty"`
	UnityFileDetails *UnityFileDetailsInstance `json:"unity_file_details,omitempty"`
	// List of data network group with local and remote storage networks for replication data transfer.  Was added in version 4.0.0.0.  Filtering on the fields of this embedded resource is not supported.
	PowerstoreDataNetworkConfiguration []PowerstoreDataNetworkGroup `json:"powerstore_data_network_configuration,omitempty"`
	// Localized message string corresponding to type
	TypeL10n *string `json:"type_l10n,omitempty"`
	// Localized message string corresponding to state
	StateL10n *string `json:"state_l10n,omitempty"`
	// Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.
	DataConnectionTypeL10n *string `json:"data_connection_type_l10n,omitempty"`
	// Localized message string corresponding to data_connection_state
	DataConnectionStateL10n *string `json:"data_connection_state_l10n,omitempty"`
	// Localized message string corresponding to discovery_chap_mode
	DiscoveryChapModeL10n *string `json:"discovery_chap_mode_l10n,omitempty"`
	// Localized message string corresponding to session_chap_mode
	SessionChapModeL10n *string `json:"session_chap_mode_l10n,omitempty"`
	// Localized message string corresponding to data_network_latency
	DataNetworkLatencyL10n *string `json:"data_network_latency_l10n,omitempty"`
	// Localized message array corresponding to capabilities Was added in version 3.0.0.0.
	CapabilitiesL10n []string `json:"capabilities_l10n,omitempty"`
	// Localized message string corresponding to file_connection_state Was added in version 3.0.0.0.
	FileConnectionStateL10n *string `json:"file_connection_state_l10n,omitempty"`
	// This is the inverse of the resource type snapshot_rule association.
	SnapshotRules []SnapshotRuleInstance `json:"snapshot_rules,omitempty"`
	// This is the inverse of the resource type replication_rule association.
	ReplicationRules []ReplicationRuleInstance `json:"replication_rules,omitempty"`
	// This is the inverse of the resource type import_session association.
	ImportSessions []ImportSessionInstance `json:"import_sessions,omitempty"`
	// This is the inverse of the resource type storage_container_destination association.
	StorageContainerDestinations []StorageContainerDestinationInstance `json:"storage_container_destinations,omitempty"`
	// This is the inverse of the resource type replication_session association.
	ReplicationSessions []ReplicationSessionInstance `json:"replication_sessions,omitempty"`
	// This is the inverse of the resource type remote_snapshot_session association.
	RemoteSnapshotSessions []RemoteSnapshotSessionInstance `json:"remote_snapshot_sessions,omitempty"`
	// This is the inverse of the resource type remote_snapshot association.
	RemoteSnapshots []RemoteSnapshotInstance `json:"remote_snapshots,omitempty"`
	// This is the inverse of the resource type import_universal_volume association.
	ImportUniversalVolumes []ImportUniversalVolumeInstance `json:"import_universal_volumes,omitempty"`
	// This is the inverse of the resource type import_universal_consistency_group association.
	ImportUniversalConsistencyGroup []ImportUniversalConsistencyGroupInstance `json:"import_universal_consistency_group,omitempty"`
}

// NewRemoteSystemInstance instantiates a new RemoteSystemInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSystemInstance() *RemoteSystemInstance {
	this := RemoteSystemInstance{}
	return &this
}

// NewRemoteSystemInstanceWithDefaults instantiates a new RemoteSystemInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSystemInstanceWithDefaults() *RemoteSystemInstance {
	this := RemoteSystemInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RemoteSystemInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RemoteSystemInstance) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RemoteSystemInstance) SetDescription(v string) {
	o.Description = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *RemoteSystemInstance) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RemoteSystemInstance) SetVersion(v string) {
	o.Version = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress) {
		var ret string
		return ret
	}
	return *o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetManagementAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddress) {
		return nil, false
	}
	return o.ManagementAddress, true
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasManagementAddress() bool {
	if o != nil && !IsNil(o.ManagementAddress) {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given string and assigns it to the ManagementAddress field.
func (o *RemoteSystemInstance) SetManagementAddress(v string) {
	o.ManagementAddress = &v
}

// GetManagementPort returns the ManagementPort field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetManagementPort() int32 {
	if o == nil || IsNil(o.ManagementPort) {
		var ret int32
		return ret
	}
	return *o.ManagementPort
}

// GetManagementPortOk returns a tuple with the ManagementPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetManagementPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ManagementPort) {
		return nil, false
	}
	return o.ManagementPort, true
}

// HasManagementPort returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasManagementPort() bool {
	if o != nil && !IsNil(o.ManagementPort) {
		return true
	}

	return false
}

// SetManagementPort gets a reference to the given int32 and assigns it to the ManagementPort field.
func (o *RemoteSystemInstance) SetManagementPort(v int32) {
	o.ManagementPort = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetType() RemoteSystemTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret RemoteSystemTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetTypeOk() (*RemoteSystemTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RemoteSystemTypeEnum and assigns it to the Type field.
func (o *RemoteSystemInstance) SetType(v RemoteSystemTypeEnum) {
	o.Type = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *RemoteSystemInstance) SetUserName(v string) {
	o.UserName = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetState() RemoteSystemStateEnum {
	if o == nil || IsNil(o.State) {
		var ret RemoteSystemStateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetStateOk() (*RemoteSystemStateEnum, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given RemoteSystemStateEnum and assigns it to the State field.
func (o *RemoteSystemInstance) SetState(v RemoteSystemStateEnum) {
	o.State = &v
}

// GetDataConnectionType returns the DataConnectionType field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDataConnectionType() DataConnectionTypeEnum {
	if o == nil || IsNil(o.DataConnectionType) {
		var ret DataConnectionTypeEnum
		return ret
	}
	return *o.DataConnectionType
}

// GetDataConnectionTypeOk returns a tuple with the DataConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDataConnectionTypeOk() (*DataConnectionTypeEnum, bool) {
	if o == nil || IsNil(o.DataConnectionType) {
		return nil, false
	}
	return o.DataConnectionType, true
}

// HasDataConnectionType returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDataConnectionType() bool {
	if o != nil && !IsNil(o.DataConnectionType) {
		return true
	}

	return false
}

// SetDataConnectionType gets a reference to the given DataConnectionTypeEnum and assigns it to the DataConnectionType field.
func (o *RemoteSystemInstance) SetDataConnectionType(v DataConnectionTypeEnum) {
	o.DataConnectionType = &v
}

// GetDataConnectionState returns the DataConnectionState field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDataConnectionState() DataConnectionStateEnum {
	if o == nil || IsNil(o.DataConnectionState) {
		var ret DataConnectionStateEnum
		return ret
	}
	return *o.DataConnectionState
}

// GetDataConnectionStateOk returns a tuple with the DataConnectionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDataConnectionStateOk() (*DataConnectionStateEnum, bool) {
	if o == nil || IsNil(o.DataConnectionState) {
		return nil, false
	}
	return o.DataConnectionState, true
}

// HasDataConnectionState returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDataConnectionState() bool {
	if o != nil && !IsNil(o.DataConnectionState) {
		return true
	}

	return false
}

// SetDataConnectionState gets a reference to the given DataConnectionStateEnum and assigns it to the DataConnectionState field.
func (o *RemoteSystemInstance) SetDataConnectionState(v DataConnectionStateEnum) {
	o.DataConnectionState = &v
}

// GetIscsiAddresses returns the IscsiAddresses field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetIscsiAddresses() []string {
	if o == nil || IsNil(o.IscsiAddresses) {
		var ret []string
		return ret
	}
	return o.IscsiAddresses
}

// GetIscsiAddressesOk returns a tuple with the IscsiAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetIscsiAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IscsiAddresses) {
		return nil, false
	}
	return o.IscsiAddresses, true
}

// HasIscsiAddresses returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasIscsiAddresses() bool {
	if o != nil && !IsNil(o.IscsiAddresses) {
		return true
	}

	return false
}

// SetIscsiAddresses gets a reference to the given []string and assigns it to the IscsiAddresses field.
func (o *RemoteSystemInstance) SetIscsiAddresses(v []string) {
	o.IscsiAddresses = v
}

// GetFcTargetWwns returns the FcTargetWwns field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetFcTargetWwns() []string {
	if o == nil || IsNil(o.FcTargetWwns) {
		var ret []string
		return ret
	}
	return o.FcTargetWwns
}

// GetFcTargetWwnsOk returns a tuple with the FcTargetWwns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetFcTargetWwnsOk() ([]string, bool) {
	if o == nil || IsNil(o.FcTargetWwns) {
		return nil, false
	}
	return o.FcTargetWwns, true
}

// HasFcTargetWwns returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasFcTargetWwns() bool {
	if o != nil && !IsNil(o.FcTargetWwns) {
		return true
	}

	return false
}

// SetFcTargetWwns gets a reference to the given []string and assigns it to the FcTargetWwns field.
func (o *RemoteSystemInstance) SetFcTargetWwns(v []string) {
	o.FcTargetWwns = v
}

// GetDiscoveryChapMode returns the DiscoveryChapMode field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDiscoveryChapMode() RemoteSystemChapModeEnum {
	if o == nil || IsNil(o.DiscoveryChapMode) {
		var ret RemoteSystemChapModeEnum
		return ret
	}
	return *o.DiscoveryChapMode
}

// GetDiscoveryChapModeOk returns a tuple with the DiscoveryChapMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDiscoveryChapModeOk() (*RemoteSystemChapModeEnum, bool) {
	if o == nil || IsNil(o.DiscoveryChapMode) {
		return nil, false
	}
	return o.DiscoveryChapMode, true
}

// HasDiscoveryChapMode returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDiscoveryChapMode() bool {
	if o != nil && !IsNil(o.DiscoveryChapMode) {
		return true
	}

	return false
}

// SetDiscoveryChapMode gets a reference to the given RemoteSystemChapModeEnum and assigns it to the DiscoveryChapMode field.
func (o *RemoteSystemInstance) SetDiscoveryChapMode(v RemoteSystemChapModeEnum) {
	o.DiscoveryChapMode = &v
}

// GetSessionChapMode returns the SessionChapMode field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetSessionChapMode() RemoteSystemChapModeEnum {
	if o == nil || IsNil(o.SessionChapMode) {
		var ret RemoteSystemChapModeEnum
		return ret
	}
	return *o.SessionChapMode
}

// GetSessionChapModeOk returns a tuple with the SessionChapMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetSessionChapModeOk() (*RemoteSystemChapModeEnum, bool) {
	if o == nil || IsNil(o.SessionChapMode) {
		return nil, false
	}
	return o.SessionChapMode, true
}

// HasSessionChapMode returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasSessionChapMode() bool {
	if o != nil && !IsNil(o.SessionChapMode) {
		return true
	}

	return false
}

// SetSessionChapMode gets a reference to the given RemoteSystemChapModeEnum and assigns it to the SessionChapMode field.
func (o *RemoteSystemInstance) SetSessionChapMode(v RemoteSystemChapModeEnum) {
	o.SessionChapMode = &v
}

// GetDataNetworkLatency returns the DataNetworkLatency field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDataNetworkLatency() RemoteSystemLatencyEnum {
	if o == nil || IsNil(o.DataNetworkLatency) {
		var ret RemoteSystemLatencyEnum
		return ret
	}
	return *o.DataNetworkLatency
}

// GetDataNetworkLatencyOk returns a tuple with the DataNetworkLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDataNetworkLatencyOk() (*RemoteSystemLatencyEnum, bool) {
	if o == nil || IsNil(o.DataNetworkLatency) {
		return nil, false
	}
	return o.DataNetworkLatency, true
}

// HasDataNetworkLatency returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDataNetworkLatency() bool {
	if o != nil && !IsNil(o.DataNetworkLatency) {
		return true
	}

	return false
}

// SetDataNetworkLatency gets a reference to the given RemoteSystemLatencyEnum and assigns it to the DataNetworkLatency field.
func (o *RemoteSystemInstance) SetDataNetworkLatency(v RemoteSystemLatencyEnum) {
	o.DataNetworkLatency = &v
}

// GetDataConnections returns the DataConnections field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDataConnections() []DataConnectionInstance {
	if o == nil || IsNil(o.DataConnections) {
		var ret []DataConnectionInstance
		return ret
	}
	return o.DataConnections
}

// GetDataConnectionsOk returns a tuple with the DataConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDataConnectionsOk() ([]DataConnectionInstance, bool) {
	if o == nil || IsNil(o.DataConnections) {
		return nil, false
	}
	return o.DataConnections, true
}

// HasDataConnections returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDataConnections() bool {
	if o != nil && !IsNil(o.DataConnections) {
		return true
	}

	return false
}

// SetDataConnections gets a reference to the given []DataConnectionInstance and assigns it to the DataConnections field.
func (o *RemoteSystemInstance) SetDataConnections(v []DataConnectionInstance) {
	o.DataConnections = v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetCapabilities() []RemoteProtectionCapabilityEnum {
	if o == nil || IsNil(o.Capabilities) {
		var ret []RemoteProtectionCapabilityEnum
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetCapabilitiesOk() ([]RemoteProtectionCapabilityEnum, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []RemoteProtectionCapabilityEnum and assigns it to the Capabilities field.
func (o *RemoteSystemInstance) SetCapabilities(v []RemoteProtectionCapabilityEnum) {
	o.Capabilities = v
}

// GetFileConnectionAddress returns the FileConnectionAddress field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetFileConnectionAddress() string {
	if o == nil || IsNil(o.FileConnectionAddress) {
		var ret string
		return ret
	}
	return *o.FileConnectionAddress
}

// GetFileConnectionAddressOk returns a tuple with the FileConnectionAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetFileConnectionAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FileConnectionAddress) {
		return nil, false
	}
	return o.FileConnectionAddress, true
}

// HasFileConnectionAddress returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasFileConnectionAddress() bool {
	if o != nil && !IsNil(o.FileConnectionAddress) {
		return true
	}

	return false
}

// SetFileConnectionAddress gets a reference to the given string and assigns it to the FileConnectionAddress field.
func (o *RemoteSystemInstance) SetFileConnectionAddress(v string) {
	o.FileConnectionAddress = &v
}

// GetFileConnectionState returns the FileConnectionState field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetFileConnectionState() RemoteSystemFileConnectionStateEnum {
	if o == nil || IsNil(o.FileConnectionState) {
		var ret RemoteSystemFileConnectionStateEnum
		return ret
	}
	return *o.FileConnectionState
}

// GetFileConnectionStateOk returns a tuple with the FileConnectionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetFileConnectionStateOk() (*RemoteSystemFileConnectionStateEnum, bool) {
	if o == nil || IsNil(o.FileConnectionState) {
		return nil, false
	}
	return o.FileConnectionState, true
}

// HasFileConnectionState returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasFileConnectionState() bool {
	if o != nil && !IsNil(o.FileConnectionState) {
		return true
	}

	return false
}

// SetFileConnectionState gets a reference to the given RemoteSystemFileConnectionStateEnum and assigns it to the FileConnectionState field.
func (o *RemoteSystemInstance) SetFileConnectionState(v RemoteSystemFileConnectionStateEnum) {
	o.FileConnectionState = &v
}

// GetVnxFileUsername returns the VnxFileUsername field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetVnxFileUsername() string {
	if o == nil || IsNil(o.VnxFileUsername) {
		var ret string
		return ret
	}
	return *o.VnxFileUsername
}

// GetVnxFileUsernameOk returns a tuple with the VnxFileUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetVnxFileUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.VnxFileUsername) {
		return nil, false
	}
	return o.VnxFileUsername, true
}

// HasVnxFileUsername returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasVnxFileUsername() bool {
	if o != nil && !IsNil(o.VnxFileUsername) {
		return true
	}

	return false
}

// SetVnxFileUsername gets a reference to the given string and assigns it to the VnxFileUsername field.
func (o *RemoteSystemInstance) SetVnxFileUsername(v string) {
	o.VnxFileUsername = &v
}

// GetPpddStorageUnitDetails returns the PpddStorageUnitDetails field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetPpddStorageUnitDetails() PpddStorageUnitDetailsInstance {
	if o == nil || IsNil(o.PpddStorageUnitDetails) {
		var ret PpddStorageUnitDetailsInstance
		return ret
	}
	return *o.PpddStorageUnitDetails
}

// GetPpddStorageUnitDetailsOk returns a tuple with the PpddStorageUnitDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetPpddStorageUnitDetailsOk() (*PpddStorageUnitDetailsInstance, bool) {
	if o == nil || IsNil(o.PpddStorageUnitDetails) {
		return nil, false
	}
	return o.PpddStorageUnitDetails, true
}

// HasPpddStorageUnitDetails returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasPpddStorageUnitDetails() bool {
	if o != nil && !IsNil(o.PpddStorageUnitDetails) {
		return true
	}

	return false
}

// SetPpddStorageUnitDetails gets a reference to the given PpddStorageUnitDetailsInstance and assigns it to the PpddStorageUnitDetails field.
func (o *RemoteSystemInstance) SetPpddStorageUnitDetails(v PpddStorageUnitDetailsInstance) {
	o.PpddStorageUnitDetails = &v
}

// GetApplianceDetails returns the ApplianceDetails field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetApplianceDetails() []RemoteApplianceDetails {
	if o == nil || IsNil(o.ApplianceDetails) {
		var ret []RemoteApplianceDetails
		return ret
	}
	return o.ApplianceDetails
}

// GetApplianceDetailsOk returns a tuple with the ApplianceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetApplianceDetailsOk() ([]RemoteApplianceDetails, bool) {
	if o == nil || IsNil(o.ApplianceDetails) {
		return nil, false
	}
	return o.ApplianceDetails, true
}

// HasApplianceDetails returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasApplianceDetails() bool {
	if o != nil && !IsNil(o.ApplianceDetails) {
		return true
	}

	return false
}

// SetApplianceDetails gets a reference to the given []RemoteApplianceDetails and assigns it to the ApplianceDetails field.
func (o *RemoteSystemInstance) SetApplianceDetails(v []RemoteApplianceDetails) {
	o.ApplianceDetails = v
}

// GetUnityFileDetails returns the UnityFileDetails field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetUnityFileDetails() UnityFileDetailsInstance {
	if o == nil || IsNil(o.UnityFileDetails) {
		var ret UnityFileDetailsInstance
		return ret
	}
	return *o.UnityFileDetails
}

// GetUnityFileDetailsOk returns a tuple with the UnityFileDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetUnityFileDetailsOk() (*UnityFileDetailsInstance, bool) {
	if o == nil || IsNil(o.UnityFileDetails) {
		return nil, false
	}
	return o.UnityFileDetails, true
}

// HasUnityFileDetails returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasUnityFileDetails() bool {
	if o != nil && !IsNil(o.UnityFileDetails) {
		return true
	}

	return false
}

// SetUnityFileDetails gets a reference to the given UnityFileDetailsInstance and assigns it to the UnityFileDetails field.
func (o *RemoteSystemInstance) SetUnityFileDetails(v UnityFileDetailsInstance) {
	o.UnityFileDetails = &v
}

// GetPowerstoreDataNetworkConfiguration returns the PowerstoreDataNetworkConfiguration field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetPowerstoreDataNetworkConfiguration() []PowerstoreDataNetworkGroup {
	if o == nil || IsNil(o.PowerstoreDataNetworkConfiguration) {
		var ret []PowerstoreDataNetworkGroup
		return ret
	}
	return o.PowerstoreDataNetworkConfiguration
}

// GetPowerstoreDataNetworkConfigurationOk returns a tuple with the PowerstoreDataNetworkConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetPowerstoreDataNetworkConfigurationOk() ([]PowerstoreDataNetworkGroup, bool) {
	if o == nil || IsNil(o.PowerstoreDataNetworkConfiguration) {
		return nil, false
	}
	return o.PowerstoreDataNetworkConfiguration, true
}

// HasPowerstoreDataNetworkConfiguration returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasPowerstoreDataNetworkConfiguration() bool {
	if o != nil && !IsNil(o.PowerstoreDataNetworkConfiguration) {
		return true
	}

	return false
}

// SetPowerstoreDataNetworkConfiguration gets a reference to the given []PowerstoreDataNetworkGroup and assigns it to the PowerstoreDataNetworkConfiguration field.
func (o *RemoteSystemInstance) SetPowerstoreDataNetworkConfiguration(v []PowerstoreDataNetworkGroup) {
	o.PowerstoreDataNetworkConfiguration = v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *RemoteSystemInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetStateL10n returns the StateL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetStateL10n() string {
	if o == nil || IsNil(o.StateL10n) {
		var ret string
		return ret
	}
	return *o.StateL10n
}

// GetStateL10nOk returns a tuple with the StateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StateL10n) {
		return nil, false
	}
	return o.StateL10n, true
}

// HasStateL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasStateL10n() bool {
	if o != nil && !IsNil(o.StateL10n) {
		return true
	}

	return false
}

// SetStateL10n gets a reference to the given string and assigns it to the StateL10n field.
func (o *RemoteSystemInstance) SetStateL10n(v string) {
	o.StateL10n = &v
}

// GetDataConnectionTypeL10n returns the DataConnectionTypeL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDataConnectionTypeL10n() string {
	if o == nil || IsNil(o.DataConnectionTypeL10n) {
		var ret string
		return ret
	}
	return *o.DataConnectionTypeL10n
}

// GetDataConnectionTypeL10nOk returns a tuple with the DataConnectionTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDataConnectionTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.DataConnectionTypeL10n) {
		return nil, false
	}
	return o.DataConnectionTypeL10n, true
}

// HasDataConnectionTypeL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDataConnectionTypeL10n() bool {
	if o != nil && !IsNil(o.DataConnectionTypeL10n) {
		return true
	}

	return false
}

// SetDataConnectionTypeL10n gets a reference to the given string and assigns it to the DataConnectionTypeL10n field.
func (o *RemoteSystemInstance) SetDataConnectionTypeL10n(v string) {
	o.DataConnectionTypeL10n = &v
}

// GetDataConnectionStateL10n returns the DataConnectionStateL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDataConnectionStateL10n() string {
	if o == nil || IsNil(o.DataConnectionStateL10n) {
		var ret string
		return ret
	}
	return *o.DataConnectionStateL10n
}

// GetDataConnectionStateL10nOk returns a tuple with the DataConnectionStateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDataConnectionStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.DataConnectionStateL10n) {
		return nil, false
	}
	return o.DataConnectionStateL10n, true
}

// HasDataConnectionStateL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDataConnectionStateL10n() bool {
	if o != nil && !IsNil(o.DataConnectionStateL10n) {
		return true
	}

	return false
}

// SetDataConnectionStateL10n gets a reference to the given string and assigns it to the DataConnectionStateL10n field.
func (o *RemoteSystemInstance) SetDataConnectionStateL10n(v string) {
	o.DataConnectionStateL10n = &v
}

// GetDiscoveryChapModeL10n returns the DiscoveryChapModeL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDiscoveryChapModeL10n() string {
	if o == nil || IsNil(o.DiscoveryChapModeL10n) {
		var ret string
		return ret
	}
	return *o.DiscoveryChapModeL10n
}

// GetDiscoveryChapModeL10nOk returns a tuple with the DiscoveryChapModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDiscoveryChapModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryChapModeL10n) {
		return nil, false
	}
	return o.DiscoveryChapModeL10n, true
}

// HasDiscoveryChapModeL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDiscoveryChapModeL10n() bool {
	if o != nil && !IsNil(o.DiscoveryChapModeL10n) {
		return true
	}

	return false
}

// SetDiscoveryChapModeL10n gets a reference to the given string and assigns it to the DiscoveryChapModeL10n field.
func (o *RemoteSystemInstance) SetDiscoveryChapModeL10n(v string) {
	o.DiscoveryChapModeL10n = &v
}

// GetSessionChapModeL10n returns the SessionChapModeL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetSessionChapModeL10n() string {
	if o == nil || IsNil(o.SessionChapModeL10n) {
		var ret string
		return ret
	}
	return *o.SessionChapModeL10n
}

// GetSessionChapModeL10nOk returns a tuple with the SessionChapModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetSessionChapModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.SessionChapModeL10n) {
		return nil, false
	}
	return o.SessionChapModeL10n, true
}

// HasSessionChapModeL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasSessionChapModeL10n() bool {
	if o != nil && !IsNil(o.SessionChapModeL10n) {
		return true
	}

	return false
}

// SetSessionChapModeL10n gets a reference to the given string and assigns it to the SessionChapModeL10n field.
func (o *RemoteSystemInstance) SetSessionChapModeL10n(v string) {
	o.SessionChapModeL10n = &v
}

// GetDataNetworkLatencyL10n returns the DataNetworkLatencyL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetDataNetworkLatencyL10n() string {
	if o == nil || IsNil(o.DataNetworkLatencyL10n) {
		var ret string
		return ret
	}
	return *o.DataNetworkLatencyL10n
}

// GetDataNetworkLatencyL10nOk returns a tuple with the DataNetworkLatencyL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetDataNetworkLatencyL10nOk() (*string, bool) {
	if o == nil || IsNil(o.DataNetworkLatencyL10n) {
		return nil, false
	}
	return o.DataNetworkLatencyL10n, true
}

// HasDataNetworkLatencyL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasDataNetworkLatencyL10n() bool {
	if o != nil && !IsNil(o.DataNetworkLatencyL10n) {
		return true
	}

	return false
}

// SetDataNetworkLatencyL10n gets a reference to the given string and assigns it to the DataNetworkLatencyL10n field.
func (o *RemoteSystemInstance) SetDataNetworkLatencyL10n(v string) {
	o.DataNetworkLatencyL10n = &v
}

// GetCapabilitiesL10n returns the CapabilitiesL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetCapabilitiesL10n() []string {
	if o == nil || IsNil(o.CapabilitiesL10n) {
		var ret []string
		return ret
	}
	return o.CapabilitiesL10n
}

// GetCapabilitiesL10nOk returns a tuple with the CapabilitiesL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetCapabilitiesL10nOk() ([]string, bool) {
	if o == nil || IsNil(o.CapabilitiesL10n) {
		return nil, false
	}
	return o.CapabilitiesL10n, true
}

// HasCapabilitiesL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasCapabilitiesL10n() bool {
	if o != nil && !IsNil(o.CapabilitiesL10n) {
		return true
	}

	return false
}

// SetCapabilitiesL10n gets a reference to the given []string and assigns it to the CapabilitiesL10n field.
func (o *RemoteSystemInstance) SetCapabilitiesL10n(v []string) {
	o.CapabilitiesL10n = v
}

// GetFileConnectionStateL10n returns the FileConnectionStateL10n field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetFileConnectionStateL10n() string {
	if o == nil || IsNil(o.FileConnectionStateL10n) {
		var ret string
		return ret
	}
	return *o.FileConnectionStateL10n
}

// GetFileConnectionStateL10nOk returns a tuple with the FileConnectionStateL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetFileConnectionStateL10nOk() (*string, bool) {
	if o == nil || IsNil(o.FileConnectionStateL10n) {
		return nil, false
	}
	return o.FileConnectionStateL10n, true
}

// HasFileConnectionStateL10n returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasFileConnectionStateL10n() bool {
	if o != nil && !IsNil(o.FileConnectionStateL10n) {
		return true
	}

	return false
}

// SetFileConnectionStateL10n gets a reference to the given string and assigns it to the FileConnectionStateL10n field.
func (o *RemoteSystemInstance) SetFileConnectionStateL10n(v string) {
	o.FileConnectionStateL10n = &v
}

// GetSnapshotRules returns the SnapshotRules field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetSnapshotRules() []SnapshotRuleInstance {
	if o == nil || IsNil(o.SnapshotRules) {
		var ret []SnapshotRuleInstance
		return ret
	}
	return o.SnapshotRules
}

// GetSnapshotRulesOk returns a tuple with the SnapshotRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetSnapshotRulesOk() ([]SnapshotRuleInstance, bool) {
	if o == nil || IsNil(o.SnapshotRules) {
		return nil, false
	}
	return o.SnapshotRules, true
}

// HasSnapshotRules returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasSnapshotRules() bool {
	if o != nil && !IsNil(o.SnapshotRules) {
		return true
	}

	return false
}

// SetSnapshotRules gets a reference to the given []SnapshotRuleInstance and assigns it to the SnapshotRules field.
func (o *RemoteSystemInstance) SetSnapshotRules(v []SnapshotRuleInstance) {
	o.SnapshotRules = v
}

// GetReplicationRules returns the ReplicationRules field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetReplicationRules() []ReplicationRuleInstance {
	if o == nil || IsNil(o.ReplicationRules) {
		var ret []ReplicationRuleInstance
		return ret
	}
	return o.ReplicationRules
}

// GetReplicationRulesOk returns a tuple with the ReplicationRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetReplicationRulesOk() ([]ReplicationRuleInstance, bool) {
	if o == nil || IsNil(o.ReplicationRules) {
		return nil, false
	}
	return o.ReplicationRules, true
}

// HasReplicationRules returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasReplicationRules() bool {
	if o != nil && !IsNil(o.ReplicationRules) {
		return true
	}

	return false
}

// SetReplicationRules gets a reference to the given []ReplicationRuleInstance and assigns it to the ReplicationRules field.
func (o *RemoteSystemInstance) SetReplicationRules(v []ReplicationRuleInstance) {
	o.ReplicationRules = v
}

// GetImportSessions returns the ImportSessions field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetImportSessions() []ImportSessionInstance {
	if o == nil || IsNil(o.ImportSessions) {
		var ret []ImportSessionInstance
		return ret
	}
	return o.ImportSessions
}

// GetImportSessionsOk returns a tuple with the ImportSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetImportSessionsOk() ([]ImportSessionInstance, bool) {
	if o == nil || IsNil(o.ImportSessions) {
		return nil, false
	}
	return o.ImportSessions, true
}

// HasImportSessions returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasImportSessions() bool {
	if o != nil && !IsNil(o.ImportSessions) {
		return true
	}

	return false
}

// SetImportSessions gets a reference to the given []ImportSessionInstance and assigns it to the ImportSessions field.
func (o *RemoteSystemInstance) SetImportSessions(v []ImportSessionInstance) {
	o.ImportSessions = v
}

// GetStorageContainerDestinations returns the StorageContainerDestinations field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetStorageContainerDestinations() []StorageContainerDestinationInstance {
	if o == nil || IsNil(o.StorageContainerDestinations) {
		var ret []StorageContainerDestinationInstance
		return ret
	}
	return o.StorageContainerDestinations
}

// GetStorageContainerDestinationsOk returns a tuple with the StorageContainerDestinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetStorageContainerDestinationsOk() ([]StorageContainerDestinationInstance, bool) {
	if o == nil || IsNil(o.StorageContainerDestinations) {
		return nil, false
	}
	return o.StorageContainerDestinations, true
}

// HasStorageContainerDestinations returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasStorageContainerDestinations() bool {
	if o != nil && !IsNil(o.StorageContainerDestinations) {
		return true
	}

	return false
}

// SetStorageContainerDestinations gets a reference to the given []StorageContainerDestinationInstance and assigns it to the StorageContainerDestinations field.
func (o *RemoteSystemInstance) SetStorageContainerDestinations(v []StorageContainerDestinationInstance) {
	o.StorageContainerDestinations = v
}

// GetReplicationSessions returns the ReplicationSessions field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetReplicationSessions() []ReplicationSessionInstance {
	if o == nil || IsNil(o.ReplicationSessions) {
		var ret []ReplicationSessionInstance
		return ret
	}
	return o.ReplicationSessions
}

// GetReplicationSessionsOk returns a tuple with the ReplicationSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetReplicationSessionsOk() ([]ReplicationSessionInstance, bool) {
	if o == nil || IsNil(o.ReplicationSessions) {
		return nil, false
	}
	return o.ReplicationSessions, true
}

// HasReplicationSessions returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasReplicationSessions() bool {
	if o != nil && !IsNil(o.ReplicationSessions) {
		return true
	}

	return false
}

// SetReplicationSessions gets a reference to the given []ReplicationSessionInstance and assigns it to the ReplicationSessions field.
func (o *RemoteSystemInstance) SetReplicationSessions(v []ReplicationSessionInstance) {
	o.ReplicationSessions = v
}

// GetRemoteSnapshotSessions returns the RemoteSnapshotSessions field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetRemoteSnapshotSessions() []RemoteSnapshotSessionInstance {
	if o == nil || IsNil(o.RemoteSnapshotSessions) {
		var ret []RemoteSnapshotSessionInstance
		return ret
	}
	return o.RemoteSnapshotSessions
}

// GetRemoteSnapshotSessionsOk returns a tuple with the RemoteSnapshotSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetRemoteSnapshotSessionsOk() ([]RemoteSnapshotSessionInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshotSessions) {
		return nil, false
	}
	return o.RemoteSnapshotSessions, true
}

// HasRemoteSnapshotSessions returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasRemoteSnapshotSessions() bool {
	if o != nil && !IsNil(o.RemoteSnapshotSessions) {
		return true
	}

	return false
}

// SetRemoteSnapshotSessions gets a reference to the given []RemoteSnapshotSessionInstance and assigns it to the RemoteSnapshotSessions field.
func (o *RemoteSystemInstance) SetRemoteSnapshotSessions(v []RemoteSnapshotSessionInstance) {
	o.RemoteSnapshotSessions = v
}

// GetRemoteSnapshots returns the RemoteSnapshots field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetRemoteSnapshots() []RemoteSnapshotInstance {
	if o == nil || IsNil(o.RemoteSnapshots) {
		var ret []RemoteSnapshotInstance
		return ret
	}
	return o.RemoteSnapshots
}

// GetRemoteSnapshotsOk returns a tuple with the RemoteSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetRemoteSnapshotsOk() ([]RemoteSnapshotInstance, bool) {
	if o == nil || IsNil(o.RemoteSnapshots) {
		return nil, false
	}
	return o.RemoteSnapshots, true
}

// HasRemoteSnapshots returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasRemoteSnapshots() bool {
	if o != nil && !IsNil(o.RemoteSnapshots) {
		return true
	}

	return false
}

// SetRemoteSnapshots gets a reference to the given []RemoteSnapshotInstance and assigns it to the RemoteSnapshots field.
func (o *RemoteSystemInstance) SetRemoteSnapshots(v []RemoteSnapshotInstance) {
	o.RemoteSnapshots = v
}

// GetImportUniversalVolumes returns the ImportUniversalVolumes field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetImportUniversalVolumes() []ImportUniversalVolumeInstance {
	if o == nil || IsNil(o.ImportUniversalVolumes) {
		var ret []ImportUniversalVolumeInstance
		return ret
	}
	return o.ImportUniversalVolumes
}

// GetImportUniversalVolumesOk returns a tuple with the ImportUniversalVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetImportUniversalVolumesOk() ([]ImportUniversalVolumeInstance, bool) {
	if o == nil || IsNil(o.ImportUniversalVolumes) {
		return nil, false
	}
	return o.ImportUniversalVolumes, true
}

// HasImportUniversalVolumes returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasImportUniversalVolumes() bool {
	if o != nil && !IsNil(o.ImportUniversalVolumes) {
		return true
	}

	return false
}

// SetImportUniversalVolumes gets a reference to the given []ImportUniversalVolumeInstance and assigns it to the ImportUniversalVolumes field.
func (o *RemoteSystemInstance) SetImportUniversalVolumes(v []ImportUniversalVolumeInstance) {
	o.ImportUniversalVolumes = v
}

// GetImportUniversalConsistencyGroup returns the ImportUniversalConsistencyGroup field value if set, zero value otherwise.
func (o *RemoteSystemInstance) GetImportUniversalConsistencyGroup() []ImportUniversalConsistencyGroupInstance {
	if o == nil || IsNil(o.ImportUniversalConsistencyGroup) {
		var ret []ImportUniversalConsistencyGroupInstance
		return ret
	}
	return o.ImportUniversalConsistencyGroup
}

// GetImportUniversalConsistencyGroupOk returns a tuple with the ImportUniversalConsistencyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSystemInstance) GetImportUniversalConsistencyGroupOk() ([]ImportUniversalConsistencyGroupInstance, bool) {
	if o == nil || IsNil(o.ImportUniversalConsistencyGroup) {
		return nil, false
	}
	return o.ImportUniversalConsistencyGroup, true
}

// HasImportUniversalConsistencyGroup returns a boolean if a field has been set.
func (o *RemoteSystemInstance) HasImportUniversalConsistencyGroup() bool {
	if o != nil && !IsNil(o.ImportUniversalConsistencyGroup) {
		return true
	}

	return false
}

// SetImportUniversalConsistencyGroup gets a reference to the given []ImportUniversalConsistencyGroupInstance and assigns it to the ImportUniversalConsistencyGroup field.
func (o *RemoteSystemInstance) SetImportUniversalConsistencyGroup(v []ImportUniversalConsistencyGroupInstance) {
	o.ImportUniversalConsistencyGroup = v
}

func (o RemoteSystemInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteSystemInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.ManagementAddress) {
		toSerialize["management_address"] = o.ManagementAddress
	}
	if !IsNil(o.ManagementPort) {
		toSerialize["management_port"] = o.ManagementPort
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.DataConnectionType) {
		toSerialize["data_connection_type"] = o.DataConnectionType
	}
	if !IsNil(o.DataConnectionState) {
		toSerialize["data_connection_state"] = o.DataConnectionState
	}
	if !IsNil(o.IscsiAddresses) {
		toSerialize["iscsi_addresses"] = o.IscsiAddresses
	}
	if !IsNil(o.FcTargetWwns) {
		toSerialize["fc_target_wwns"] = o.FcTargetWwns
	}
	if !IsNil(o.DiscoveryChapMode) {
		toSerialize["discovery_chap_mode"] = o.DiscoveryChapMode
	}
	if !IsNil(o.SessionChapMode) {
		toSerialize["session_chap_mode"] = o.SessionChapMode
	}
	if !IsNil(o.DataNetworkLatency) {
		toSerialize["data_network_latency"] = o.DataNetworkLatency
	}
	if !IsNil(o.DataConnections) {
		toSerialize["data_connections"] = o.DataConnections
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.FileConnectionAddress) {
		toSerialize["file_connection_address"] = o.FileConnectionAddress
	}
	if !IsNil(o.FileConnectionState) {
		toSerialize["file_connection_state"] = o.FileConnectionState
	}
	if !IsNil(o.VnxFileUsername) {
		toSerialize["vnx_file_username"] = o.VnxFileUsername
	}
	if !IsNil(o.PpddStorageUnitDetails) {
		toSerialize["ppdd_storage_unit_details"] = o.PpddStorageUnitDetails
	}
	if !IsNil(o.ApplianceDetails) {
		toSerialize["appliance_details"] = o.ApplianceDetails
	}
	if !IsNil(o.UnityFileDetails) {
		toSerialize["unity_file_details"] = o.UnityFileDetails
	}
	if !IsNil(o.PowerstoreDataNetworkConfiguration) {
		toSerialize["powerstore_data_network_configuration"] = o.PowerstoreDataNetworkConfiguration
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.StateL10n) {
		toSerialize["state_l10n"] = o.StateL10n
	}
	if !IsNil(o.DataConnectionTypeL10n) {
		toSerialize["data_connection_type_l10n"] = o.DataConnectionTypeL10n
	}
	if !IsNil(o.DataConnectionStateL10n) {
		toSerialize["data_connection_state_l10n"] = o.DataConnectionStateL10n
	}
	if !IsNil(o.DiscoveryChapModeL10n) {
		toSerialize["discovery_chap_mode_l10n"] = o.DiscoveryChapModeL10n
	}
	if !IsNil(o.SessionChapModeL10n) {
		toSerialize["session_chap_mode_l10n"] = o.SessionChapModeL10n
	}
	if !IsNil(o.DataNetworkLatencyL10n) {
		toSerialize["data_network_latency_l10n"] = o.DataNetworkLatencyL10n
	}
	if !IsNil(o.CapabilitiesL10n) {
		toSerialize["capabilities_l10n"] = o.CapabilitiesL10n
	}
	if !IsNil(o.FileConnectionStateL10n) {
		toSerialize["file_connection_state_l10n"] = o.FileConnectionStateL10n
	}
	if !IsNil(o.SnapshotRules) {
		toSerialize["snapshot_rules"] = o.SnapshotRules
	}
	if !IsNil(o.ReplicationRules) {
		toSerialize["replication_rules"] = o.ReplicationRules
	}
	if !IsNil(o.ImportSessions) {
		toSerialize["import_sessions"] = o.ImportSessions
	}
	if !IsNil(o.StorageContainerDestinations) {
		toSerialize["storage_container_destinations"] = o.StorageContainerDestinations
	}
	if !IsNil(o.ReplicationSessions) {
		toSerialize["replication_sessions"] = o.ReplicationSessions
	}
	if !IsNil(o.RemoteSnapshotSessions) {
		toSerialize["remote_snapshot_sessions"] = o.RemoteSnapshotSessions
	}
	if !IsNil(o.RemoteSnapshots) {
		toSerialize["remote_snapshots"] = o.RemoteSnapshots
	}
	if !IsNil(o.ImportUniversalVolumes) {
		toSerialize["import_universal_volumes"] = o.ImportUniversalVolumes
	}
	if !IsNil(o.ImportUniversalConsistencyGroup) {
		toSerialize["import_universal_consistency_group"] = o.ImportUniversalConsistencyGroup
	}
	return toSerialize, nil
}

type NullableRemoteSystemInstance struct {
	value *RemoteSystemInstance
	isSet bool
}

func (v NullableRemoteSystemInstance) Get() *RemoteSystemInstance {
	return v.value
}

func (v *NullableRemoteSystemInstance) Set(val *RemoteSystemInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSystemInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSystemInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSystemInstance(val *RemoteSystemInstance) *NullableRemoteSystemInstance {
	return &NullableRemoteSystemInstance{value: val, isSet: true}
}

func (v NullableRemoteSystemInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSystemInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


