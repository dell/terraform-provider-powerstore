/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the UnityFileDetailsInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnityFileDetailsInstance{}

// UnityFileDetailsInstance Unity file details to register with Powerstore as a remote system for file import.  Was added in version 4.0.0.0.  Filtering on the fields of this embedded resource is not supported.
type UnityFileDetailsInstance struct {
	// User-specified Unity service account username. service account is preferred for file import. 
	ServiceAccountUsername *string `json:"service_account_username,omitempty"`
}

// NewUnityFileDetailsInstance instantiates a new UnityFileDetailsInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnityFileDetailsInstance() *UnityFileDetailsInstance {
	this := UnityFileDetailsInstance{}
	return &this
}

// NewUnityFileDetailsInstanceWithDefaults instantiates a new UnityFileDetailsInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnityFileDetailsInstanceWithDefaults() *UnityFileDetailsInstance {
	this := UnityFileDetailsInstance{}
	return &this
}

// GetServiceAccountUsername returns the ServiceAccountUsername field value if set, zero value otherwise.
func (o *UnityFileDetailsInstance) GetServiceAccountUsername() string {
	if o == nil || IsNil(o.ServiceAccountUsername) {
		var ret string
		return ret
	}
	return *o.ServiceAccountUsername
}

// GetServiceAccountUsernameOk returns a tuple with the ServiceAccountUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnityFileDetailsInstance) GetServiceAccountUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccountUsername) {
		return nil, false
	}
	return o.ServiceAccountUsername, true
}

// HasServiceAccountUsername returns a boolean if a field has been set.
func (o *UnityFileDetailsInstance) HasServiceAccountUsername() bool {
	if o != nil && !IsNil(o.ServiceAccountUsername) {
		return true
	}

	return false
}

// SetServiceAccountUsername gets a reference to the given string and assigns it to the ServiceAccountUsername field.
func (o *UnityFileDetailsInstance) SetServiceAccountUsername(v string) {
	o.ServiceAccountUsername = &v
}

func (o UnityFileDetailsInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnityFileDetailsInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceAccountUsername) {
		toSerialize["service_account_username"] = o.ServiceAccountUsername
	}
	return toSerialize, nil
}

type NullableUnityFileDetailsInstance struct {
	value *UnityFileDetailsInstance
	isSet bool
}

func (v NullableUnityFileDetailsInstance) Get() *UnityFileDetailsInstance {
	return v.value
}

func (v *NullableUnityFileDetailsInstance) Set(val *UnityFileDetailsInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableUnityFileDetailsInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableUnityFileDetailsInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnityFileDetailsInstance(val *UnityFileDetailsInstance) *NullableUnityFileDetailsInstance {
	return &NullableUnityFileDetailsInstance{value: val, isSet: true}
}

func (v NullableUnityFileDetailsInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnityFileDetailsInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


