/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// ReplicationStateEnum State of the replication session: * Initializing - The replication session is being created.   The status changes to OK after the replication session is created. * OK - No other operation. The replication session is operating normally. * Synchronizing - The replication session has started either a manual or automatic synchronization. * System_Paused - Replication session operation has failed or was cancelled and moved to this state by the system.   User intervention required. * Paused - User paused the replication session. * Paused_For_Migration - Migration paused the replication session. * Paused_For_NDU - A non-disruptive upgrade paused the replication session. * Pausing - The replication session is pausing operation.   The replication state would change to Paused after the pause operation is completed. * Resuming - The replication session is resuming operation.   Once resume completes the state would be based on what activity was in-progress when it was paused. * Modify_Role_In_Progress - Replication session's role is being modified. * Failing_Over - A planned failover is in progress.   The status changes to Failed_Over after the replication session has failed over. * Failing_Over_For_DR - An unplanned failover is in progress.   The status changes to Failed_Over after the replication session has failed over. * Failed_Over - The replication session underwent a planned or unplanned failover. User intervention required. * Reprotecting - The replication session is being reprotected.   The status changes to OK after the replication session has been reprotected.  * Switching_To_Metro_Sync - Replication session transition to Metro sync mode in-progress. * Fractured - Metro replication session is fractured due to a fault.   Session is degraded and is available for production IO from preferred site settings. * Deleting - Replication session is being deleted. * Partial_OK - Replication session state for a NAS server replication,   when one or more File Systems are not replicating to the destination. * Partial_Paused - Replication session state for a NAS server replication,   when some, but not all of the File System replication sessions are in Paused state. * Partial_Failed_Over - Replication session state for a NAS server replication,   when some, but not all of the File System replication sessions are in Failed_Over state. * Partial_Reprotected - Replication session state for a NAS server replication,   when some, but not all of the File System replication sessions are re-protected successfully after a fail over. * Error - Any other failure not specified. * Switching_To_Synchronous     - Replication session transition to Synchronous mode in-progress. * Partial_Failed_Back - Replication session state for a NAS server replication, when some, but not all of the File System replication sessions are Failed_Back successfully after a failover. 
type ReplicationStateEnum string

// List of ReplicationStateEnum
const (
	REPLICATIONSTATEENUM_DELETING ReplicationStateEnum = "Deleting"
	REPLICATIONSTATEENUM_ERROR ReplicationStateEnum = "Error"
	REPLICATIONSTATEENUM_FAILED_OVER ReplicationStateEnum = "Failed_Over"
	REPLICATIONSTATEENUM_FAILING_OVER ReplicationStateEnum = "Failing_Over"
	REPLICATIONSTATEENUM_FAILING_OVER_FOR_DR ReplicationStateEnum = "Failing_Over_For_DR"
	REPLICATIONSTATEENUM_FRACTURED ReplicationStateEnum = "Fractured"
	REPLICATIONSTATEENUM_INITIALIZING ReplicationStateEnum = "Initializing"
	REPLICATIONSTATEENUM_MODIFY_ROLE_IN_PROGRESS ReplicationStateEnum = "Modify_Role_In_Progress"
	REPLICATIONSTATEENUM_OK ReplicationStateEnum = "OK"
	REPLICATIONSTATEENUM_PARTIAL_FAILED_BACK ReplicationStateEnum = "Partial_Failed_Back"
	REPLICATIONSTATEENUM_PARTIAL_FAILED_OVER ReplicationStateEnum = "Partial_Failed_Over"
	REPLICATIONSTATEENUM_PARTIAL_OK ReplicationStateEnum = "Partial_OK"
	REPLICATIONSTATEENUM_PARTIAL_PAUSED ReplicationStateEnum = "Partial_Paused"
	REPLICATIONSTATEENUM_PARTIAL_REPROTECTED ReplicationStateEnum = "Partial_Reprotected"
	REPLICATIONSTATEENUM_PAUSED ReplicationStateEnum = "Paused"
	REPLICATIONSTATEENUM_PAUSED_FOR_MIGRATION ReplicationStateEnum = "Paused_For_Migration"
	REPLICATIONSTATEENUM_PAUSED_FOR_NDU ReplicationStateEnum = "Paused_For_NDU"
	REPLICATIONSTATEENUM_PAUSING ReplicationStateEnum = "Pausing"
	REPLICATIONSTATEENUM_REPROTECTING ReplicationStateEnum = "Reprotecting"
	REPLICATIONSTATEENUM_RESUMING ReplicationStateEnum = "Resuming"
	REPLICATIONSTATEENUM_SWITCHING_TO_METRO_SYNC ReplicationStateEnum = "Switching_To_Metro_Sync"
	REPLICATIONSTATEENUM_SWITCHING_TO_SYNCHRONOUS ReplicationStateEnum = "Switching_To_Synchronous"
	REPLICATIONSTATEENUM_SYNCHRONIZING ReplicationStateEnum = "Synchronizing"
	REPLICATIONSTATEENUM_SYSTEM_PAUSED ReplicationStateEnum = "System_Paused"
)

// All allowed values of ReplicationStateEnum enum
var AllowedReplicationStateEnumEnumValues = []ReplicationStateEnum{
	"Deleting",
	"Error",
	"Failed_Over",
	"Failing_Over",
	"Failing_Over_For_DR",
	"Fractured",
	"Initializing",
	"Modify_Role_In_Progress",
	"OK",
	"Partial_Failed_Back",
	"Partial_Failed_Over",
	"Partial_OK",
	"Partial_Paused",
	"Partial_Reprotected",
	"Paused",
	"Paused_For_Migration",
	"Paused_For_NDU",
	"Pausing",
	"Reprotecting",
	"Resuming",
	"Switching_To_Metro_Sync",
	"Switching_To_Synchronous",
	"Synchronizing",
	"System_Paused",
}

func (v *ReplicationStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationStateEnum(value)
	for _, existing := range AllowedReplicationStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationStateEnum", value)
}

// NewReplicationStateEnumFromValue returns a pointer to a valid ReplicationStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationStateEnumFromValue(v string) (*ReplicationStateEnum, error) {
	ev := ReplicationStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationStateEnum: valid values are %v", v, AllowedReplicationStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationStateEnum) IsValid() bool {
	for _, existing := range AllowedReplicationStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationStateEnum value
func (v ReplicationStateEnum) Ptr() *ReplicationStateEnum {
	return &v
}

type NullableReplicationStateEnum struct {
	value *ReplicationStateEnum
	isSet bool
}

func (v NullableReplicationStateEnum) Get() *ReplicationStateEnum {
	return v.value
}

func (v *NullableReplicationStateEnum) Set(val *ReplicationStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationStateEnum(val *ReplicationStateEnum) *NullableReplicationStateEnum {
	return &NullableReplicationStateEnum{value: val, isSet: true}
}

func (v NullableReplicationStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

