/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the NetworkInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInstance{}

// NetworkInstance Properties of the network. Values was added in 2.0.0.0: name, purposes. Values was added in 3.0.0.0: nvme_discovery_mode, nvme_cdc_address, nvme_cdc_port. This resource type has queriable association from ip_pool_address
type NetworkInstance struct {
	// Unique identifier of the network.
	Id *string `json:"id,omitempty"`
	Type *NetworkTypeEnum `json:"type,omitempty"`
	// Name of the network.  This property supports case-insensitive filtering. Was added in version 2.0.0.0.
	Name *string `json:"name,omitempty"`
	IpVersion *IpVersionTypeEnum `json:"ip_version,omitempty"`
	// Purposes of the network. This returns a list of purposes for the networks that support multiple purposes per network, like storage network. Empty list is returned for single purposed networks, like management, vMotion, ICD and ICM.  Was added in version 2.0.0.0.
	Purposes []NetworkPurposeEnum `json:"purposes,omitempty"`
	// VLAN identifier.
	VlanId *int32 `json:"vlan_id,omitempty"`
	// Network prefix length, used for both IPv4 and IPv6.
	PrefixLength *int32 `json:"prefix_length,omitempty"`
	// Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version.
	Gateway *string `json:"gateway,omitempty"`
	// Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.
	Mtu *int32 `json:"mtu,omitempty"`
	NvmeDiscoveryMode *NVMeDiscoveryModeEnum `json:"nvme_discovery_mode,omitempty"`
	// IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.
	NvmeCdcAddress *string `json:"nvme_cdc_address,omitempty"`
	// TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.
	NvmeCdcPort *int32 `json:"nvme_cdc_port,omitempty"`
	// Localized message string corresponding to type
	TypeL10n *string `json:"type_l10n,omitempty"`
	// Localized message string corresponding to ip_version
	IpVersionL10n *string `json:"ip_version_l10n,omitempty"`
	// Localized message array corresponding to purposes Was added in version 2.0.0.0.
	PurposesL10n []string `json:"purposes_l10n,omitempty"`
	// Localized message string corresponding to nvme_discovery_mode Was added in version 3.0.0.0.
	NvmeDiscoveryModeL10n *string `json:"nvme_discovery_mode_l10n,omitempty"`
	// This is the inverse of the resource type ip_pool_address association.
	IpPoolAddresses []IpPoolAddressInstance `json:"ip_pool_addresses,omitempty"`
}

// NewNetworkInstance instantiates a new NetworkInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInstance() *NetworkInstance {
	this := NetworkInstance{}
	var nvmeCdcPort int32 = 8009
	this.NvmeCdcPort = &nvmeCdcPort
	return &this
}

// NewNetworkInstanceWithDefaults instantiates a new NetworkInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInstanceWithDefaults() *NetworkInstance {
	this := NetworkInstance{}
	var nvmeCdcPort int32 = 8009
	this.NvmeCdcPort = &nvmeCdcPort
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NetworkInstance) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkInstance) GetType() NetworkTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret NetworkTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetTypeOk() (*NetworkTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NetworkTypeEnum and assigns it to the Type field.
func (o *NetworkInstance) SetType(v NetworkTypeEnum) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkInstance) SetName(v string) {
	o.Name = &v
}

// GetIpVersion returns the IpVersion field value if set, zero value otherwise.
func (o *NetworkInstance) GetIpVersion() IpVersionTypeEnum {
	if o == nil || IsNil(o.IpVersion) {
		var ret IpVersionTypeEnum
		return ret
	}
	return *o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetIpVersionOk() (*IpVersionTypeEnum, bool) {
	if o == nil || IsNil(o.IpVersion) {
		return nil, false
	}
	return o.IpVersion, true
}

// HasIpVersion returns a boolean if a field has been set.
func (o *NetworkInstance) HasIpVersion() bool {
	if o != nil && !IsNil(o.IpVersion) {
		return true
	}

	return false
}

// SetIpVersion gets a reference to the given IpVersionTypeEnum and assigns it to the IpVersion field.
func (o *NetworkInstance) SetIpVersion(v IpVersionTypeEnum) {
	o.IpVersion = &v
}

// GetPurposes returns the Purposes field value if set, zero value otherwise.
func (o *NetworkInstance) GetPurposes() []NetworkPurposeEnum {
	if o == nil || IsNil(o.Purposes) {
		var ret []NetworkPurposeEnum
		return ret
	}
	return o.Purposes
}

// GetPurposesOk returns a tuple with the Purposes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetPurposesOk() ([]NetworkPurposeEnum, bool) {
	if o == nil || IsNil(o.Purposes) {
		return nil, false
	}
	return o.Purposes, true
}

// HasPurposes returns a boolean if a field has been set.
func (o *NetworkInstance) HasPurposes() bool {
	if o != nil && !IsNil(o.Purposes) {
		return true
	}

	return false
}

// SetPurposes gets a reference to the given []NetworkPurposeEnum and assigns it to the Purposes field.
func (o *NetworkInstance) SetPurposes(v []NetworkPurposeEnum) {
	o.Purposes = v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *NetworkInstance) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *NetworkInstance) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *NetworkInstance) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetPrefixLength returns the PrefixLength field value if set, zero value otherwise.
func (o *NetworkInstance) GetPrefixLength() int32 {
	if o == nil || IsNil(o.PrefixLength) {
		var ret int32
		return ret
	}
	return *o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetPrefixLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.PrefixLength) {
		return nil, false
	}
	return o.PrefixLength, true
}

// HasPrefixLength returns a boolean if a field has been set.
func (o *NetworkInstance) HasPrefixLength() bool {
	if o != nil && !IsNil(o.PrefixLength) {
		return true
	}

	return false
}

// SetPrefixLength gets a reference to the given int32 and assigns it to the PrefixLength field.
func (o *NetworkInstance) SetPrefixLength(v int32) {
	o.PrefixLength = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *NetworkInstance) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *NetworkInstance) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *NetworkInstance) SetGateway(v string) {
	o.Gateway = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *NetworkInstance) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *NetworkInstance) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *NetworkInstance) SetMtu(v int32) {
	o.Mtu = &v
}

// GetNvmeDiscoveryMode returns the NvmeDiscoveryMode field value if set, zero value otherwise.
func (o *NetworkInstance) GetNvmeDiscoveryMode() NVMeDiscoveryModeEnum {
	if o == nil || IsNil(o.NvmeDiscoveryMode) {
		var ret NVMeDiscoveryModeEnum
		return ret
	}
	return *o.NvmeDiscoveryMode
}

// GetNvmeDiscoveryModeOk returns a tuple with the NvmeDiscoveryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetNvmeDiscoveryModeOk() (*NVMeDiscoveryModeEnum, bool) {
	if o == nil || IsNil(o.NvmeDiscoveryMode) {
		return nil, false
	}
	return o.NvmeDiscoveryMode, true
}

// HasNvmeDiscoveryMode returns a boolean if a field has been set.
func (o *NetworkInstance) HasNvmeDiscoveryMode() bool {
	if o != nil && !IsNil(o.NvmeDiscoveryMode) {
		return true
	}

	return false
}

// SetNvmeDiscoveryMode gets a reference to the given NVMeDiscoveryModeEnum and assigns it to the NvmeDiscoveryMode field.
func (o *NetworkInstance) SetNvmeDiscoveryMode(v NVMeDiscoveryModeEnum) {
	o.NvmeDiscoveryMode = &v
}

// GetNvmeCdcAddress returns the NvmeCdcAddress field value if set, zero value otherwise.
func (o *NetworkInstance) GetNvmeCdcAddress() string {
	if o == nil || IsNil(o.NvmeCdcAddress) {
		var ret string
		return ret
	}
	return *o.NvmeCdcAddress
}

// GetNvmeCdcAddressOk returns a tuple with the NvmeCdcAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetNvmeCdcAddressOk() (*string, bool) {
	if o == nil || IsNil(o.NvmeCdcAddress) {
		return nil, false
	}
	return o.NvmeCdcAddress, true
}

// HasNvmeCdcAddress returns a boolean if a field has been set.
func (o *NetworkInstance) HasNvmeCdcAddress() bool {
	if o != nil && !IsNil(o.NvmeCdcAddress) {
		return true
	}

	return false
}

// SetNvmeCdcAddress gets a reference to the given string and assigns it to the NvmeCdcAddress field.
func (o *NetworkInstance) SetNvmeCdcAddress(v string) {
	o.NvmeCdcAddress = &v
}

// GetNvmeCdcPort returns the NvmeCdcPort field value if set, zero value otherwise.
func (o *NetworkInstance) GetNvmeCdcPort() int32 {
	if o == nil || IsNil(o.NvmeCdcPort) {
		var ret int32
		return ret
	}
	return *o.NvmeCdcPort
}

// GetNvmeCdcPortOk returns a tuple with the NvmeCdcPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetNvmeCdcPortOk() (*int32, bool) {
	if o == nil || IsNil(o.NvmeCdcPort) {
		return nil, false
	}
	return o.NvmeCdcPort, true
}

// HasNvmeCdcPort returns a boolean if a field has been set.
func (o *NetworkInstance) HasNvmeCdcPort() bool {
	if o != nil && !IsNil(o.NvmeCdcPort) {
		return true
	}

	return false
}

// SetNvmeCdcPort gets a reference to the given int32 and assigns it to the NvmeCdcPort field.
func (o *NetworkInstance) SetNvmeCdcPort(v int32) {
	o.NvmeCdcPort = &v
}

// GetTypeL10n returns the TypeL10n field value if set, zero value otherwise.
func (o *NetworkInstance) GetTypeL10n() string {
	if o == nil || IsNil(o.TypeL10n) {
		var ret string
		return ret
	}
	return *o.TypeL10n
}

// GetTypeL10nOk returns a tuple with the TypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.TypeL10n) {
		return nil, false
	}
	return o.TypeL10n, true
}

// HasTypeL10n returns a boolean if a field has been set.
func (o *NetworkInstance) HasTypeL10n() bool {
	if o != nil && !IsNil(o.TypeL10n) {
		return true
	}

	return false
}

// SetTypeL10n gets a reference to the given string and assigns it to the TypeL10n field.
func (o *NetworkInstance) SetTypeL10n(v string) {
	o.TypeL10n = &v
}

// GetIpVersionL10n returns the IpVersionL10n field value if set, zero value otherwise.
func (o *NetworkInstance) GetIpVersionL10n() string {
	if o == nil || IsNil(o.IpVersionL10n) {
		var ret string
		return ret
	}
	return *o.IpVersionL10n
}

// GetIpVersionL10nOk returns a tuple with the IpVersionL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetIpVersionL10nOk() (*string, bool) {
	if o == nil || IsNil(o.IpVersionL10n) {
		return nil, false
	}
	return o.IpVersionL10n, true
}

// HasIpVersionL10n returns a boolean if a field has been set.
func (o *NetworkInstance) HasIpVersionL10n() bool {
	if o != nil && !IsNil(o.IpVersionL10n) {
		return true
	}

	return false
}

// SetIpVersionL10n gets a reference to the given string and assigns it to the IpVersionL10n field.
func (o *NetworkInstance) SetIpVersionL10n(v string) {
	o.IpVersionL10n = &v
}

// GetPurposesL10n returns the PurposesL10n field value if set, zero value otherwise.
func (o *NetworkInstance) GetPurposesL10n() []string {
	if o == nil || IsNil(o.PurposesL10n) {
		var ret []string
		return ret
	}
	return o.PurposesL10n
}

// GetPurposesL10nOk returns a tuple with the PurposesL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetPurposesL10nOk() ([]string, bool) {
	if o == nil || IsNil(o.PurposesL10n) {
		return nil, false
	}
	return o.PurposesL10n, true
}

// HasPurposesL10n returns a boolean if a field has been set.
func (o *NetworkInstance) HasPurposesL10n() bool {
	if o != nil && !IsNil(o.PurposesL10n) {
		return true
	}

	return false
}

// SetPurposesL10n gets a reference to the given []string and assigns it to the PurposesL10n field.
func (o *NetworkInstance) SetPurposesL10n(v []string) {
	o.PurposesL10n = v
}

// GetNvmeDiscoveryModeL10n returns the NvmeDiscoveryModeL10n field value if set, zero value otherwise.
func (o *NetworkInstance) GetNvmeDiscoveryModeL10n() string {
	if o == nil || IsNil(o.NvmeDiscoveryModeL10n) {
		var ret string
		return ret
	}
	return *o.NvmeDiscoveryModeL10n
}

// GetNvmeDiscoveryModeL10nOk returns a tuple with the NvmeDiscoveryModeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetNvmeDiscoveryModeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.NvmeDiscoveryModeL10n) {
		return nil, false
	}
	return o.NvmeDiscoveryModeL10n, true
}

// HasNvmeDiscoveryModeL10n returns a boolean if a field has been set.
func (o *NetworkInstance) HasNvmeDiscoveryModeL10n() bool {
	if o != nil && !IsNil(o.NvmeDiscoveryModeL10n) {
		return true
	}

	return false
}

// SetNvmeDiscoveryModeL10n gets a reference to the given string and assigns it to the NvmeDiscoveryModeL10n field.
func (o *NetworkInstance) SetNvmeDiscoveryModeL10n(v string) {
	o.NvmeDiscoveryModeL10n = &v
}

// GetIpPoolAddresses returns the IpPoolAddresses field value if set, zero value otherwise.
func (o *NetworkInstance) GetIpPoolAddresses() []IpPoolAddressInstance {
	if o == nil || IsNil(o.IpPoolAddresses) {
		var ret []IpPoolAddressInstance
		return ret
	}
	return o.IpPoolAddresses
}

// GetIpPoolAddressesOk returns a tuple with the IpPoolAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInstance) GetIpPoolAddressesOk() ([]IpPoolAddressInstance, bool) {
	if o == nil || IsNil(o.IpPoolAddresses) {
		return nil, false
	}
	return o.IpPoolAddresses, true
}

// HasIpPoolAddresses returns a boolean if a field has been set.
func (o *NetworkInstance) HasIpPoolAddresses() bool {
	if o != nil && !IsNil(o.IpPoolAddresses) {
		return true
	}

	return false
}

// SetIpPoolAddresses gets a reference to the given []IpPoolAddressInstance and assigns it to the IpPoolAddresses field.
func (o *NetworkInstance) SetIpPoolAddresses(v []IpPoolAddressInstance) {
	o.IpPoolAddresses = v
}

func (o NetworkInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IpVersion) {
		toSerialize["ip_version"] = o.IpVersion
	}
	if !IsNil(o.Purposes) {
		toSerialize["purposes"] = o.Purposes
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.PrefixLength) {
		toSerialize["prefix_length"] = o.PrefixLength
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.NvmeDiscoveryMode) {
		toSerialize["nvme_discovery_mode"] = o.NvmeDiscoveryMode
	}
	if !IsNil(o.NvmeCdcAddress) {
		toSerialize["nvme_cdc_address"] = o.NvmeCdcAddress
	}
	if !IsNil(o.NvmeCdcPort) {
		toSerialize["nvme_cdc_port"] = o.NvmeCdcPort
	}
	if !IsNil(o.TypeL10n) {
		toSerialize["type_l10n"] = o.TypeL10n
	}
	if !IsNil(o.IpVersionL10n) {
		toSerialize["ip_version_l10n"] = o.IpVersionL10n
	}
	if !IsNil(o.PurposesL10n) {
		toSerialize["purposes_l10n"] = o.PurposesL10n
	}
	if !IsNil(o.NvmeDiscoveryModeL10n) {
		toSerialize["nvme_discovery_mode_l10n"] = o.NvmeDiscoveryModeL10n
	}
	if !IsNil(o.IpPoolAddresses) {
		toSerialize["ip_pool_addresses"] = o.IpPoolAddresses
	}
	return toSerialize, nil
}

type NullableNetworkInstance struct {
	value *NetworkInstance
	isSet bool
}

func (v NullableNetworkInstance) Get() *NetworkInstance {
	return v.value
}

func (v *NullableNetworkInstance) Set(val *NetworkInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInstance(val *NetworkInstance) *NullableNetworkInstance {
	return &NullableNetworkInstance{value: val, isSet: true}
}

func (v NullableNetworkInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


