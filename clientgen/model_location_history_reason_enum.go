/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"fmt"
)

// LocationHistoryReasonEnum Reason for storage resource relocation.  * Initial - Initial placement.  * Manual - Manual migration operation initiated by user.  * Recommended - Storage system recommended migration. 
type LocationHistoryReasonEnum string

// List of LocationHistoryReasonEnum
const (
	LOCATIONHISTORYREASONENUM_INITIAL LocationHistoryReasonEnum = "Initial"
	LOCATIONHISTORYREASONENUM_MANUAL LocationHistoryReasonEnum = "Manual"
	LOCATIONHISTORYREASONENUM_RECOMMENDED LocationHistoryReasonEnum = "Recommended"
)

// All allowed values of LocationHistoryReasonEnum enum
var AllowedLocationHistoryReasonEnumEnumValues = []LocationHistoryReasonEnum{
	"Initial",
	"Manual",
	"Recommended",
}

func (v *LocationHistoryReasonEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationHistoryReasonEnum(value)
	for _, existing := range AllowedLocationHistoryReasonEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationHistoryReasonEnum", value)
}

// NewLocationHistoryReasonEnumFromValue returns a pointer to a valid LocationHistoryReasonEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationHistoryReasonEnumFromValue(v string) (*LocationHistoryReasonEnum, error) {
	ev := LocationHistoryReasonEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationHistoryReasonEnum: valid values are %v", v, AllowedLocationHistoryReasonEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationHistoryReasonEnum) IsValid() bool {
	for _, existing := range AllowedLocationHistoryReasonEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationHistoryReasonEnum value
func (v LocationHistoryReasonEnum) Ptr() *LocationHistoryReasonEnum {
	return &v
}

type NullableLocationHistoryReasonEnum struct {
	value *LocationHistoryReasonEnum
	isSet bool
}

func (v NullableLocationHistoryReasonEnum) Get() *LocationHistoryReasonEnum {
	return v.value
}

func (v *NullableLocationHistoryReasonEnum) Set(val *LocationHistoryReasonEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationHistoryReasonEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationHistoryReasonEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationHistoryReasonEnum(val *LocationHistoryReasonEnum) *NullableLocationHistoryReasonEnum {
	return &NullableLocationHistoryReasonEnum{value: val, isSet: true}
}

func (v NullableLocationHistoryReasonEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationHistoryReasonEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

