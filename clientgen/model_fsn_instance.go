/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the FsnInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FsnInstance{}

// FsnInstance Properties of a fail-safe network (FSN). Was added in version 3.5.0.0. This resource type has queriable associations from fsn, appliance, ip_port, bond, eth_port
type FsnInstance struct {
	// Unique identifier of the fail-safe network, or null if the FSN is not in a link group.
	Id *string `json:"id,omitempty"`
	// Identifier of the fail-safe network with the same physical location on the other node of the appliance.
	PartnerId *string `json:"partner_id,omitempty"`
	// The id of the appliance containing the fail-safe network.
	ApplianceId *string `json:"appliance_id,omitempty"`
	// Fail-safe network name.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Indicates whether the fail-safe network's link is up. Values are: * true - Link is up. * false - Link is down. 
	IsLinkUp *bool `json:"is_link_up,omitempty"`
	Status *FSNStatusEnum `json:"status,omitempty"`
	// Maximum Transmission Unit (MTU) packet size of the bond, in bytes.
	Mtu *int32 `json:"mtu,omitempty"`
	// The unique identifier of the Ethernet port or bond to be used and is not abandoned unless it fails.
	PrimaryPortId *string `json:"primary_port_id,omitempty"`
	// The unique identifier of the Ethernet port or bond which is currently used as an active connection.
	ActivePortId *string `json:"active_port_id,omitempty"`
	// User supplied description of the fail-safe network.
	Description *string `json:"description,omitempty"`
	// Localized message string corresponding to status Was added in version 3.5.0.0.
	StatusL10n *string `json:"status_l10n,omitempty"`
	// This is the inverse of the resource type ip_port association.
	IpPorts []IpPortInstance `json:"ip_ports,omitempty"`
	// This is the inverse of the resource type bond association.
	Bonds []BondInstance `json:"bonds,omitempty"`
	Partner *FsnInstance `json:"partner,omitempty"`
	Appliance *ApplianceInstance `json:"appliance,omitempty"`
	// This is the inverse of the resource type eth_port association.
	EthPorts []EthPortInstance `json:"eth_ports,omitempty"`
}

// NewFsnInstance instantiates a new FsnInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFsnInstance() *FsnInstance {
	this := FsnInstance{}
	return &this
}

// NewFsnInstanceWithDefaults instantiates a new FsnInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFsnInstanceWithDefaults() *FsnInstance {
	this := FsnInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FsnInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FsnInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FsnInstance) SetId(v string) {
	o.Id = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *FsnInstance) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *FsnInstance) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *FsnInstance) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *FsnInstance) GetApplianceId() string {
	if o == nil || IsNil(o.ApplianceId) {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetApplianceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceId) {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *FsnInstance) HasApplianceId() bool {
	if o != nil && !IsNil(o.ApplianceId) {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *FsnInstance) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FsnInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FsnInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FsnInstance) SetName(v string) {
	o.Name = &v
}

// GetIsLinkUp returns the IsLinkUp field value if set, zero value otherwise.
func (o *FsnInstance) GetIsLinkUp() bool {
	if o == nil || IsNil(o.IsLinkUp) {
		var ret bool
		return ret
	}
	return *o.IsLinkUp
}

// GetIsLinkUpOk returns a tuple with the IsLinkUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetIsLinkUpOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLinkUp) {
		return nil, false
	}
	return o.IsLinkUp, true
}

// HasIsLinkUp returns a boolean if a field has been set.
func (o *FsnInstance) HasIsLinkUp() bool {
	if o != nil && !IsNil(o.IsLinkUp) {
		return true
	}

	return false
}

// SetIsLinkUp gets a reference to the given bool and assigns it to the IsLinkUp field.
func (o *FsnInstance) SetIsLinkUp(v bool) {
	o.IsLinkUp = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FsnInstance) GetStatus() FSNStatusEnum {
	if o == nil || IsNil(o.Status) {
		var ret FSNStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetStatusOk() (*FSNStatusEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FsnInstance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given FSNStatusEnum and assigns it to the Status field.
func (o *FsnInstance) SetStatus(v FSNStatusEnum) {
	o.Status = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *FsnInstance) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *FsnInstance) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *FsnInstance) SetMtu(v int32) {
	o.Mtu = &v
}

// GetPrimaryPortId returns the PrimaryPortId field value if set, zero value otherwise.
func (o *FsnInstance) GetPrimaryPortId() string {
	if o == nil || IsNil(o.PrimaryPortId) {
		var ret string
		return ret
	}
	return *o.PrimaryPortId
}

// GetPrimaryPortIdOk returns a tuple with the PrimaryPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetPrimaryPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryPortId) {
		return nil, false
	}
	return o.PrimaryPortId, true
}

// HasPrimaryPortId returns a boolean if a field has been set.
func (o *FsnInstance) HasPrimaryPortId() bool {
	if o != nil && !IsNil(o.PrimaryPortId) {
		return true
	}

	return false
}

// SetPrimaryPortId gets a reference to the given string and assigns it to the PrimaryPortId field.
func (o *FsnInstance) SetPrimaryPortId(v string) {
	o.PrimaryPortId = &v
}

// GetActivePortId returns the ActivePortId field value if set, zero value otherwise.
func (o *FsnInstance) GetActivePortId() string {
	if o == nil || IsNil(o.ActivePortId) {
		var ret string
		return ret
	}
	return *o.ActivePortId
}

// GetActivePortIdOk returns a tuple with the ActivePortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetActivePortIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActivePortId) {
		return nil, false
	}
	return o.ActivePortId, true
}

// HasActivePortId returns a boolean if a field has been set.
func (o *FsnInstance) HasActivePortId() bool {
	if o != nil && !IsNil(o.ActivePortId) {
		return true
	}

	return false
}

// SetActivePortId gets a reference to the given string and assigns it to the ActivePortId field.
func (o *FsnInstance) SetActivePortId(v string) {
	o.ActivePortId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FsnInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FsnInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FsnInstance) SetDescription(v string) {
	o.Description = &v
}

// GetStatusL10n returns the StatusL10n field value if set, zero value otherwise.
func (o *FsnInstance) GetStatusL10n() string {
	if o == nil || IsNil(o.StatusL10n) {
		var ret string
		return ret
	}
	return *o.StatusL10n
}

// GetStatusL10nOk returns a tuple with the StatusL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetStatusL10nOk() (*string, bool) {
	if o == nil || IsNil(o.StatusL10n) {
		return nil, false
	}
	return o.StatusL10n, true
}

// HasStatusL10n returns a boolean if a field has been set.
func (o *FsnInstance) HasStatusL10n() bool {
	if o != nil && !IsNil(o.StatusL10n) {
		return true
	}

	return false
}

// SetStatusL10n gets a reference to the given string and assigns it to the StatusL10n field.
func (o *FsnInstance) SetStatusL10n(v string) {
	o.StatusL10n = &v
}

// GetIpPorts returns the IpPorts field value if set, zero value otherwise.
func (o *FsnInstance) GetIpPorts() []IpPortInstance {
	if o == nil || IsNil(o.IpPorts) {
		var ret []IpPortInstance
		return ret
	}
	return o.IpPorts
}

// GetIpPortsOk returns a tuple with the IpPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetIpPortsOk() ([]IpPortInstance, bool) {
	if o == nil || IsNil(o.IpPorts) {
		return nil, false
	}
	return o.IpPorts, true
}

// HasIpPorts returns a boolean if a field has been set.
func (o *FsnInstance) HasIpPorts() bool {
	if o != nil && !IsNil(o.IpPorts) {
		return true
	}

	return false
}

// SetIpPorts gets a reference to the given []IpPortInstance and assigns it to the IpPorts field.
func (o *FsnInstance) SetIpPorts(v []IpPortInstance) {
	o.IpPorts = v
}

// GetBonds returns the Bonds field value if set, zero value otherwise.
func (o *FsnInstance) GetBonds() []BondInstance {
	if o == nil || IsNil(o.Bonds) {
		var ret []BondInstance
		return ret
	}
	return o.Bonds
}

// GetBondsOk returns a tuple with the Bonds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetBondsOk() ([]BondInstance, bool) {
	if o == nil || IsNil(o.Bonds) {
		return nil, false
	}
	return o.Bonds, true
}

// HasBonds returns a boolean if a field has been set.
func (o *FsnInstance) HasBonds() bool {
	if o != nil && !IsNil(o.Bonds) {
		return true
	}

	return false
}

// SetBonds gets a reference to the given []BondInstance and assigns it to the Bonds field.
func (o *FsnInstance) SetBonds(v []BondInstance) {
	o.Bonds = v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *FsnInstance) GetPartner() FsnInstance {
	if o == nil || IsNil(o.Partner) {
		var ret FsnInstance
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetPartnerOk() (*FsnInstance, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *FsnInstance) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given FsnInstance and assigns it to the Partner field.
func (o *FsnInstance) SetPartner(v FsnInstance) {
	o.Partner = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *FsnInstance) GetAppliance() ApplianceInstance {
	if o == nil || IsNil(o.Appliance) {
		var ret ApplianceInstance
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetApplianceOk() (*ApplianceInstance, bool) {
	if o == nil || IsNil(o.Appliance) {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *FsnInstance) HasAppliance() bool {
	if o != nil && !IsNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given ApplianceInstance and assigns it to the Appliance field.
func (o *FsnInstance) SetAppliance(v ApplianceInstance) {
	o.Appliance = &v
}

// GetEthPorts returns the EthPorts field value if set, zero value otherwise.
func (o *FsnInstance) GetEthPorts() []EthPortInstance {
	if o == nil || IsNil(o.EthPorts) {
		var ret []EthPortInstance
		return ret
	}
	return o.EthPorts
}

// GetEthPortsOk returns a tuple with the EthPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FsnInstance) GetEthPortsOk() ([]EthPortInstance, bool) {
	if o == nil || IsNil(o.EthPorts) {
		return nil, false
	}
	return o.EthPorts, true
}

// HasEthPorts returns a boolean if a field has been set.
func (o *FsnInstance) HasEthPorts() bool {
	if o != nil && !IsNil(o.EthPorts) {
		return true
	}

	return false
}

// SetEthPorts gets a reference to the given []EthPortInstance and assigns it to the EthPorts field.
func (o *FsnInstance) SetEthPorts(v []EthPortInstance) {
	o.EthPorts = v
}

func (o FsnInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FsnInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partner_id"] = o.PartnerId
	}
	if !IsNil(o.ApplianceId) {
		toSerialize["appliance_id"] = o.ApplianceId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsLinkUp) {
		toSerialize["is_link_up"] = o.IsLinkUp
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.PrimaryPortId) {
		toSerialize["primary_port_id"] = o.PrimaryPortId
	}
	if !IsNil(o.ActivePortId) {
		toSerialize["active_port_id"] = o.ActivePortId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.StatusL10n) {
		toSerialize["status_l10n"] = o.StatusL10n
	}
	if !IsNil(o.IpPorts) {
		toSerialize["ip_ports"] = o.IpPorts
	}
	if !IsNil(o.Bonds) {
		toSerialize["bonds"] = o.Bonds
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	if !IsNil(o.EthPorts) {
		toSerialize["eth_ports"] = o.EthPorts
	}
	return toSerialize, nil
}

type NullableFsnInstance struct {
	value *FsnInstance
	isSet bool
}

func (v NullableFsnInstance) Get() *FsnInstance {
	return v.value
}

func (v *NullableFsnInstance) Set(val *FsnInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFsnInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFsnInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFsnInstance(val *FsnInstance) *NullableFsnInstance {
	return &NullableFsnInstance{value: val, isSet: true}
}

func (v NullableFsnInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFsnInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


