/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
	"time"
)

// checks if the SoftwareInstalledInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoftwareInstalledInstance{}

// SoftwareInstalledInstance Summary of the software packages that are installed on each appliance, or on the cluster as a whole.
type SoftwareInstalledInstance struct {
	// Unique identifier of the installed software instance.
	Id *string `json:"id,omitempty"`
	// Whether this information represents the common software release version that is supported on all appliances in the cluster. The value is true for the instance representing the cluster. The value is false for appliance software instances.
	IsCluster *bool `json:"is_cluster,omitempty"`
	// Version of the installed release software package release.
	ReleaseVersion *string `json:"release_version,omitempty"`
	// Build version of the installed software package release. Was added in version 2.0.0.0.
	BuildVersion *string `json:"build_version,omitempty"`
	// Date and time when this software package was produced.
	ReleaseTimestamp *time.Time `json:"release_timestamp,omitempty"`
	// Date and time when the software was successfully installed and committed on the cluster. If the software package has not been commited, this value is null.
	InstalledDate *time.Time `json:"installed_date,omitempty"`
	BuildFlavor *SoftwareInstalledBuildFlavorEnum `json:"build_flavor,omitempty"`
	BuildType *SoftwareInstalledBuildTypeEnum `json:"build_type,omitempty"`
	// Unique identifier of this build. Was added in version 2.0.0.0.
	BuildId *string `json:"build_id,omitempty"`
	// Localized message string corresponding to build_flavor Was added in version 2.0.0.0.
	BuildFlavorL10n *string `json:"build_flavor_l10n,omitempty"`
	// Localized message string corresponding to build_type Was added in version 2.0.0.0.
	BuildTypeL10n *string `json:"build_type_l10n,omitempty"`
	Appliance *ApplianceInstance `json:"appliance,omitempty"`
}

// NewSoftwareInstalledInstance instantiates a new SoftwareInstalledInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareInstalledInstance() *SoftwareInstalledInstance {
	this := SoftwareInstalledInstance{}
	return &this
}

// NewSoftwareInstalledInstanceWithDefaults instantiates a new SoftwareInstalledInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareInstalledInstanceWithDefaults() *SoftwareInstalledInstance {
	this := SoftwareInstalledInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SoftwareInstalledInstance) SetId(v string) {
	o.Id = &v
}

// GetIsCluster returns the IsCluster field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetIsCluster() bool {
	if o == nil || IsNil(o.IsCluster) {
		var ret bool
		return ret
	}
	return *o.IsCluster
}

// GetIsClusterOk returns a tuple with the IsCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetIsClusterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCluster) {
		return nil, false
	}
	return o.IsCluster, true
}

// HasIsCluster returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasIsCluster() bool {
	if o != nil && !IsNil(o.IsCluster) {
		return true
	}

	return false
}

// SetIsCluster gets a reference to the given bool and assigns it to the IsCluster field.
func (o *SoftwareInstalledInstance) SetIsCluster(v bool) {
	o.IsCluster = &v
}

// GetReleaseVersion returns the ReleaseVersion field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetReleaseVersion() string {
	if o == nil || IsNil(o.ReleaseVersion) {
		var ret string
		return ret
	}
	return *o.ReleaseVersion
}

// GetReleaseVersionOk returns a tuple with the ReleaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetReleaseVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseVersion) {
		return nil, false
	}
	return o.ReleaseVersion, true
}

// HasReleaseVersion returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasReleaseVersion() bool {
	if o != nil && !IsNil(o.ReleaseVersion) {
		return true
	}

	return false
}

// SetReleaseVersion gets a reference to the given string and assigns it to the ReleaseVersion field.
func (o *SoftwareInstalledInstance) SetReleaseVersion(v string) {
	o.ReleaseVersion = &v
}

// GetBuildVersion returns the BuildVersion field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetBuildVersion() string {
	if o == nil || IsNil(o.BuildVersion) {
		var ret string
		return ret
	}
	return *o.BuildVersion
}

// GetBuildVersionOk returns a tuple with the BuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetBuildVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BuildVersion) {
		return nil, false
	}
	return o.BuildVersion, true
}

// HasBuildVersion returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasBuildVersion() bool {
	if o != nil && !IsNil(o.BuildVersion) {
		return true
	}

	return false
}

// SetBuildVersion gets a reference to the given string and assigns it to the BuildVersion field.
func (o *SoftwareInstalledInstance) SetBuildVersion(v string) {
	o.BuildVersion = &v
}

// GetReleaseTimestamp returns the ReleaseTimestamp field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetReleaseTimestamp() time.Time {
	if o == nil || IsNil(o.ReleaseTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ReleaseTimestamp
}

// GetReleaseTimestampOk returns a tuple with the ReleaseTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetReleaseTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReleaseTimestamp) {
		return nil, false
	}
	return o.ReleaseTimestamp, true
}

// HasReleaseTimestamp returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasReleaseTimestamp() bool {
	if o != nil && !IsNil(o.ReleaseTimestamp) {
		return true
	}

	return false
}

// SetReleaseTimestamp gets a reference to the given time.Time and assigns it to the ReleaseTimestamp field.
func (o *SoftwareInstalledInstance) SetReleaseTimestamp(v time.Time) {
	o.ReleaseTimestamp = &v
}

// GetInstalledDate returns the InstalledDate field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetInstalledDate() time.Time {
	if o == nil || IsNil(o.InstalledDate) {
		var ret time.Time
		return ret
	}
	return *o.InstalledDate
}

// GetInstalledDateOk returns a tuple with the InstalledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetInstalledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.InstalledDate) {
		return nil, false
	}
	return o.InstalledDate, true
}

// HasInstalledDate returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasInstalledDate() bool {
	if o != nil && !IsNil(o.InstalledDate) {
		return true
	}

	return false
}

// SetInstalledDate gets a reference to the given time.Time and assigns it to the InstalledDate field.
func (o *SoftwareInstalledInstance) SetInstalledDate(v time.Time) {
	o.InstalledDate = &v
}

// GetBuildFlavor returns the BuildFlavor field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetBuildFlavor() SoftwareInstalledBuildFlavorEnum {
	if o == nil || IsNil(o.BuildFlavor) {
		var ret SoftwareInstalledBuildFlavorEnum
		return ret
	}
	return *o.BuildFlavor
}

// GetBuildFlavorOk returns a tuple with the BuildFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetBuildFlavorOk() (*SoftwareInstalledBuildFlavorEnum, bool) {
	if o == nil || IsNil(o.BuildFlavor) {
		return nil, false
	}
	return o.BuildFlavor, true
}

// HasBuildFlavor returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasBuildFlavor() bool {
	if o != nil && !IsNil(o.BuildFlavor) {
		return true
	}

	return false
}

// SetBuildFlavor gets a reference to the given SoftwareInstalledBuildFlavorEnum and assigns it to the BuildFlavor field.
func (o *SoftwareInstalledInstance) SetBuildFlavor(v SoftwareInstalledBuildFlavorEnum) {
	o.BuildFlavor = &v
}

// GetBuildType returns the BuildType field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetBuildType() SoftwareInstalledBuildTypeEnum {
	if o == nil || IsNil(o.BuildType) {
		var ret SoftwareInstalledBuildTypeEnum
		return ret
	}
	return *o.BuildType
}

// GetBuildTypeOk returns a tuple with the BuildType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetBuildTypeOk() (*SoftwareInstalledBuildTypeEnum, bool) {
	if o == nil || IsNil(o.BuildType) {
		return nil, false
	}
	return o.BuildType, true
}

// HasBuildType returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasBuildType() bool {
	if o != nil && !IsNil(o.BuildType) {
		return true
	}

	return false
}

// SetBuildType gets a reference to the given SoftwareInstalledBuildTypeEnum and assigns it to the BuildType field.
func (o *SoftwareInstalledInstance) SetBuildType(v SoftwareInstalledBuildTypeEnum) {
	o.BuildType = &v
}

// GetBuildId returns the BuildId field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetBuildId() string {
	if o == nil || IsNil(o.BuildId) {
		var ret string
		return ret
	}
	return *o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetBuildIdOk() (*string, bool) {
	if o == nil || IsNil(o.BuildId) {
		return nil, false
	}
	return o.BuildId, true
}

// HasBuildId returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasBuildId() bool {
	if o != nil && !IsNil(o.BuildId) {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given string and assigns it to the BuildId field.
func (o *SoftwareInstalledInstance) SetBuildId(v string) {
	o.BuildId = &v
}

// GetBuildFlavorL10n returns the BuildFlavorL10n field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetBuildFlavorL10n() string {
	if o == nil || IsNil(o.BuildFlavorL10n) {
		var ret string
		return ret
	}
	return *o.BuildFlavorL10n
}

// GetBuildFlavorL10nOk returns a tuple with the BuildFlavorL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetBuildFlavorL10nOk() (*string, bool) {
	if o == nil || IsNil(o.BuildFlavorL10n) {
		return nil, false
	}
	return o.BuildFlavorL10n, true
}

// HasBuildFlavorL10n returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasBuildFlavorL10n() bool {
	if o != nil && !IsNil(o.BuildFlavorL10n) {
		return true
	}

	return false
}

// SetBuildFlavorL10n gets a reference to the given string and assigns it to the BuildFlavorL10n field.
func (o *SoftwareInstalledInstance) SetBuildFlavorL10n(v string) {
	o.BuildFlavorL10n = &v
}

// GetBuildTypeL10n returns the BuildTypeL10n field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetBuildTypeL10n() string {
	if o == nil || IsNil(o.BuildTypeL10n) {
		var ret string
		return ret
	}
	return *o.BuildTypeL10n
}

// GetBuildTypeL10nOk returns a tuple with the BuildTypeL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetBuildTypeL10nOk() (*string, bool) {
	if o == nil || IsNil(o.BuildTypeL10n) {
		return nil, false
	}
	return o.BuildTypeL10n, true
}

// HasBuildTypeL10n returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasBuildTypeL10n() bool {
	if o != nil && !IsNil(o.BuildTypeL10n) {
		return true
	}

	return false
}

// SetBuildTypeL10n gets a reference to the given string and assigns it to the BuildTypeL10n field.
func (o *SoftwareInstalledInstance) SetBuildTypeL10n(v string) {
	o.BuildTypeL10n = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *SoftwareInstalledInstance) GetAppliance() ApplianceInstance {
	if o == nil || IsNil(o.Appliance) {
		var ret ApplianceInstance
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareInstalledInstance) GetApplianceOk() (*ApplianceInstance, bool) {
	if o == nil || IsNil(o.Appliance) {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *SoftwareInstalledInstance) HasAppliance() bool {
	if o != nil && !IsNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given ApplianceInstance and assigns it to the Appliance field.
func (o *SoftwareInstalledInstance) SetAppliance(v ApplianceInstance) {
	o.Appliance = &v
}

func (o SoftwareInstalledInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoftwareInstalledInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsCluster) {
		toSerialize["is_cluster"] = o.IsCluster
	}
	if !IsNil(o.ReleaseVersion) {
		toSerialize["release_version"] = o.ReleaseVersion
	}
	if !IsNil(o.BuildVersion) {
		toSerialize["build_version"] = o.BuildVersion
	}
	if !IsNil(o.ReleaseTimestamp) {
		toSerialize["release_timestamp"] = o.ReleaseTimestamp
	}
	if !IsNil(o.InstalledDate) {
		toSerialize["installed_date"] = o.InstalledDate
	}
	if !IsNil(o.BuildFlavor) {
		toSerialize["build_flavor"] = o.BuildFlavor
	}
	if !IsNil(o.BuildType) {
		toSerialize["build_type"] = o.BuildType
	}
	if !IsNil(o.BuildId) {
		toSerialize["build_id"] = o.BuildId
	}
	if !IsNil(o.BuildFlavorL10n) {
		toSerialize["build_flavor_l10n"] = o.BuildFlavorL10n
	}
	if !IsNil(o.BuildTypeL10n) {
		toSerialize["build_type_l10n"] = o.BuildTypeL10n
	}
	if !IsNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	return toSerialize, nil
}

type NullableSoftwareInstalledInstance struct {
	value *SoftwareInstalledInstance
	isSet bool
}

func (v NullableSoftwareInstalledInstance) Get() *SoftwareInstalledInstance {
	return v.value
}

func (v *NullableSoftwareInstalledInstance) Set(val *SoftwareInstalledInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareInstalledInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareInstalledInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareInstalledInstance(val *SoftwareInstalledInstance) *NullableSoftwareInstalledInstance {
	return &NullableSoftwareInstalledInstance{value: val, isSet: true}
}

func (v NullableSoftwareInstalledInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareInstalledInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


