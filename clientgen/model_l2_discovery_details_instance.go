/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the L2DiscoveryDetailsInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &L2DiscoveryDetailsInstance{}

// L2DiscoveryDetailsInstance Link local discovery information received from the uplink port. Was added in version 4.1.0.0.  Filtering on the fields of this embedded resource is not supported.
type L2DiscoveryDetailsInstance struct {
	// Remote switch MAC address.
	RemoteMac *string `json:"remote_mac,omitempty"`
	// Name of the interface of the port.
	RemotePortName *string `json:"remote_port_name,omitempty"`
	// Name of the remote switch.
	RemoteName *string `json:"remote_name,omitempty"`
	// Description of the remote switch.
	RemoteDescription *string `json:"remote_description,omitempty"`
	// Native VLAN of the remote switch.
	RemoteNativeVlan *int32 `json:"remote_native_vlan,omitempty"`
	// MTU of the remote switch.
	RemoteMtu *int32 `json:"remote_mtu,omitempty"`
}

// NewL2DiscoveryDetailsInstance instantiates a new L2DiscoveryDetailsInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewL2DiscoveryDetailsInstance() *L2DiscoveryDetailsInstance {
	this := L2DiscoveryDetailsInstance{}
	return &this
}

// NewL2DiscoveryDetailsInstanceWithDefaults instantiates a new L2DiscoveryDetailsInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewL2DiscoveryDetailsInstanceWithDefaults() *L2DiscoveryDetailsInstance {
	this := L2DiscoveryDetailsInstance{}
	return &this
}

// GetRemoteMac returns the RemoteMac field value if set, zero value otherwise.
func (o *L2DiscoveryDetailsInstance) GetRemoteMac() string {
	if o == nil || IsNil(o.RemoteMac) {
		var ret string
		return ret
	}
	return *o.RemoteMac
}

// GetRemoteMacOk returns a tuple with the RemoteMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2DiscoveryDetailsInstance) GetRemoteMacOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteMac) {
		return nil, false
	}
	return o.RemoteMac, true
}

// HasRemoteMac returns a boolean if a field has been set.
func (o *L2DiscoveryDetailsInstance) HasRemoteMac() bool {
	if o != nil && !IsNil(o.RemoteMac) {
		return true
	}

	return false
}

// SetRemoteMac gets a reference to the given string and assigns it to the RemoteMac field.
func (o *L2DiscoveryDetailsInstance) SetRemoteMac(v string) {
	o.RemoteMac = &v
}

// GetRemotePortName returns the RemotePortName field value if set, zero value otherwise.
func (o *L2DiscoveryDetailsInstance) GetRemotePortName() string {
	if o == nil || IsNil(o.RemotePortName) {
		var ret string
		return ret
	}
	return *o.RemotePortName
}

// GetRemotePortNameOk returns a tuple with the RemotePortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2DiscoveryDetailsInstance) GetRemotePortNameOk() (*string, bool) {
	if o == nil || IsNil(o.RemotePortName) {
		return nil, false
	}
	return o.RemotePortName, true
}

// HasRemotePortName returns a boolean if a field has been set.
func (o *L2DiscoveryDetailsInstance) HasRemotePortName() bool {
	if o != nil && !IsNil(o.RemotePortName) {
		return true
	}

	return false
}

// SetRemotePortName gets a reference to the given string and assigns it to the RemotePortName field.
func (o *L2DiscoveryDetailsInstance) SetRemotePortName(v string) {
	o.RemotePortName = &v
}

// GetRemoteName returns the RemoteName field value if set, zero value otherwise.
func (o *L2DiscoveryDetailsInstance) GetRemoteName() string {
	if o == nil || IsNil(o.RemoteName) {
		var ret string
		return ret
	}
	return *o.RemoteName
}

// GetRemoteNameOk returns a tuple with the RemoteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2DiscoveryDetailsInstance) GetRemoteNameOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteName) {
		return nil, false
	}
	return o.RemoteName, true
}

// HasRemoteName returns a boolean if a field has been set.
func (o *L2DiscoveryDetailsInstance) HasRemoteName() bool {
	if o != nil && !IsNil(o.RemoteName) {
		return true
	}

	return false
}

// SetRemoteName gets a reference to the given string and assigns it to the RemoteName field.
func (o *L2DiscoveryDetailsInstance) SetRemoteName(v string) {
	o.RemoteName = &v
}

// GetRemoteDescription returns the RemoteDescription field value if set, zero value otherwise.
func (o *L2DiscoveryDetailsInstance) GetRemoteDescription() string {
	if o == nil || IsNil(o.RemoteDescription) {
		var ret string
		return ret
	}
	return *o.RemoteDescription
}

// GetRemoteDescriptionOk returns a tuple with the RemoteDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2DiscoveryDetailsInstance) GetRemoteDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteDescription) {
		return nil, false
	}
	return o.RemoteDescription, true
}

// HasRemoteDescription returns a boolean if a field has been set.
func (o *L2DiscoveryDetailsInstance) HasRemoteDescription() bool {
	if o != nil && !IsNil(o.RemoteDescription) {
		return true
	}

	return false
}

// SetRemoteDescription gets a reference to the given string and assigns it to the RemoteDescription field.
func (o *L2DiscoveryDetailsInstance) SetRemoteDescription(v string) {
	o.RemoteDescription = &v
}

// GetRemoteNativeVlan returns the RemoteNativeVlan field value if set, zero value otherwise.
func (o *L2DiscoveryDetailsInstance) GetRemoteNativeVlan() int32 {
	if o == nil || IsNil(o.RemoteNativeVlan) {
		var ret int32
		return ret
	}
	return *o.RemoteNativeVlan
}

// GetRemoteNativeVlanOk returns a tuple with the RemoteNativeVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2DiscoveryDetailsInstance) GetRemoteNativeVlanOk() (*int32, bool) {
	if o == nil || IsNil(o.RemoteNativeVlan) {
		return nil, false
	}
	return o.RemoteNativeVlan, true
}

// HasRemoteNativeVlan returns a boolean if a field has been set.
func (o *L2DiscoveryDetailsInstance) HasRemoteNativeVlan() bool {
	if o != nil && !IsNil(o.RemoteNativeVlan) {
		return true
	}

	return false
}

// SetRemoteNativeVlan gets a reference to the given int32 and assigns it to the RemoteNativeVlan field.
func (o *L2DiscoveryDetailsInstance) SetRemoteNativeVlan(v int32) {
	o.RemoteNativeVlan = &v
}

// GetRemoteMtu returns the RemoteMtu field value if set, zero value otherwise.
func (o *L2DiscoveryDetailsInstance) GetRemoteMtu() int32 {
	if o == nil || IsNil(o.RemoteMtu) {
		var ret int32
		return ret
	}
	return *o.RemoteMtu
}

// GetRemoteMtuOk returns a tuple with the RemoteMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2DiscoveryDetailsInstance) GetRemoteMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.RemoteMtu) {
		return nil, false
	}
	return o.RemoteMtu, true
}

// HasRemoteMtu returns a boolean if a field has been set.
func (o *L2DiscoveryDetailsInstance) HasRemoteMtu() bool {
	if o != nil && !IsNil(o.RemoteMtu) {
		return true
	}

	return false
}

// SetRemoteMtu gets a reference to the given int32 and assigns it to the RemoteMtu field.
func (o *L2DiscoveryDetailsInstance) SetRemoteMtu(v int32) {
	o.RemoteMtu = &v
}

func (o L2DiscoveryDetailsInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o L2DiscoveryDetailsInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RemoteMac) {
		toSerialize["remote_mac"] = o.RemoteMac
	}
	if !IsNil(o.RemotePortName) {
		toSerialize["remote_port_name"] = o.RemotePortName
	}
	if !IsNil(o.RemoteName) {
		toSerialize["remote_name"] = o.RemoteName
	}
	if !IsNil(o.RemoteDescription) {
		toSerialize["remote_description"] = o.RemoteDescription
	}
	if !IsNil(o.RemoteNativeVlan) {
		toSerialize["remote_native_vlan"] = o.RemoteNativeVlan
	}
	if !IsNil(o.RemoteMtu) {
		toSerialize["remote_mtu"] = o.RemoteMtu
	}
	return toSerialize, nil
}

type NullableL2DiscoveryDetailsInstance struct {
	value *L2DiscoveryDetailsInstance
	isSet bool
}

func (v NullableL2DiscoveryDetailsInstance) Get() *L2DiscoveryDetailsInstance {
	return v.value
}

func (v *NullableL2DiscoveryDetailsInstance) Set(val *L2DiscoveryDetailsInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableL2DiscoveryDetailsInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableL2DiscoveryDetailsInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL2DiscoveryDetailsInstance(val *L2DiscoveryDetailsInstance) *NullableL2DiscoveryDetailsInstance {
	return &NullableL2DiscoveryDetailsInstance{value: val, isSet: true}
}

func (v NullableL2DiscoveryDetailsInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL2DiscoveryDetailsInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


