/*
PowerStore REST API

Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )

API version: 4.1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientgen

import (
	"encoding/json"
)

// checks if the NfsExportInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsExportInstance{}

// NfsExportInstance This resource type has queriable associations from file_system, datastore
type NfsExportInstance struct {
	// Unique id of the NFS Export.
	Id *string `json:"id,omitempty"`
	// Unique identifier of the file system on which the NFS Export was created.
	FileSystemId *string `json:"file_system_id,omitempty"`
	// NFS Export name.  This property supports case-insensitive filtering.
	Name *string `json:"name,omitempty"`
	// Local path to a location within the file system. With NFS, each export must have a unique local path. By default, the system exports the root of the file system (top-most directory) at the time the file system is created. This path specifies the unique location of the file system on the storage system. Before you can create additional exports within an NFS shared folder, you must create directories within it from a Linux/Unix host that is connected to the file system. After a directory has been created from a mounted host, you can create a corresponding export and set access permissions accordingly. 
	Path *string `json:"path,omitempty"`
	// NFS Export description.
	Description *string `json:"description,omitempty"`
	DefaultAccess *NFSExportDefaultAccessEnum `json:"default_access,omitempty"`
	MinSecurity *NFSExportMinSecurityEnum `json:"min_security,omitempty"`
	// (*Applies to NFS shares of VMware NFS storage resources.*) Default owner of the NFS Export associated with the datastore. Required if secure NFS enabled. For NFSv3 or NFSv4 without Kerberos, the default owner is root.
	NfsOwnerUsername *string `json:"nfs_owner_username,omitempty"`
	// Hosts with no access to the NFS export or its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.
	NoAccessHosts []string `json:"no_access_hosts,omitempty"`
	// Hosts with read-only access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.
	ReadOnlyHosts []string `json:"read_only_hosts,omitempty"`
	// Hosts with read-only and ready-only for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.
	ReadOnlyRootHosts []string `json:"read_only_root_hosts,omitempty"`
	// Hosts with read and write access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.
	ReadWriteHosts []string `json:"read_write_hosts,omitempty"`
	// Hosts with read and write and read and write for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.
	ReadWriteRootHosts []string `json:"read_write_root_hosts,omitempty"`
	// Specifies the user ID of the anonymous account.
	AnonymousUID *int32 `json:"anonymous_UID,omitempty"`
	// Specifies the group ID of the anonymous account.
	AnonymousGID *int32 `json:"anonymous_GID,omitempty"`
	// If set, do not allow access to set SUID. Otherwise, allow access.
	IsNoSUID *bool `json:"is_no_SUID,omitempty"`
	// Localized message string corresponding to default_access
	DefaultAccessL10n *string `json:"default_access_l10n,omitempty"`
	// Localized message string corresponding to min_security
	MinSecurityL10n *string `json:"min_security_l10n,omitempty"`
	FileSystem *FileSystemInstance `json:"file_system,omitempty"`
	// This is the inverse of the resource type datastore association.
	Datastores []DatastoreInstance `json:"datastores,omitempty"`
}

// NewNfsExportInstance instantiates a new NfsExportInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsExportInstance() *NfsExportInstance {
	this := NfsExportInstance{}
	var anonymousUID int32 = -2
	this.AnonymousUID = &anonymousUID
	var anonymousGID int32 = -2
	this.AnonymousGID = &anonymousGID
	return &this
}

// NewNfsExportInstanceWithDefaults instantiates a new NfsExportInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsExportInstanceWithDefaults() *NfsExportInstance {
	this := NfsExportInstance{}
	var anonymousUID int32 = -2
	this.AnonymousUID = &anonymousUID
	var anonymousGID int32 = -2
	this.AnonymousGID = &anonymousGID
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NfsExportInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NfsExportInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NfsExportInstance) SetId(v string) {
	o.Id = &v
}

// GetFileSystemId returns the FileSystemId field value if set, zero value otherwise.
func (o *NfsExportInstance) GetFileSystemId() string {
	if o == nil || IsNil(o.FileSystemId) {
		var ret string
		return ret
	}
	return *o.FileSystemId
}

// GetFileSystemIdOk returns a tuple with the FileSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetFileSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.FileSystemId) {
		return nil, false
	}
	return o.FileSystemId, true
}

// HasFileSystemId returns a boolean if a field has been set.
func (o *NfsExportInstance) HasFileSystemId() bool {
	if o != nil && !IsNil(o.FileSystemId) {
		return true
	}

	return false
}

// SetFileSystemId gets a reference to the given string and assigns it to the FileSystemId field.
func (o *NfsExportInstance) SetFileSystemId(v string) {
	o.FileSystemId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NfsExportInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NfsExportInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NfsExportInstance) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *NfsExportInstance) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *NfsExportInstance) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *NfsExportInstance) SetPath(v string) {
	o.Path = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NfsExportInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NfsExportInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NfsExportInstance) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultAccess returns the DefaultAccess field value if set, zero value otherwise.
func (o *NfsExportInstance) GetDefaultAccess() NFSExportDefaultAccessEnum {
	if o == nil || IsNil(o.DefaultAccess) {
		var ret NFSExportDefaultAccessEnum
		return ret
	}
	return *o.DefaultAccess
}

// GetDefaultAccessOk returns a tuple with the DefaultAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetDefaultAccessOk() (*NFSExportDefaultAccessEnum, bool) {
	if o == nil || IsNil(o.DefaultAccess) {
		return nil, false
	}
	return o.DefaultAccess, true
}

// HasDefaultAccess returns a boolean if a field has been set.
func (o *NfsExportInstance) HasDefaultAccess() bool {
	if o != nil && !IsNil(o.DefaultAccess) {
		return true
	}

	return false
}

// SetDefaultAccess gets a reference to the given NFSExportDefaultAccessEnum and assigns it to the DefaultAccess field.
func (o *NfsExportInstance) SetDefaultAccess(v NFSExportDefaultAccessEnum) {
	o.DefaultAccess = &v
}

// GetMinSecurity returns the MinSecurity field value if set, zero value otherwise.
func (o *NfsExportInstance) GetMinSecurity() NFSExportMinSecurityEnum {
	if o == nil || IsNil(o.MinSecurity) {
		var ret NFSExportMinSecurityEnum
		return ret
	}
	return *o.MinSecurity
}

// GetMinSecurityOk returns a tuple with the MinSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetMinSecurityOk() (*NFSExportMinSecurityEnum, bool) {
	if o == nil || IsNil(o.MinSecurity) {
		return nil, false
	}
	return o.MinSecurity, true
}

// HasMinSecurity returns a boolean if a field has been set.
func (o *NfsExportInstance) HasMinSecurity() bool {
	if o != nil && !IsNil(o.MinSecurity) {
		return true
	}

	return false
}

// SetMinSecurity gets a reference to the given NFSExportMinSecurityEnum and assigns it to the MinSecurity field.
func (o *NfsExportInstance) SetMinSecurity(v NFSExportMinSecurityEnum) {
	o.MinSecurity = &v
}

// GetNfsOwnerUsername returns the NfsOwnerUsername field value if set, zero value otherwise.
func (o *NfsExportInstance) GetNfsOwnerUsername() string {
	if o == nil || IsNil(o.NfsOwnerUsername) {
		var ret string
		return ret
	}
	return *o.NfsOwnerUsername
}

// GetNfsOwnerUsernameOk returns a tuple with the NfsOwnerUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetNfsOwnerUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.NfsOwnerUsername) {
		return nil, false
	}
	return o.NfsOwnerUsername, true
}

// HasNfsOwnerUsername returns a boolean if a field has been set.
func (o *NfsExportInstance) HasNfsOwnerUsername() bool {
	if o != nil && !IsNil(o.NfsOwnerUsername) {
		return true
	}

	return false
}

// SetNfsOwnerUsername gets a reference to the given string and assigns it to the NfsOwnerUsername field.
func (o *NfsExportInstance) SetNfsOwnerUsername(v string) {
	o.NfsOwnerUsername = &v
}

// GetNoAccessHosts returns the NoAccessHosts field value if set, zero value otherwise.
func (o *NfsExportInstance) GetNoAccessHosts() []string {
	if o == nil || IsNil(o.NoAccessHosts) {
		var ret []string
		return ret
	}
	return o.NoAccessHosts
}

// GetNoAccessHostsOk returns a tuple with the NoAccessHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetNoAccessHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.NoAccessHosts) {
		return nil, false
	}
	return o.NoAccessHosts, true
}

// HasNoAccessHosts returns a boolean if a field has been set.
func (o *NfsExportInstance) HasNoAccessHosts() bool {
	if o != nil && !IsNil(o.NoAccessHosts) {
		return true
	}

	return false
}

// SetNoAccessHosts gets a reference to the given []string and assigns it to the NoAccessHosts field.
func (o *NfsExportInstance) SetNoAccessHosts(v []string) {
	o.NoAccessHosts = v
}

// GetReadOnlyHosts returns the ReadOnlyHosts field value if set, zero value otherwise.
func (o *NfsExportInstance) GetReadOnlyHosts() []string {
	if o == nil || IsNil(o.ReadOnlyHosts) {
		var ret []string
		return ret
	}
	return o.ReadOnlyHosts
}

// GetReadOnlyHostsOk returns a tuple with the ReadOnlyHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetReadOnlyHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReadOnlyHosts) {
		return nil, false
	}
	return o.ReadOnlyHosts, true
}

// HasReadOnlyHosts returns a boolean if a field has been set.
func (o *NfsExportInstance) HasReadOnlyHosts() bool {
	if o != nil && !IsNil(o.ReadOnlyHosts) {
		return true
	}

	return false
}

// SetReadOnlyHosts gets a reference to the given []string and assigns it to the ReadOnlyHosts field.
func (o *NfsExportInstance) SetReadOnlyHosts(v []string) {
	o.ReadOnlyHosts = v
}

// GetReadOnlyRootHosts returns the ReadOnlyRootHosts field value if set, zero value otherwise.
func (o *NfsExportInstance) GetReadOnlyRootHosts() []string {
	if o == nil || IsNil(o.ReadOnlyRootHosts) {
		var ret []string
		return ret
	}
	return o.ReadOnlyRootHosts
}

// GetReadOnlyRootHostsOk returns a tuple with the ReadOnlyRootHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetReadOnlyRootHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReadOnlyRootHosts) {
		return nil, false
	}
	return o.ReadOnlyRootHosts, true
}

// HasReadOnlyRootHosts returns a boolean if a field has been set.
func (o *NfsExportInstance) HasReadOnlyRootHosts() bool {
	if o != nil && !IsNil(o.ReadOnlyRootHosts) {
		return true
	}

	return false
}

// SetReadOnlyRootHosts gets a reference to the given []string and assigns it to the ReadOnlyRootHosts field.
func (o *NfsExportInstance) SetReadOnlyRootHosts(v []string) {
	o.ReadOnlyRootHosts = v
}

// GetReadWriteHosts returns the ReadWriteHosts field value if set, zero value otherwise.
func (o *NfsExportInstance) GetReadWriteHosts() []string {
	if o == nil || IsNil(o.ReadWriteHosts) {
		var ret []string
		return ret
	}
	return o.ReadWriteHosts
}

// GetReadWriteHostsOk returns a tuple with the ReadWriteHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetReadWriteHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReadWriteHosts) {
		return nil, false
	}
	return o.ReadWriteHosts, true
}

// HasReadWriteHosts returns a boolean if a field has been set.
func (o *NfsExportInstance) HasReadWriteHosts() bool {
	if o != nil && !IsNil(o.ReadWriteHosts) {
		return true
	}

	return false
}

// SetReadWriteHosts gets a reference to the given []string and assigns it to the ReadWriteHosts field.
func (o *NfsExportInstance) SetReadWriteHosts(v []string) {
	o.ReadWriteHosts = v
}

// GetReadWriteRootHosts returns the ReadWriteRootHosts field value if set, zero value otherwise.
func (o *NfsExportInstance) GetReadWriteRootHosts() []string {
	if o == nil || IsNil(o.ReadWriteRootHosts) {
		var ret []string
		return ret
	}
	return o.ReadWriteRootHosts
}

// GetReadWriteRootHostsOk returns a tuple with the ReadWriteRootHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetReadWriteRootHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReadWriteRootHosts) {
		return nil, false
	}
	return o.ReadWriteRootHosts, true
}

// HasReadWriteRootHosts returns a boolean if a field has been set.
func (o *NfsExportInstance) HasReadWriteRootHosts() bool {
	if o != nil && !IsNil(o.ReadWriteRootHosts) {
		return true
	}

	return false
}

// SetReadWriteRootHosts gets a reference to the given []string and assigns it to the ReadWriteRootHosts field.
func (o *NfsExportInstance) SetReadWriteRootHosts(v []string) {
	o.ReadWriteRootHosts = v
}

// GetAnonymousUID returns the AnonymousUID field value if set, zero value otherwise.
func (o *NfsExportInstance) GetAnonymousUID() int32 {
	if o == nil || IsNil(o.AnonymousUID) {
		var ret int32
		return ret
	}
	return *o.AnonymousUID
}

// GetAnonymousUIDOk returns a tuple with the AnonymousUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetAnonymousUIDOk() (*int32, bool) {
	if o == nil || IsNil(o.AnonymousUID) {
		return nil, false
	}
	return o.AnonymousUID, true
}

// HasAnonymousUID returns a boolean if a field has been set.
func (o *NfsExportInstance) HasAnonymousUID() bool {
	if o != nil && !IsNil(o.AnonymousUID) {
		return true
	}

	return false
}

// SetAnonymousUID gets a reference to the given int32 and assigns it to the AnonymousUID field.
func (o *NfsExportInstance) SetAnonymousUID(v int32) {
	o.AnonymousUID = &v
}

// GetAnonymousGID returns the AnonymousGID field value if set, zero value otherwise.
func (o *NfsExportInstance) GetAnonymousGID() int32 {
	if o == nil || IsNil(o.AnonymousGID) {
		var ret int32
		return ret
	}
	return *o.AnonymousGID
}

// GetAnonymousGIDOk returns a tuple with the AnonymousGID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetAnonymousGIDOk() (*int32, bool) {
	if o == nil || IsNil(o.AnonymousGID) {
		return nil, false
	}
	return o.AnonymousGID, true
}

// HasAnonymousGID returns a boolean if a field has been set.
func (o *NfsExportInstance) HasAnonymousGID() bool {
	if o != nil && !IsNil(o.AnonymousGID) {
		return true
	}

	return false
}

// SetAnonymousGID gets a reference to the given int32 and assigns it to the AnonymousGID field.
func (o *NfsExportInstance) SetAnonymousGID(v int32) {
	o.AnonymousGID = &v
}

// GetIsNoSUID returns the IsNoSUID field value if set, zero value otherwise.
func (o *NfsExportInstance) GetIsNoSUID() bool {
	if o == nil || IsNil(o.IsNoSUID) {
		var ret bool
		return ret
	}
	return *o.IsNoSUID
}

// GetIsNoSUIDOk returns a tuple with the IsNoSUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetIsNoSUIDOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNoSUID) {
		return nil, false
	}
	return o.IsNoSUID, true
}

// HasIsNoSUID returns a boolean if a field has been set.
func (o *NfsExportInstance) HasIsNoSUID() bool {
	if o != nil && !IsNil(o.IsNoSUID) {
		return true
	}

	return false
}

// SetIsNoSUID gets a reference to the given bool and assigns it to the IsNoSUID field.
func (o *NfsExportInstance) SetIsNoSUID(v bool) {
	o.IsNoSUID = &v
}

// GetDefaultAccessL10n returns the DefaultAccessL10n field value if set, zero value otherwise.
func (o *NfsExportInstance) GetDefaultAccessL10n() string {
	if o == nil || IsNil(o.DefaultAccessL10n) {
		var ret string
		return ret
	}
	return *o.DefaultAccessL10n
}

// GetDefaultAccessL10nOk returns a tuple with the DefaultAccessL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetDefaultAccessL10nOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultAccessL10n) {
		return nil, false
	}
	return o.DefaultAccessL10n, true
}

// HasDefaultAccessL10n returns a boolean if a field has been set.
func (o *NfsExportInstance) HasDefaultAccessL10n() bool {
	if o != nil && !IsNil(o.DefaultAccessL10n) {
		return true
	}

	return false
}

// SetDefaultAccessL10n gets a reference to the given string and assigns it to the DefaultAccessL10n field.
func (o *NfsExportInstance) SetDefaultAccessL10n(v string) {
	o.DefaultAccessL10n = &v
}

// GetMinSecurityL10n returns the MinSecurityL10n field value if set, zero value otherwise.
func (o *NfsExportInstance) GetMinSecurityL10n() string {
	if o == nil || IsNil(o.MinSecurityL10n) {
		var ret string
		return ret
	}
	return *o.MinSecurityL10n
}

// GetMinSecurityL10nOk returns a tuple with the MinSecurityL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetMinSecurityL10nOk() (*string, bool) {
	if o == nil || IsNil(o.MinSecurityL10n) {
		return nil, false
	}
	return o.MinSecurityL10n, true
}

// HasMinSecurityL10n returns a boolean if a field has been set.
func (o *NfsExportInstance) HasMinSecurityL10n() bool {
	if o != nil && !IsNil(o.MinSecurityL10n) {
		return true
	}

	return false
}

// SetMinSecurityL10n gets a reference to the given string and assigns it to the MinSecurityL10n field.
func (o *NfsExportInstance) SetMinSecurityL10n(v string) {
	o.MinSecurityL10n = &v
}

// GetFileSystem returns the FileSystem field value if set, zero value otherwise.
func (o *NfsExportInstance) GetFileSystem() FileSystemInstance {
	if o == nil || IsNil(o.FileSystem) {
		var ret FileSystemInstance
		return ret
	}
	return *o.FileSystem
}

// GetFileSystemOk returns a tuple with the FileSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetFileSystemOk() (*FileSystemInstance, bool) {
	if o == nil || IsNil(o.FileSystem) {
		return nil, false
	}
	return o.FileSystem, true
}

// HasFileSystem returns a boolean if a field has been set.
func (o *NfsExportInstance) HasFileSystem() bool {
	if o != nil && !IsNil(o.FileSystem) {
		return true
	}

	return false
}

// SetFileSystem gets a reference to the given FileSystemInstance and assigns it to the FileSystem field.
func (o *NfsExportInstance) SetFileSystem(v FileSystemInstance) {
	o.FileSystem = &v
}

// GetDatastores returns the Datastores field value if set, zero value otherwise.
func (o *NfsExportInstance) GetDatastores() []DatastoreInstance {
	if o == nil || IsNil(o.Datastores) {
		var ret []DatastoreInstance
		return ret
	}
	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsExportInstance) GetDatastoresOk() ([]DatastoreInstance, bool) {
	if o == nil || IsNil(o.Datastores) {
		return nil, false
	}
	return o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *NfsExportInstance) HasDatastores() bool {
	if o != nil && !IsNil(o.Datastores) {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []DatastoreInstance and assigns it to the Datastores field.
func (o *NfsExportInstance) SetDatastores(v []DatastoreInstance) {
	o.Datastores = v
}

func (o NfsExportInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsExportInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FileSystemId) {
		toSerialize["file_system_id"] = o.FileSystemId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DefaultAccess) {
		toSerialize["default_access"] = o.DefaultAccess
	}
	if !IsNil(o.MinSecurity) {
		toSerialize["min_security"] = o.MinSecurity
	}
	if !IsNil(o.NfsOwnerUsername) {
		toSerialize["nfs_owner_username"] = o.NfsOwnerUsername
	}
	if !IsNil(o.NoAccessHosts) {
		toSerialize["no_access_hosts"] = o.NoAccessHosts
	}
	if !IsNil(o.ReadOnlyHosts) {
		toSerialize["read_only_hosts"] = o.ReadOnlyHosts
	}
	if !IsNil(o.ReadOnlyRootHosts) {
		toSerialize["read_only_root_hosts"] = o.ReadOnlyRootHosts
	}
	if !IsNil(o.ReadWriteHosts) {
		toSerialize["read_write_hosts"] = o.ReadWriteHosts
	}
	if !IsNil(o.ReadWriteRootHosts) {
		toSerialize["read_write_root_hosts"] = o.ReadWriteRootHosts
	}
	if !IsNil(o.AnonymousUID) {
		toSerialize["anonymous_UID"] = o.AnonymousUID
	}
	if !IsNil(o.AnonymousGID) {
		toSerialize["anonymous_GID"] = o.AnonymousGID
	}
	if !IsNil(o.IsNoSUID) {
		toSerialize["is_no_SUID"] = o.IsNoSUID
	}
	if !IsNil(o.DefaultAccessL10n) {
		toSerialize["default_access_l10n"] = o.DefaultAccessL10n
	}
	if !IsNil(o.MinSecurityL10n) {
		toSerialize["min_security_l10n"] = o.MinSecurityL10n
	}
	if !IsNil(o.FileSystem) {
		toSerialize["file_system"] = o.FileSystem
	}
	if !IsNil(o.Datastores) {
		toSerialize["datastores"] = o.Datastores
	}
	return toSerialize, nil
}

type NullableNfsExportInstance struct {
	value *NfsExportInstance
	isSet bool
}

func (v NullableNfsExportInstance) Get() *NfsExportInstance {
	return v.value
}

func (v *NullableNfsExportInstance) Set(val *NfsExportInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsExportInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsExportInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsExportInstance(val *NfsExportInstance) *NullableNfsExportInstance {
	return &NullableNfsExportInstance{value: val, isSet: true}
}

func (v NullableNfsExportInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsExportInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


